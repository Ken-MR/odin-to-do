(()=>{var e={426:(e,t,n)=>{"use strict";n.d(t,{Z:()=>r});var o=n(537),a=n.n(o),s=n(645),i=n.n(s)()(a());i.push([e.id,'#content {\n    display: grid !important;\n    grid-template-columns: 1fr 3fr;\n    grid-template-rows: 1fr 4fr;\n\n    position: fixed;\n    top: 0;\n    right: 0;\n    bottom: 0;\n    left: 0;\n}\n\n#side-bar {\n    background-color: grey;\n\n    grid-column: 1 / 2;\n    grid-row: 1 / -1;\n    \n    display: grid;\n    grid-template-rows: 1fr 4fr;\n}\n\n#filter-tabs {\n    border-bottom: solid 5px darkgray;\n    grid-row: 1 / 2;\n}\n\n#filter-tabs > ul {\n    list-style: none;\n    padding: 0;\n    margin-left: 40px;\n    display: grid;\n    gap: 24px;\n}\n\nli {\n    padding: 0;\n    margin: 0;\n}\n\n#task-list {\n    grid-row: 2 / -1;\n}\n\n#task-info {\n    background-color: white;\n    padding: 10px;\n\n    grid-column: 2;\n    grid-row: 1 / -1;\n\n   display: grid;\n   grid-template-rows: 100px 1fr;\n}\n\n#task-info > h1 {\n    position: relative;\n    top: 20px;\n    left: 20px;\n}\n\nform {\n    display: grid;\n    grid-template-columns: 1fr 1fr 1fr;\n    grid-template-rows: 50px 100px 100px;\n    border: solid 2px grey;\n}\n\nform > div {\n    border: solid 1px grey;\n}\n\n.data {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    padding: 10px;\n}\n\n.data:first-child {\n    grid-column: 1 / 2;\n    grid-row: 1;\n    padding: 5px;\n    border: 0px;\n}\n\n.data:nth-child(2) {\n    grid-column: 1 / 2;\n    grid-row: 2;\n}\n\n.data:nth-child(3) {\n    grid-column: 2 / 3;\n    grid-row: 2;\n}\n\n.data:nth-child(4) {\n    grid-column: 3 / 3;\n    grid-row: 2;\n}\n\n.data:last-child {\n    grid-column: 1 / -1;\n    grid-row: 3;\n}\n\nlabel {\n    padding-right: 10px;\n}\n\ninput, textarea, select {\n    appearance: none;\n}\n\ninput:focus {\n    border: lightblue solid;\n}\n\ninput[type="submit"] {\n    appearance: none;\n    padding: 5px 20px;\n    border-radius: 10px;\n    background-color: rgb(36, 27, 134);\n    border: 1px solid rgb(36, 27, 134);\n    color: white;\n}\n\n.tasks {\n    display: grid;\n    grid-template-rows: 250px 250px 250px;\n    grid-template-columns: 1fr 1fr 1fr;\n    gap: 30px;\n    padding: 20px;\n    grid-column: 1;\n    grid-row: 2 / -1;\n    color: black;\n    overflow: auto;\n}\n    \n.card {\n    background-color: grey;\n    padding: 10px;\n    border: 5px solid rgb(36, 27, 134);\n    border-left: 15px solid rgb(36, 27, 134);\n    border-radius: 10px;\n\n    display: grid;\n    grid-template-rows: 50px 100px 50px;\n    \n}\n\n.card > h3 {\n    position: relative;\n    left: 10px;\n    top: 10px;\n    grid-row: 1;\n}\n\n.card > p {\n    position: relative;\n    left: 10px;\n    grid-row: 2;\n    width: 75%;\n}\n\n.card > div {\n    position: relative;\n    grid-row: 3;\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n    gap: 20px;\n    padding-right: 20px;\n}\n\n.task-data {\n    height: 300px;\n    width: 500px;\n    display: grid;\n    grid-template-columns: 3fr 1fr;\n    grid-template-rows: 50px 200px 50px;\n    position: relative;\n    left: 20px;\n    border: solid 5px grey;\n    padding: 10px;\n}\n\n.task-date {\n    grid-row: 1;\n    grid-column: 1;\n    position: relative;\n    top: 10px;\n}\n\n.task-priority {\n    grid-row: 1;\n    grid-column: 2;\n    position: relative;\n    top: 10px;\n}\n\n.task-description {\n    grid-row: 2;\n    grid-column: 1 / -1;\n    border: 2px solid grey;\n    padding: 10px;\n}\n\n.delete-icon {\n    grid-row: 3;\n    grid-column: 1 / -1;\n    position: relative;\n    top: 20px;\n}',"",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA;IACI,wBAAwB;IACxB,8BAA8B;IAC9B,2BAA2B;;IAE3B,eAAe;IACf,MAAM;IACN,QAAQ;IACR,SAAS;IACT,OAAO;AACX;;AAEA;IACI,sBAAsB;;IAEtB,kBAAkB;IAClB,gBAAgB;;IAEhB,aAAa;IACb,2BAA2B;AAC/B;;AAEA;IACI,iCAAiC;IACjC,eAAe;AACnB;;AAEA;IACI,gBAAgB;IAChB,UAAU;IACV,iBAAiB;IACjB,aAAa;IACb,SAAS;AACb;;AAEA;IACI,UAAU;IACV,SAAS;AACb;;AAEA;IACI,gBAAgB;AACpB;;AAEA;IACI,uBAAuB;IACvB,aAAa;;IAEb,cAAc;IACd,gBAAgB;;GAEjB,aAAa;GACb,6BAA6B;AAChC;;AAEA;IACI,kBAAkB;IAClB,SAAS;IACT,UAAU;AACd;;AAEA;IACI,aAAa;IACb,kCAAkC;IAClC,oCAAoC;IACpC,sBAAsB;AAC1B;;AAEA;IACI,sBAAsB;AAC1B;;AAEA;IACI,aAAa;IACb,uBAAuB;IACvB,mBAAmB;IACnB,aAAa;AACjB;;AAEA;IACI,kBAAkB;IAClB,WAAW;IACX,YAAY;IACZ,WAAW;AACf;;AAEA;IACI,kBAAkB;IAClB,WAAW;AACf;;AAEA;IACI,kBAAkB;IAClB,WAAW;AACf;;AAEA;IACI,kBAAkB;IAClB,WAAW;AACf;;AAEA;IACI,mBAAmB;IACnB,WAAW;AACf;;AAEA;IACI,mBAAmB;AACvB;;AAEA;IACI,gBAAgB;AACpB;;AAEA;IACI,uBAAuB;AAC3B;;AAEA;IACI,gBAAgB;IAChB,iBAAiB;IACjB,mBAAmB;IACnB,kCAAkC;IAClC,kCAAkC;IAClC,YAAY;AAChB;;AAEA;IACI,aAAa;IACb,qCAAqC;IACrC,kCAAkC;IAClC,SAAS;IACT,aAAa;IACb,cAAc;IACd,gBAAgB;IAChB,YAAY;IACZ,cAAc;AAClB;;AAEA;IACI,sBAAsB;IACtB,aAAa;IACb,kCAAkC;IAClC,wCAAwC;IACxC,mBAAmB;;IAEnB,aAAa;IACb,mCAAmC;;AAEvC;;AAEA;IACI,kBAAkB;IAClB,UAAU;IACV,SAAS;IACT,WAAW;AACf;;AAEA;IACI,kBAAkB;IAClB,UAAU;IACV,WAAW;IACX,UAAU;AACd;;AAEA;IACI,kBAAkB;IAClB,WAAW;IACX,aAAa;IACb,mBAAmB;IACnB,8BAA8B;IAC9B,SAAS;IACT,mBAAmB;AACvB;;AAEA;IACI,aAAa;IACb,YAAY;IACZ,aAAa;IACb,8BAA8B;IAC9B,mCAAmC;IACnC,kBAAkB;IAClB,UAAU;IACV,sBAAsB;IACtB,aAAa;AACjB;;AAEA;IACI,WAAW;IACX,cAAc;IACd,kBAAkB;IAClB,SAAS;AACb;;AAEA;IACI,WAAW;IACX,cAAc;IACd,kBAAkB;IAClB,SAAS;AACb;;AAEA;IACI,WAAW;IACX,mBAAmB;IACnB,sBAAsB;IACtB,aAAa;AACjB;;AAEA;IACI,WAAW;IACX,mBAAmB;IACnB,kBAAkB;IAClB,SAAS;AACb",sourcesContent:['#content {\n    display: grid !important;\n    grid-template-columns: 1fr 3fr;\n    grid-template-rows: 1fr 4fr;\n\n    position: fixed;\n    top: 0;\n    right: 0;\n    bottom: 0;\n    left: 0;\n}\n\n#side-bar {\n    background-color: grey;\n\n    grid-column: 1 / 2;\n    grid-row: 1 / -1;\n    \n    display: grid;\n    grid-template-rows: 1fr 4fr;\n}\n\n#filter-tabs {\n    border-bottom: solid 5px darkgray;\n    grid-row: 1 / 2;\n}\n\n#filter-tabs > ul {\n    list-style: none;\n    padding: 0;\n    margin-left: 40px;\n    display: grid;\n    gap: 24px;\n}\n\nli {\n    padding: 0;\n    margin: 0;\n}\n\n#task-list {\n    grid-row: 2 / -1;\n}\n\n#task-info {\n    background-color: white;\n    padding: 10px;\n\n    grid-column: 2;\n    grid-row: 1 / -1;\n\n   display: grid;\n   grid-template-rows: 100px 1fr;\n}\n\n#task-info > h1 {\n    position: relative;\n    top: 20px;\n    left: 20px;\n}\n\nform {\n    display: grid;\n    grid-template-columns: 1fr 1fr 1fr;\n    grid-template-rows: 50px 100px 100px;\n    border: solid 2px grey;\n}\n\nform > div {\n    border: solid 1px grey;\n}\n\n.data {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    padding: 10px;\n}\n\n.data:first-child {\n    grid-column: 1 / 2;\n    grid-row: 1;\n    padding: 5px;\n    border: 0px;\n}\n\n.data:nth-child(2) {\n    grid-column: 1 / 2;\n    grid-row: 2;\n}\n\n.data:nth-child(3) {\n    grid-column: 2 / 3;\n    grid-row: 2;\n}\n\n.data:nth-child(4) {\n    grid-column: 3 / 3;\n    grid-row: 2;\n}\n\n.data:last-child {\n    grid-column: 1 / -1;\n    grid-row: 3;\n}\n\nlabel {\n    padding-right: 10px;\n}\n\ninput, textarea, select {\n    appearance: none;\n}\n\ninput:focus {\n    border: lightblue solid;\n}\n\ninput[type="submit"] {\n    appearance: none;\n    padding: 5px 20px;\n    border-radius: 10px;\n    background-color: rgb(36, 27, 134);\n    border: 1px solid rgb(36, 27, 134);\n    color: white;\n}\n\n.tasks {\n    display: grid;\n    grid-template-rows: 250px 250px 250px;\n    grid-template-columns: 1fr 1fr 1fr;\n    gap: 30px;\n    padding: 20px;\n    grid-column: 1;\n    grid-row: 2 / -1;\n    color: black;\n    overflow: auto;\n}\n    \n.card {\n    background-color: grey;\n    padding: 10px;\n    border: 5px solid rgb(36, 27, 134);\n    border-left: 15px solid rgb(36, 27, 134);\n    border-radius: 10px;\n\n    display: grid;\n    grid-template-rows: 50px 100px 50px;\n    \n}\n\n.card > h3 {\n    position: relative;\n    left: 10px;\n    top: 10px;\n    grid-row: 1;\n}\n\n.card > p {\n    position: relative;\n    left: 10px;\n    grid-row: 2;\n    width: 75%;\n}\n\n.card > div {\n    position: relative;\n    grid-row: 3;\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n    gap: 20px;\n    padding-right: 20px;\n}\n\n.task-data {\n    height: 300px;\n    width: 500px;\n    display: grid;\n    grid-template-columns: 3fr 1fr;\n    grid-template-rows: 50px 200px 50px;\n    position: relative;\n    left: 20px;\n    border: solid 5px grey;\n    padding: 10px;\n}\n\n.task-date {\n    grid-row: 1;\n    grid-column: 1;\n    position: relative;\n    top: 10px;\n}\n\n.task-priority {\n    grid-row: 1;\n    grid-column: 2;\n    position: relative;\n    top: 10px;\n}\n\n.task-description {\n    grid-row: 2;\n    grid-column: 1 / -1;\n    border: 2px solid grey;\n    padding: 10px;\n}\n\n.delete-icon {\n    grid-row: 3;\n    grid-column: 1 / -1;\n    position: relative;\n    top: 20px;\n}'],sourceRoot:""}]);const r=i},645:e=>{"use strict";e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n="",o=void 0!==t[5];return t[4]&&(n+="@supports (".concat(t[4],") {")),t[2]&&(n+="@media ".concat(t[2]," {")),o&&(n+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),n+=e(t),o&&(n+="}"),t[2]&&(n+="}"),t[4]&&(n+="}"),n})).join("")},t.i=function(e,n,o,a,s){"string"==typeof e&&(e=[[null,e,void 0]]);var i={};if(o)for(var r=0;r<this.length;r++){var l=this[r][0];null!=l&&(i[l]=!0)}for(var c=0;c<e.length;c++){var d=[].concat(e[c]);o&&i[d[0]]||(void 0!==s&&(void 0===d[5]||(d[1]="@layer".concat(d[5].length>0?" ".concat(d[5]):""," {").concat(d[1],"}")),d[5]=s),n&&(d[2]?(d[1]="@media ".concat(d[2]," {").concat(d[1],"}"),d[2]=n):d[2]=n),a&&(d[4]?(d[1]="@supports (".concat(d[4],") {").concat(d[1],"}"),d[4]=a):d[4]="".concat(a)),t.push(d))}},t}},537:e=>{"use strict";e.exports=function(e){var t=e[1],n=e[3];if(!n)return t;if("function"==typeof btoa){var o=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),a="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(o),s="/*# ".concat(a," */");return[t].concat([s]).join("\n")}return[t].join("\n")}},379:e=>{"use strict";var t=[];function n(e){for(var n=-1,o=0;o<t.length;o++)if(t[o].identifier===e){n=o;break}return n}function o(e,o){for(var s={},i=[],r=0;r<e.length;r++){var l=e[r],c=o.base?l[0]+o.base:l[0],d=s[c]||0,u="".concat(c," ").concat(d);s[c]=d+1;var p=n(u),m={css:l[1],media:l[2],sourceMap:l[3],supports:l[4],layer:l[5]};if(-1!==p)t[p].references++,t[p].updater(m);else{var g=a(m,o);o.byIndex=r,t.splice(r,0,{identifier:u,updater:g,references:1})}i.push(u)}return i}function a(e,t){var n=t.domAPI(t);return n.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;n.update(e=t)}else n.remove()}}e.exports=function(e,a){var s=o(e=e||[],a=a||{});return function(e){e=e||[];for(var i=0;i<s.length;i++){var r=n(s[i]);t[r].references--}for(var l=o(e,a),c=0;c<s.length;c++){var d=n(s[c]);0===t[d].references&&(t[d].updater(),t.splice(d,1))}s=l}}},569:e=>{"use strict";var t={};e.exports=function(e,n){var o=function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}(e);if(!o)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");o.appendChild(n)}},216:e=>{"use strict";e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},565:(e,t,n)=>{"use strict";e.exports=function(e){var t=n.nc;t&&e.setAttribute("nonce",t)}},795:e=>{"use strict";e.exports=function(e){var t=e.insertStyleElement(e);return{update:function(n){!function(e,t,n){var o="";n.supports&&(o+="@supports (".concat(n.supports,") {")),n.media&&(o+="@media ".concat(n.media," {"));var a=void 0!==n.layer;a&&(o+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),o+=n.css,a&&(o+="}"),n.media&&(o+="}"),n.supports&&(o+="}");var s=n.sourceMap;s&&"undefined"!=typeof btoa&&(o+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(s))))," */")),t.styleTagTransform(o,e,t.options)}(t,e,n)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},589:e=>{"use strict";e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}},455:function(e){e.exports=function(){"use strict";var e={awaitingPromise:new WeakMap,promise:new WeakMap,innerParams:new WeakMap,domCache:new WeakMap};const t=e=>{const t={};for(const n in e)t[e[n]]="swal2-"+e[n];return t},n=t(["container","shown","height-auto","iosfix","popup","modal","no-backdrop","no-transition","toast","toast-shown","show","hide","close","title","html-container","actions","confirm","deny","cancel","default-outline","footer","icon","icon-content","image","input","file","range","select","radio","checkbox","label","textarea","inputerror","input-label","validation-message","progress-steps","active-progress-step","progress-step","progress-step-line","loader","loading","styled","top","top-start","top-end","top-left","top-right","center","center-start","center-end","center-left","center-right","bottom","bottom-start","bottom-end","bottom-left","bottom-right","grow-row","grow-column","grow-fullscreen","rtl","timer-progress-bar","timer-progress-bar-container","scrollbar-measure","icon-success","icon-warning","icon-info","icon-question","icon-error"]),o=t(["success","warning","info","question","error"]),a="SweetAlert2:",s=e=>e.charAt(0).toUpperCase()+e.slice(1),i=e=>{console.warn(`${a} ${"object"==typeof e?e.join(" "):e}`)},r=e=>{console.error(`${a} ${e}`)},l=[],c=(e,t)=>{var n;n=`"${e}" is deprecated and will be removed in the next major release. Please use "${t}" instead.`,l.includes(n)||(l.push(n),i(n))},d=e=>"function"==typeof e?e():e,u=e=>e&&"function"==typeof e.toPromise,p=e=>u(e)?e.toPromise():Promise.resolve(e),m=e=>e&&Promise.resolve(e)===e,g=()=>document.body.querySelector(`.${n.container}`),w=e=>{const t=g();return t?t.querySelector(e):null},h=e=>w(`.${e}`),f=()=>h(n.popup),b=()=>h(n.icon),A=()=>h(n.title),y=()=>h(n["html-container"]),C=()=>h(n.image),v=()=>h(n["progress-steps"]),x=()=>h(n["validation-message"]),k=()=>w(`.${n.actions} .${n.confirm}`),B=()=>w(`.${n.actions} .${n.cancel}`),I=()=>w(`.${n.actions} .${n.deny}`),E=()=>w(`.${n.loader}`),T=()=>h(n.actions),$=()=>h(n.footer),P=()=>h(n["timer-progress-bar"]),S=()=>h(n.close),L=()=>{const e=Array.from(f().querySelectorAll('[tabindex]:not([tabindex="-1"]):not([tabindex="0"])')).sort(((e,t)=>{const n=parseInt(e.getAttribute("tabindex")),o=parseInt(t.getAttribute("tabindex"));return n>o?1:n<o?-1:0})),t=Array.from(f().querySelectorAll('\n  a[href],\n  area[href],\n  input:not([disabled]),\n  select:not([disabled]),\n  textarea:not([disabled]),\n  button:not([disabled]),\n  iframe,\n  object,\n  embed,\n  [tabindex="0"],\n  [contenteditable],\n  audio[controls],\n  video[controls],\n  summary\n')).filter((e=>"-1"!==e.getAttribute("tabindex")));return(e=>{const t=[];for(let n=0;n<e.length;n++)-1===t.indexOf(e[n])&&t.push(e[n]);return t})(e.concat(t)).filter((e=>K(e)))},j=()=>D(document.body,n.shown)&&!D(document.body,n["toast-shown"])&&!D(document.body,n["no-backdrop"]),O=()=>f()&&D(f(),n.toast),M={previousBodyPadding:null},N=(e,t)=>{if(e.textContent="",t){const n=(new DOMParser).parseFromString(t,"text/html");Array.from(n.querySelector("head").childNodes).forEach((t=>{e.appendChild(t)})),Array.from(n.querySelector("body").childNodes).forEach((t=>{t instanceof HTMLVideoElement||t instanceof HTMLAudioElement?e.appendChild(t.cloneNode(!0)):e.appendChild(t)}))}},D=(e,t)=>{if(!t)return!1;const n=t.split(/\s+/);for(let t=0;t<n.length;t++)if(!e.classList.contains(n[t]))return!1;return!0},q=(e,t,a)=>{if(((e,t)=>{Array.from(e.classList).forEach((a=>{Object.values(n).includes(a)||Object.values(o).includes(a)||Object.values(t.showClass).includes(a)||e.classList.remove(a)}))})(e,t),t.customClass&&t.customClass[a]){if("string"!=typeof t.customClass[a]&&!t.customClass[a].forEach)return void i(`Invalid type of customClass.${a}! Expected string or iterable object, got "${typeof t.customClass[a]}"`);V(e,t.customClass[a])}},z=(e,t)=>{if(!t)return null;switch(t){case"select":case"textarea":case"file":return e.querySelector(`.${n.popup} > .${n[t]}`);case"checkbox":return e.querySelector(`.${n.popup} > .${n.checkbox} input`);case"radio":return e.querySelector(`.${n.popup} > .${n.radio} input:checked`)||e.querySelector(`.${n.popup} > .${n.radio} input:first-child`);case"range":return e.querySelector(`.${n.popup} > .${n.range} input`);default:return e.querySelector(`.${n.popup} > .${n.input}`)}},H=e=>{if(e.focus(),"file"!==e.type){const t=e.value;e.value="",e.value=t}},W=(e,t,n)=>{e&&t&&("string"==typeof t&&(t=t.split(/\s+/).filter(Boolean)),t.forEach((t=>{Array.isArray(e)?e.forEach((e=>{n?e.classList.add(t):e.classList.remove(t)})):n?e.classList.add(t):e.classList.remove(t)})))},V=(e,t)=>{W(e,t,!0)},U=(e,t)=>{W(e,t,!1)},F=(e,t)=>{const n=Array.from(e.children);for(let e=0;e<n.length;e++){const o=n[e];if(o instanceof HTMLElement&&D(o,t))return o}},Y=(e,t,n)=>{n===`${parseInt(n)}`&&(n=parseInt(n)),n||0===parseInt(n)?e.style[t]="number"==typeof n?`${n}px`:n:e.style.removeProperty(t)},R=function(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"flex";e.style.display=t},Z=e=>{e.style.display="none"},_=(e,t,n,o)=>{const a=e.querySelector(t);a&&(a.style[n]=o)},X=function(e,t){t?R(e,arguments.length>2&&void 0!==arguments[2]?arguments[2]:"flex"):Z(e)},K=e=>!(!e||!(e.offsetWidth||e.offsetHeight||e.getClientRects().length)),J=e=>!!(e.scrollHeight>e.clientHeight),G=e=>{const t=window.getComputedStyle(e),n=parseFloat(t.getPropertyValue("animation-duration")||"0"),o=parseFloat(t.getPropertyValue("transition-duration")||"0");return n>0||o>0},Q=function(e){let t=arguments.length>1&&void 0!==arguments[1]&&arguments[1];const n=P();K(n)&&(t&&(n.style.transition="none",n.style.width="100%"),setTimeout((()=>{n.style.transition=`width ${e/1e3}s linear`,n.style.width="0%"}),10))},ee={},te=e=>new Promise((t=>{if(!e)return t();const n=window.scrollX,o=window.scrollY;ee.restoreFocusTimeout=setTimeout((()=>{ee.previousActiveElement instanceof HTMLElement?(ee.previousActiveElement.focus(),ee.previousActiveElement=null):document.body&&document.body.focus(),t()}),100),window.scrollTo(n,o)})),ne=()=>"undefined"==typeof window||"undefined"==typeof document,oe=`\n <div aria-labelledby="${n.title}" aria-describedby="${n["html-container"]}" class="${n.popup}" tabindex="-1">\n   <button type="button" class="${n.close}"></button>\n   <ul class="${n["progress-steps"]}"></ul>\n   <div class="${n.icon}"></div>\n   <img class="${n.image}" />\n   <h2 class="${n.title}" id="${n.title}"></h2>\n   <div class="${n["html-container"]}" id="${n["html-container"]}"></div>\n   <input class="${n.input}" />\n   <input type="file" class="${n.file}" />\n   <div class="${n.range}">\n     <input type="range" />\n     <output></output>\n   </div>\n   <select class="${n.select}"></select>\n   <div class="${n.radio}"></div>\n   <label for="${n.checkbox}" class="${n.checkbox}">\n     <input type="checkbox" />\n     <span class="${n.label}"></span>\n   </label>\n   <textarea class="${n.textarea}"></textarea>\n   <div class="${n["validation-message"]}" id="${n["validation-message"]}"></div>\n   <div class="${n.actions}">\n     <div class="${n.loader}"></div>\n     <button type="button" class="${n.confirm}"></button>\n     <button type="button" class="${n.deny}"></button>\n     <button type="button" class="${n.cancel}"></button>\n   </div>\n   <div class="${n.footer}"></div>\n   <div class="${n["timer-progress-bar-container"]}">\n     <div class="${n["timer-progress-bar"]}"></div>\n   </div>\n </div>\n`.replace(/(^|\n)\s*/g,""),ae=()=>{ee.currentInstance.resetValidationMessage()},se=e=>{const t=(()=>{const e=g();return!!e&&(e.remove(),U([document.documentElement,document.body],[n["no-backdrop"],n["toast-shown"],n["has-column"]]),!0)})();if(ne())return void r("SweetAlert2 requires document to initialize");const o=document.createElement("div");o.className=n.container,t&&V(o,n["no-transition"]),N(o,oe);const a="string"==typeof(s=e.target)?document.querySelector(s):s;var s;a.appendChild(o),(e=>{const t=f();t.setAttribute("role",e.toast?"alert":"dialog"),t.setAttribute("aria-live",e.toast?"polite":"assertive"),e.toast||t.setAttribute("aria-modal","true")})(e),(e=>{"rtl"===window.getComputedStyle(e).direction&&V(g(),n.rtl)})(a),(()=>{const e=f(),t=F(e,n.input),o=F(e,n.file),a=e.querySelector(`.${n.range} input`),s=e.querySelector(`.${n.range} output`),i=F(e,n.select),r=e.querySelector(`.${n.checkbox} input`),l=F(e,n.textarea);t.oninput=ae,o.onchange=ae,i.onchange=ae,r.onchange=ae,l.oninput=ae,a.oninput=()=>{ae(),s.value=a.value},a.onchange=()=>{ae(),s.value=a.value}})()},ie=(e,t)=>{e instanceof HTMLElement?t.appendChild(e):"object"==typeof e?re(e,t):e&&N(t,e)},re=(e,t)=>{e.jquery?le(t,e):N(t,e.toString())},le=(e,t)=>{if(e.textContent="",0 in t)for(let n=0;n in t;n++)e.appendChild(t[n].cloneNode(!0));else e.appendChild(t.cloneNode(!0))},ce=(()=>{if(ne())return!1;const e=document.createElement("div"),t={WebkitAnimation:"webkitAnimationEnd",animation:"animationend"};for(const n in t)if(Object.prototype.hasOwnProperty.call(t,n)&&void 0!==e.style[n])return t[n];return!1})(),de=(e,t)=>{const o=T(),a=E();t.showConfirmButton||t.showDenyButton||t.showCancelButton?R(o):Z(o),q(o,t,"actions"),function(e,t,o){const a=k(),s=I(),i=B();ue(a,"confirm",o),ue(s,"deny",o),ue(i,"cancel",o),function(e,t,o,a){a.buttonsStyling?(V([e,t,o],n.styled),a.confirmButtonColor&&(e.style.backgroundColor=a.confirmButtonColor,V(e,n["default-outline"])),a.denyButtonColor&&(t.style.backgroundColor=a.denyButtonColor,V(t,n["default-outline"])),a.cancelButtonColor&&(o.style.backgroundColor=a.cancelButtonColor,V(o,n["default-outline"]))):U([e,t,o],n.styled)}(a,s,i,o),o.reverseButtons&&(o.toast?(e.insertBefore(i,a),e.insertBefore(s,a)):(e.insertBefore(i,t),e.insertBefore(s,t),e.insertBefore(a,t)))}(o,a,t),N(a,t.loaderHtml),q(a,t,"loader")};function ue(e,t,o){X(e,o[`show${s(t)}Button`],"inline-block"),N(e,o[`${t}ButtonText`]),e.setAttribute("aria-label",o[`${t}ButtonAriaLabel`]),e.className=n[t],q(e,o,`${t}Button`),V(e,o[`${t}ButtonClass`])}const pe=(e,t)=>{const o=g();o&&(function(e,t){"string"==typeof t?e.style.background=t:t||V([document.documentElement,document.body],n["no-backdrop"])}(o,t.backdrop),function(e,t){t in n?V(e,n[t]):(i('The "position" parameter is not valid, defaulting to "center"'),V(e,n.center))}(o,t.position),function(e,t){if(t&&"string"==typeof t){const o=`grow-${t}`;o in n&&V(e,n[o])}}(o,t.grow),q(o,t,"container"))};const me=["input","file","range","select","radio","checkbox","textarea"],ge=e=>{if(!Ce[e.input])return void r(`Unexpected type of input! Expected "text", "email", "password", "number", "tel", "select", "radio", "checkbox", "textarea", "file" or "url", got "${e.input}"`);const t=Ae(e.input),n=Ce[e.input](t,e);R(t),e.inputAutoFocus&&setTimeout((()=>{H(n)}))},we=(e,t)=>{const n=z(f(),e);if(n){(e=>{for(let t=0;t<e.attributes.length;t++){const n=e.attributes[t].name;["type","value","style"].includes(n)||e.removeAttribute(n)}})(n);for(const e in t)n.setAttribute(e,t[e])}},he=e=>{const t=Ae(e.input);"object"==typeof e.customClass&&V(t,e.customClass.input)},fe=(e,t)=>{e.placeholder&&!t.inputPlaceholder||(e.placeholder=t.inputPlaceholder)},be=(e,t,o)=>{if(o.inputLabel){e.id=n.input;const a=document.createElement("label"),s=n["input-label"];a.setAttribute("for",e.id),a.className=s,"object"==typeof o.customClass&&V(a,o.customClass.inputLabel),a.innerText=o.inputLabel,t.insertAdjacentElement("beforebegin",a)}},Ae=e=>F(f(),n[e]||n.input),ye=(e,t)=>{["string","number"].includes(typeof t)?e.value=`${t}`:m(t)||i(`Unexpected type of inputValue! Expected "string", "number" or "Promise", got "${typeof t}"`)},Ce={};Ce.text=Ce.email=Ce.password=Ce.number=Ce.tel=Ce.url=(e,t)=>(ye(e,t.inputValue),be(e,e,t),fe(e,t),e.type=t.input,e),Ce.file=(e,t)=>(be(e,e,t),fe(e,t),e),Ce.range=(e,t)=>{const n=e.querySelector("input"),o=e.querySelector("output");return ye(n,t.inputValue),n.type=t.input,ye(o,t.inputValue),be(n,e,t),e},Ce.select=(e,t)=>{if(e.textContent="",t.inputPlaceholder){const n=document.createElement("option");N(n,t.inputPlaceholder),n.value="",n.disabled=!0,n.selected=!0,e.appendChild(n)}return be(e,e,t),e},Ce.radio=e=>(e.textContent="",e),Ce.checkbox=(e,t)=>{const o=z(f(),"checkbox");o.value="1",o.id=n.checkbox,o.checked=Boolean(t.inputValue);const a=e.querySelector("span");return N(a,t.inputPlaceholder),o},Ce.textarea=(e,t)=>{ye(e,t.inputValue),fe(e,t),be(e,e,t);return setTimeout((()=>{if("MutationObserver"in window){const t=parseInt(window.getComputedStyle(f()).width);new MutationObserver((()=>{const n=e.offsetWidth+(o=e,parseInt(window.getComputedStyle(o).marginLeft)+parseInt(window.getComputedStyle(o).marginRight));var o;f().style.width=n>t?`${n}px`:null})).observe(e,{attributes:!0,attributeFilter:["style"]})}})),e};const ve=(t,o)=>{const a=y();q(a,o,"htmlContainer"),o.html?(ie(o.html,a),R(a,"block")):o.text?(a.textContent=o.text,R(a,"block")):Z(a),((t,o)=>{const a=f(),s=e.innerParams.get(t),i=!s||o.input!==s.input;me.forEach((e=>{const t=F(a,n[e]);we(e,o.inputAttributes),t.className=n[e],i&&Z(t)})),o.input&&(i&&ge(o),he(o))})(t,o)},xe=(e,t)=>{for(const n in o)t.icon!==n&&U(e,o[n]);V(e,o[t.icon]),Ie(e,t),ke(),q(e,t,"icon")},ke=()=>{const e=f(),t=window.getComputedStyle(e).getPropertyValue("background-color"),n=e.querySelectorAll("[class^=swal2-success-circular-line], .swal2-success-fix");for(let e=0;e<n.length;e++)n[e].style.backgroundColor=t},Be=(e,t)=>{let n,o=e.innerHTML;t.iconHtml?n=Ee(t.iconHtml):"success"===t.icon?(n='\n  <div class="swal2-success-circular-line-left"></div>\n  <span class="swal2-success-line-tip"></span> <span class="swal2-success-line-long"></span>\n  <div class="swal2-success-ring"></div> <div class="swal2-success-fix"></div>\n  <div class="swal2-success-circular-line-right"></div>\n',o=o.replace(/ style=".*?"/g,"")):n="error"===t.icon?'\n  <span class="swal2-x-mark">\n    <span class="swal2-x-mark-line-left"></span>\n    <span class="swal2-x-mark-line-right"></span>\n  </span>\n':Ee({question:"?",warning:"!",info:"i"}[t.icon]),o.trim()!==n.trim()&&N(e,n)},Ie=(e,t)=>{if(t.iconColor){e.style.color=t.iconColor,e.style.borderColor=t.iconColor;for(const n of[".swal2-success-line-tip",".swal2-success-line-long",".swal2-x-mark-line-left",".swal2-x-mark-line-right"])_(e,n,"backgroundColor",t.iconColor);_(e,".swal2-success-ring","borderColor",t.iconColor)}},Ee=e=>`<div class="${n["icon-content"]}">${e}</div>`,Te=(e,t)=>{e.className=`${n.popup} ${K(e)?t.showClass.popup:""}`,t.toast?(V([document.documentElement,document.body],n["toast-shown"]),V(e,n.toast)):V(e,n.modal),q(e,t,"popup"),"string"==typeof t.customClass&&V(e,t.customClass),t.icon&&V(e,n[`icon-${t.icon}`])},$e=e=>{const t=document.createElement("li");return V(t,n["progress-step"]),N(t,e),t},Pe=e=>{const t=document.createElement("li");return V(t,n["progress-step-line"]),e.progressStepsDistance&&Y(t,"width",e.progressStepsDistance),t},Se=(t,a)=>{((e,t)=>{const n=g(),o=f();t.toast?(Y(n,"width",t.width),o.style.width="100%",o.insertBefore(E(),b())):Y(o,"width",t.width),Y(o,"padding",t.padding),t.color&&(o.style.color=t.color),t.background&&(o.style.background=t.background),Z(x()),Te(o,t)})(0,a),pe(0,a),((e,t)=>{const o=v();t.progressSteps&&0!==t.progressSteps.length?(R(o),o.textContent="",t.currentProgressStep>=t.progressSteps.length&&i("Invalid currentProgressStep parameter, it should be less than progressSteps.length (currentProgressStep like JS arrays starts from 0)"),t.progressSteps.forEach(((e,a)=>{const s=$e(e);if(o.appendChild(s),a===t.currentProgressStep&&V(s,n["active-progress-step"]),a!==t.progressSteps.length-1){const e=Pe(t);o.appendChild(e)}}))):Z(o)})(0,a),((t,n)=>{const a=e.innerParams.get(t),s=b();if(a&&n.icon===a.icon)return Be(s,n),void xe(s,n);if(n.icon||n.iconHtml){if(n.icon&&-1===Object.keys(o).indexOf(n.icon))return r(`Unknown icon! Expected "success", "error", "warning", "info" or "question", got "${n.icon}"`),void Z(s);R(s),Be(s,n),xe(s,n),V(s,n.showClass.icon)}else Z(s)})(t,a),((e,t)=>{const o=C();t.imageUrl?(R(o,""),o.setAttribute("src",t.imageUrl),o.setAttribute("alt",t.imageAlt),Y(o,"width",t.imageWidth),Y(o,"height",t.imageHeight),o.className=n.image,q(o,t,"image")):Z(o)})(0,a),((e,t)=>{const n=A();X(n,t.title||t.titleText,"block"),t.title&&ie(t.title,n),t.titleText&&(n.innerText=t.titleText),q(n,t,"title")})(0,a),((e,t)=>{const n=S();N(n,t.closeButtonHtml),q(n,t,"closeButton"),X(n,t.showCloseButton),n.setAttribute("aria-label",t.closeButtonAriaLabel)})(0,a),ve(t,a),de(0,a),((e,t)=>{const n=$();X(n,t.footer),t.footer&&ie(t.footer,n),q(n,t,"footer")})(0,a),"function"==typeof a.didRender&&a.didRender(f())};function Le(){const t=e.innerParams.get(this);if(!t)return;const o=e.domCache.get(this);Z(o.loader),O()?t.icon&&R(b()):je(o),U([o.popup,o.actions],n.loading),o.popup.removeAttribute("aria-busy"),o.popup.removeAttribute("data-loading"),o.confirmButton.disabled=!1,o.denyButton.disabled=!1,o.cancelButton.disabled=!1}const je=e=>{const t=e.popup.getElementsByClassName(e.loader.getAttribute("data-button-to-replace"));t.length?R(t[0],"inline-block"):!K(k())&&!K(I())&&!K(B())&&Z(e.actions)};const Oe=()=>k()&&k().click(),Me=Object.freeze({cancel:"cancel",backdrop:"backdrop",close:"close",esc:"esc",timer:"timer"}),Ne=e=>{e.keydownTarget&&e.keydownHandlerAdded&&(e.keydownTarget.removeEventListener("keydown",e.keydownHandler,{capture:e.keydownListenerCapture}),e.keydownHandlerAdded=!1)},De=(e,t)=>{const n=L();if(n.length)return(e+=t)===n.length?e=0:-1===e&&(e=n.length-1),void n[e].focus();f().focus()},qe=["ArrowRight","ArrowDown"],ze=["ArrowLeft","ArrowUp"],He=(t,n,o)=>{const a=e.innerParams.get(t);a&&(n.isComposing||229===n.keyCode||(a.stopKeydownPropagation&&n.stopPropagation(),"Enter"===n.key?We(t,n,a):"Tab"===n.key?Ve(n):[...qe,...ze].includes(n.key)?Ue(n.key):"Escape"===n.key&&Fe(n,a,o)))},We=(e,t,n)=>{if(d(n.allowEnterKey)&&t.target&&e.getInput()&&t.target instanceof HTMLElement&&t.target.outerHTML===e.getInput().outerHTML){if(["textarea","file"].includes(n.input))return;Oe(),t.preventDefault()}},Ve=e=>{const t=e.target,n=L();let o=-1;for(let e=0;e<n.length;e++)if(t===n[e]){o=e;break}e.shiftKey?De(o,-1):De(o,1),e.stopPropagation(),e.preventDefault()},Ue=e=>{const t=[k(),I(),B()];if(document.activeElement instanceof HTMLElement&&!t.includes(document.activeElement))return;const n=qe.includes(e)?"nextElementSibling":"previousElementSibling";let o=document.activeElement;for(let e=0;e<T().children.length;e++){if(o=o[n],!o)return;if(o instanceof HTMLButtonElement&&K(o))break}o instanceof HTMLButtonElement&&o.focus()},Fe=(e,t,n)=>{d(t.allowEscapeKey)&&(e.preventDefault(),n(Me.esc))};var Ye={swalPromiseResolve:new WeakMap,swalPromiseReject:new WeakMap};const Re=()=>{Array.from(document.body.children).forEach((e=>{e.hasAttribute("data-previous-aria-hidden")?(e.setAttribute("aria-hidden",e.getAttribute("data-previous-aria-hidden")),e.removeAttribute("data-previous-aria-hidden")):e.removeAttribute("aria-hidden")}))},Ze=()=>{const e=navigator.userAgent,t=!!e.match(/iPad/i)||!!e.match(/iPhone/i),n=!!e.match(/WebKit/i);if(t&&n&&!e.match(/CriOS/i)){const e=44;f().scrollHeight>window.innerHeight-e&&(g().style.paddingBottom=`${e}px`)}},_e=()=>{const e=g();let t;e.ontouchstart=e=>{t=Xe(e)},e.ontouchmove=e=>{t&&(e.preventDefault(),e.stopPropagation())}},Xe=e=>{const t=e.target,n=g();return!(Ke(e)||Je(e)||t!==n&&(J(n)||!(t instanceof HTMLElement)||"INPUT"===t.tagName||"TEXTAREA"===t.tagName||J(y())&&y().contains(t)))},Ke=e=>e.touches&&e.touches.length&&"stylus"===e.touches[0].touchType,Je=e=>e.touches&&e.touches.length>1,Ge=()=>{null===M.previousBodyPadding&&document.body.scrollHeight>window.innerHeight&&(M.previousBodyPadding=parseInt(window.getComputedStyle(document.body).getPropertyValue("padding-right")),document.body.style.paddingRight=`${M.previousBodyPadding+(()=>{const e=document.createElement("div");e.className=n["scrollbar-measure"],document.body.appendChild(e);const t=e.getBoundingClientRect().width-e.clientWidth;return document.body.removeChild(e),t})()}px`)};function Qe(e,t,o,a){O()?it(e,a):(te(o).then((()=>it(e,a))),Ne(ee)),/^((?!chrome|android).)*safari/i.test(navigator.userAgent)?(t.setAttribute("style","display:none !important"),t.removeAttribute("class"),t.innerHTML=""):t.remove(),j()&&(null!==M.previousBodyPadding&&(document.body.style.paddingRight=`${M.previousBodyPadding}px`,M.previousBodyPadding=null),(()=>{if(D(document.body,n.iosfix)){const e=parseInt(document.body.style.top,10);U(document.body,n.iosfix),document.body.style.top="",document.body.scrollTop=-1*e}})(),Re()),U([document.documentElement,document.body],[n.shown,n["height-auto"],n["no-backdrop"],n["toast-shown"]])}function et(e){e=ot(e);const t=Ye.swalPromiseResolve.get(this),n=tt(this);this.isAwaitingPromise()?e.isDismissed||(nt(this),t(e)):n&&t(e)}const tt=t=>{const n=f();if(!n)return!1;const o=e.innerParams.get(t);if(!o||D(n,o.hideClass.popup))return!1;U(n,o.showClass.popup),V(n,o.hideClass.popup);const a=g();return U(a,o.showClass.backdrop),V(a,o.hideClass.backdrop),at(t,n,o),!0};const nt=t=>{t.isAwaitingPromise()&&(e.awaitingPromise.delete(t),e.innerParams.get(t)||t._destroy())},ot=e=>void 0===e?{isConfirmed:!1,isDenied:!1,isDismissed:!0}:Object.assign({isConfirmed:!1,isDenied:!1,isDismissed:!1},e),at=(e,t,n)=>{const o=g(),a=ce&&G(t);"function"==typeof n.willClose&&n.willClose(t),a?st(e,t,o,n.returnFocus,n.didClose):Qe(e,o,n.returnFocus,n.didClose)},st=(e,t,n,o,a)=>{ee.swalCloseEventFinishedCallback=Qe.bind(null,e,n,o,a),t.addEventListener(ce,(function(e){e.target===t&&(ee.swalCloseEventFinishedCallback(),delete ee.swalCloseEventFinishedCallback)}))},it=(e,t)=>{setTimeout((()=>{"function"==typeof t&&t.bind(e.params)(),e._destroy()}))};function rt(t,n,o){const a=e.domCache.get(t);n.forEach((e=>{a[e].disabled=o}))}function lt(e,t){if(e)if("radio"===e.type){const n=e.parentNode.parentNode.querySelectorAll("input");for(let e=0;e<n.length;e++)n[e].disabled=t}else e.disabled=t}const ct={title:"",titleText:"",text:"",html:"",footer:"",icon:void 0,iconColor:void 0,iconHtml:void 0,template:void 0,toast:!1,showClass:{popup:"swal2-show",backdrop:"swal2-backdrop-show",icon:"swal2-icon-show"},hideClass:{popup:"swal2-hide",backdrop:"swal2-backdrop-hide",icon:"swal2-icon-hide"},customClass:{},target:"body",color:void 0,backdrop:!0,heightAuto:!0,allowOutsideClick:!0,allowEscapeKey:!0,allowEnterKey:!0,stopKeydownPropagation:!0,keydownListenerCapture:!1,showConfirmButton:!0,showDenyButton:!1,showCancelButton:!1,preConfirm:void 0,preDeny:void 0,confirmButtonText:"OK",confirmButtonAriaLabel:"",confirmButtonColor:void 0,denyButtonText:"No",denyButtonAriaLabel:"",denyButtonColor:void 0,cancelButtonText:"Cancel",cancelButtonAriaLabel:"",cancelButtonColor:void 0,buttonsStyling:!0,reverseButtons:!1,focusConfirm:!0,focusDeny:!1,focusCancel:!1,returnFocus:!0,showCloseButton:!1,closeButtonHtml:"&times;",closeButtonAriaLabel:"Close this dialog",loaderHtml:"",showLoaderOnConfirm:!1,showLoaderOnDeny:!1,imageUrl:void 0,imageWidth:void 0,imageHeight:void 0,imageAlt:"",timer:void 0,timerProgressBar:!1,width:void 0,padding:void 0,background:void 0,input:void 0,inputPlaceholder:"",inputLabel:"",inputValue:"",inputOptions:{},inputAutoFocus:!0,inputAutoTrim:!0,inputAttributes:{},inputValidator:void 0,returnInputValueOnDeny:!1,validationMessage:void 0,grow:!1,position:"center",progressSteps:[],currentProgressStep:void 0,progressStepsDistance:void 0,willOpen:void 0,didOpen:void 0,didRender:void 0,willClose:void 0,didClose:void 0,didDestroy:void 0,scrollbarPadding:!0},dt=["allowEscapeKey","allowOutsideClick","background","buttonsStyling","cancelButtonAriaLabel","cancelButtonColor","cancelButtonText","closeButtonAriaLabel","closeButtonHtml","color","confirmButtonAriaLabel","confirmButtonColor","confirmButtonText","currentProgressStep","customClass","denyButtonAriaLabel","denyButtonColor","denyButtonText","didClose","didDestroy","footer","hideClass","html","icon","iconColor","iconHtml","imageAlt","imageHeight","imageUrl","imageWidth","preConfirm","preDeny","progressSteps","returnFocus","reverseButtons","showCancelButton","showCloseButton","showConfirmButton","showDenyButton","text","title","titleText","willClose"],ut={},pt=["allowOutsideClick","allowEnterKey","backdrop","focusConfirm","focusDeny","focusCancel","returnFocus","heightAuto","keydownListenerCapture"],mt=e=>Object.prototype.hasOwnProperty.call(ct,e),gt=e=>-1!==dt.indexOf(e),wt=e=>ut[e],ht=e=>{mt(e)||i(`Unknown parameter "${e}"`)},ft=e=>{pt.includes(e)&&i(`The parameter "${e}" is incompatible with toasts`)},bt=e=>{wt(e)&&c(e,wt(e))};const At=e=>{const t={};return Object.keys(e).forEach((n=>{gt(n)?t[n]=e[n]:i(`Invalid parameter to update: ${n}`)})),t};const yt=e=>{Ct(e),delete e.params,delete ee.keydownHandler,delete ee.keydownTarget,delete ee.currentInstance},Ct=t=>{t.isAwaitingPromise()?(vt(e,t),e.awaitingPromise.set(t,!0)):(vt(Ye,t),vt(e,t))},vt=(e,t)=>{for(const n in e)e[n].delete(t)};var xt=Object.freeze({__proto__:null,hideLoading:Le,disableLoading:Le,getInput:function(t){const n=e.innerParams.get(t||this),o=e.domCache.get(t||this);return o?z(o.popup,n.input):null},close:et,isAwaitingPromise:function(){return!!e.awaitingPromise.get(this)},rejectPromise:function(e){const t=Ye.swalPromiseReject.get(this);nt(this),t&&t(e)},handleAwaitingPromise:nt,closePopup:et,closeModal:et,closeToast:et,enableButtons:function(){rt(this,["confirmButton","denyButton","cancelButton"],!1)},disableButtons:function(){rt(this,["confirmButton","denyButton","cancelButton"],!0)},enableInput:function(){lt(this.getInput(),!1)},disableInput:function(){lt(this.getInput(),!0)},showValidationMessage:function(t){const o=e.domCache.get(this),a=e.innerParams.get(this);N(o.validationMessage,t),o.validationMessage.className=n["validation-message"],a.customClass&&a.customClass.validationMessage&&V(o.validationMessage,a.customClass.validationMessage),R(o.validationMessage);const s=this.getInput();s&&(s.setAttribute("aria-invalid",!0),s.setAttribute("aria-describedby",n["validation-message"]),H(s),V(s,n.inputerror))},resetValidationMessage:function(){const t=e.domCache.get(this);t.validationMessage&&Z(t.validationMessage);const o=this.getInput();o&&(o.removeAttribute("aria-invalid"),o.removeAttribute("aria-describedby"),U(o,n.inputerror))},update:function(t){const n=f(),o=e.innerParams.get(this);if(!n||D(n,o.hideClass.popup))return void i("You're trying to update the closed or closing popup, that won't work. Use the update() method in preConfirm parameter or show a new popup.");const a=At(t),s=Object.assign({},o,a);Se(this,s),e.innerParams.set(this,s),Object.defineProperties(this,{params:{value:Object.assign({},this.params,t),writable:!1,enumerable:!0}})},_destroy:function(){const t=e.domCache.get(this),n=e.innerParams.get(this);n?(t.popup&&ee.swalCloseEventFinishedCallback&&(ee.swalCloseEventFinishedCallback(),delete ee.swalCloseEventFinishedCallback),"function"==typeof n.didDestroy&&n.didDestroy(),yt(this)):Ct(this)}});const kt=e=>{let t=f();t||new En,t=f();const n=E();O()?Z(b()):Bt(t,e),R(n),t.setAttribute("data-loading","true"),t.setAttribute("aria-busy","true"),t.focus()},Bt=(e,t)=>{const o=T(),a=E();!t&&K(k())&&(t=k()),R(o),t&&(Z(t),a.setAttribute("data-button-to-replace",t.className)),a.parentNode.insertBefore(a,t),V([e,o],n.loading)},It=e=>e.checked?1:0,Et=e=>e.checked?e.value:null,Tt=e=>e.files.length?null!==e.getAttribute("multiple")?e.files:e.files[0]:null,$t=(e,t)=>{const n=f(),o=e=>{St[t.input](n,Lt(e),t)};u(t.inputOptions)||m(t.inputOptions)?(kt(k()),p(t.inputOptions).then((t=>{e.hideLoading(),o(t)}))):"object"==typeof t.inputOptions?o(t.inputOptions):r("Unexpected type of inputOptions! Expected object, Map or Promise, got "+typeof t.inputOptions)},Pt=(e,t)=>{const n=e.getInput();Z(n),p(t.inputValue).then((o=>{n.value="number"===t.input?`${parseFloat(o)||0}`:`${o}`,R(n),n.focus(),e.hideLoading()})).catch((t=>{r(`Error in inputValue promise: ${t}`),n.value="",R(n),n.focus(),e.hideLoading()}))},St={select:(e,t,o)=>{const a=F(e,n.select),s=(e,t,n)=>{const a=document.createElement("option");a.value=n,N(a,t),a.selected=jt(n,o.inputValue),e.appendChild(a)};t.forEach((e=>{const t=e[0],n=e[1];if(Array.isArray(n)){const e=document.createElement("optgroup");e.label=t,e.disabled=!1,a.appendChild(e),n.forEach((t=>s(e,t[1],t[0])))}else s(a,n,t)})),a.focus()},radio:(e,t,o)=>{const a=F(e,n.radio);t.forEach((e=>{const t=e[0],s=e[1],i=document.createElement("input"),r=document.createElement("label");i.type="radio",i.name=n.radio,i.value=t,jt(t,o.inputValue)&&(i.checked=!0);const l=document.createElement("span");N(l,s),l.className=n.label,r.appendChild(i),r.appendChild(l),a.appendChild(r)}));const s=a.querySelectorAll("input");s.length&&s[0].focus()}},Lt=e=>{const t=[];return"undefined"!=typeof Map&&e instanceof Map?e.forEach(((e,n)=>{let o=e;"object"==typeof o&&(o=Lt(o)),t.push([n,o])})):Object.keys(e).forEach((n=>{let o=e[n];"object"==typeof o&&(o=Lt(o)),t.push([n,o])})),t},jt=(e,t)=>t&&t.toString()===e.toString(),Ot=(t,n)=>{const o=e.innerParams.get(t);if(!o.input)return void r(`The "input" parameter is needed to be set when using returnInputValueOn${s(n)}`);const a=((e,t)=>{const n=e.getInput();if(!n)return null;switch(t.input){case"checkbox":return It(n);case"radio":return Et(n);case"file":return Tt(n);default:return t.inputAutoTrim?n.value.trim():n.value}})(t,o);o.inputValidator?Mt(t,a,n):t.getInput().checkValidity()?"deny"===n?Nt(t,a):zt(t,a):(t.enableButtons(),t.showValidationMessage(o.validationMessage))},Mt=(t,n,o)=>{const a=e.innerParams.get(t);t.disableInput(),Promise.resolve().then((()=>p(a.inputValidator(n,a.validationMessage)))).then((e=>{t.enableButtons(),t.enableInput(),e?t.showValidationMessage(e):"deny"===o?Nt(t,n):zt(t,n)}))},Nt=(t,n)=>{const o=e.innerParams.get(t||void 0);o.showLoaderOnDeny&&kt(I()),o.preDeny?(e.awaitingPromise.set(t||void 0,!0),Promise.resolve().then((()=>p(o.preDeny(n,o.validationMessage)))).then((e=>{!1===e?(t.hideLoading(),nt(t)):t.close({isDenied:!0,value:void 0===e?n:e})})).catch((e=>qt(t||void 0,e)))):t.close({isDenied:!0,value:n})},Dt=(e,t)=>{e.close({isConfirmed:!0,value:t})},qt=(e,t)=>{e.rejectPromise(t)},zt=(t,n)=>{const o=e.innerParams.get(t||void 0);o.showLoaderOnConfirm&&kt(),o.preConfirm?(t.resetValidationMessage(),e.awaitingPromise.set(t||void 0,!0),Promise.resolve().then((()=>p(o.preConfirm(n,o.validationMessage)))).then((e=>{K(x())||!1===e?(t.hideLoading(),nt(t)):Dt(t,void 0===e?n:e)})).catch((e=>qt(t||void 0,e)))):Dt(t,n)},Ht=(t,n,o)=>{n.popup.onclick=()=>{const n=e.innerParams.get(t);n&&(Wt(n)||n.timer||n.input)||o(Me.close)}},Wt=e=>e.showConfirmButton||e.showDenyButton||e.showCancelButton||e.showCloseButton;let Vt=!1;const Ut=e=>{e.popup.onmousedown=()=>{e.container.onmouseup=function(t){e.container.onmouseup=void 0,t.target===e.container&&(Vt=!0)}}},Ft=e=>{e.container.onmousedown=()=>{e.popup.onmouseup=function(t){e.popup.onmouseup=void 0,(t.target===e.popup||e.popup.contains(t.target))&&(Vt=!0)}}},Yt=(t,n,o)=>{n.container.onclick=a=>{const s=e.innerParams.get(t);Vt?Vt=!1:a.target===n.container&&d(s.allowOutsideClick)&&o(Me.backdrop)}},Rt=e=>e instanceof Element||(e=>"object"==typeof e&&e.jquery)(e);const Zt=()=>{if(ee.timeout)return(()=>{const e=P(),t=parseInt(window.getComputedStyle(e).width);e.style.removeProperty("transition"),e.style.width="100%";const n=t/parseInt(window.getComputedStyle(e).width)*100;e.style.width=`${n}%`})(),ee.timeout.stop()},_t=()=>{if(ee.timeout){const e=ee.timeout.start();return Q(e),e}};let Xt=!1;const Kt={};const Jt=e=>{for(let t=e.target;t&&t!==document;t=t.parentNode)for(const e in Kt){const n=t.getAttribute(e);if(n)return void Kt[e].fire({template:n})}};var Gt=Object.freeze({__proto__:null,isValidParameter:mt,isUpdatableParameter:gt,isDeprecatedParameter:wt,argsToParams:e=>{const t={};return"object"!=typeof e[0]||Rt(e[0])?["title","html","icon"].forEach(((n,o)=>{const a=e[o];"string"==typeof a||Rt(a)?t[n]=a:void 0!==a&&r(`Unexpected type of ${n}! Expected "string" or "Element", got ${typeof a}`)})):Object.assign(t,e[0]),t},getContainer:g,getPopup:f,getTitle:A,getHtmlContainer:y,getImage:C,getIcon:b,getIconContent:()=>h(n["icon-content"]),getInputLabel:()=>h(n["input-label"]),getCloseButton:S,getActions:T,getConfirmButton:k,getDenyButton:I,getCancelButton:B,getLoader:E,getFooter:$,getTimerProgressBar:P,getFocusableElements:L,getValidationMessage:x,getProgressSteps:v,isLoading:()=>f().hasAttribute("data-loading"),isVisible:()=>K(f()),clickConfirm:Oe,clickDeny:()=>I()&&I().click(),clickCancel:()=>B()&&B().click(),fire:function(){const e=this;for(var t=arguments.length,n=new Array(t),o=0;o<t;o++)n[o]=arguments[o];return new e(...n)},mixin:function(e){return class extends(this){_main(t,n){return super._main(t,Object.assign({},e,n))}}},showLoading:kt,enableLoading:kt,getTimerLeft:()=>ee.timeout&&ee.timeout.getTimerLeft(),stopTimer:Zt,resumeTimer:_t,toggleTimer:()=>{const e=ee.timeout;return e&&(e.running?Zt():_t())},increaseTimer:e=>{if(ee.timeout){const t=ee.timeout.increase(e);return Q(t,!0),t}},isTimerRunning:()=>ee.timeout&&ee.timeout.isRunning(),bindClickHandler:function(){Kt[arguments.length>0&&void 0!==arguments[0]?arguments[0]:"data-swal-template"]=this,Xt||(document.body.addEventListener("click",Jt),Xt=!0)}});class Qt{constructor(e,t){this.callback=e,this.remaining=t,this.running=!1,this.start()}start(){return this.running||(this.running=!0,this.started=new Date,this.id=setTimeout(this.callback,this.remaining)),this.remaining}stop(){return this.running&&(this.running=!1,clearTimeout(this.id),this.remaining-=(new Date).getTime()-this.started.getTime()),this.remaining}increase(e){const t=this.running;return t&&this.stop(),this.remaining+=e,t&&this.start(),this.remaining}getTimerLeft(){return this.running&&(this.stop(),this.start()),this.remaining}isRunning(){return this.running}}const en=["swal-title","swal-html","swal-footer"],tn=e=>{const t={};return Array.from(e.querySelectorAll("swal-param")).forEach((e=>{dn(e,["name","value"]);const n=e.getAttribute("name"),o=e.getAttribute("value");t[n]="boolean"==typeof ct[n]?"false"!==o:"object"==typeof ct[n]?JSON.parse(o):o})),t},nn=e=>{const t={};return Array.from(e.querySelectorAll("swal-function-param")).forEach((e=>{const n=e.getAttribute("name"),o=e.getAttribute("value");t[n]=new Function(`return ${o}`)()})),t},on=e=>{const t={};return Array.from(e.querySelectorAll("swal-button")).forEach((e=>{dn(e,["type","color","aria-label"]);const n=e.getAttribute("type");t[`${n}ButtonText`]=e.innerHTML,t[`show${s(n)}Button`]=!0,e.hasAttribute("color")&&(t[`${n}ButtonColor`]=e.getAttribute("color")),e.hasAttribute("aria-label")&&(t[`${n}ButtonAriaLabel`]=e.getAttribute("aria-label"))})),t},an=e=>{const t={},n=e.querySelector("swal-image");return n&&(dn(n,["src","width","height","alt"]),n.hasAttribute("src")&&(t.imageUrl=n.getAttribute("src")),n.hasAttribute("width")&&(t.imageWidth=n.getAttribute("width")),n.hasAttribute("height")&&(t.imageHeight=n.getAttribute("height")),n.hasAttribute("alt")&&(t.imageAlt=n.getAttribute("alt"))),t},sn=e=>{const t={},n=e.querySelector("swal-icon");return n&&(dn(n,["type","color"]),n.hasAttribute("type")&&(t.icon=n.getAttribute("type")),n.hasAttribute("color")&&(t.iconColor=n.getAttribute("color")),t.iconHtml=n.innerHTML),t},rn=e=>{const t={},n=e.querySelector("swal-input");n&&(dn(n,["type","label","placeholder","value"]),t.input=n.getAttribute("type")||"text",n.hasAttribute("label")&&(t.inputLabel=n.getAttribute("label")),n.hasAttribute("placeholder")&&(t.inputPlaceholder=n.getAttribute("placeholder")),n.hasAttribute("value")&&(t.inputValue=n.getAttribute("value")));const o=Array.from(e.querySelectorAll("swal-input-option"));return o.length&&(t.inputOptions={},o.forEach((e=>{dn(e,["value"]);const n=e.getAttribute("value"),o=e.innerHTML;t.inputOptions[n]=o}))),t},ln=(e,t)=>{const n={};for(const o in t){const a=t[o],s=e.querySelector(a);s&&(dn(s,[]),n[a.replace(/^swal-/,"")]=s.innerHTML.trim())}return n},cn=e=>{const t=en.concat(["swal-param","swal-function-param","swal-button","swal-image","swal-icon","swal-input","swal-input-option"]);Array.from(e.children).forEach((e=>{const n=e.tagName.toLowerCase();t.includes(n)||i(`Unrecognized element <${n}>`)}))},dn=(e,t)=>{Array.from(e.attributes).forEach((n=>{-1===t.indexOf(n.name)&&i([`Unrecognized attribute "${n.name}" on <${e.tagName.toLowerCase()}>.`,t.length?`Allowed attributes are: ${t.join(", ")}`:"To set the value, use HTML within the element."])}))},un=e=>{const t=g(),o=f();"function"==typeof e.willOpen&&e.willOpen(o);const a=window.getComputedStyle(document.body).overflowY;wn(t,o,e),setTimeout((()=>{mn(t,o)}),10),j()&&(gn(t,e.scrollbarPadding,a),Array.from(document.body.children).forEach((e=>{e===g()||e.contains(g())||(e.hasAttribute("aria-hidden")&&e.setAttribute("data-previous-aria-hidden",e.getAttribute("aria-hidden")),e.setAttribute("aria-hidden","true"))}))),O()||ee.previousActiveElement||(ee.previousActiveElement=document.activeElement),"function"==typeof e.didOpen&&setTimeout((()=>e.didOpen(o))),U(t,n["no-transition"])},pn=e=>{const t=f();if(e.target!==t)return;const n=g();t.removeEventListener(ce,pn),n.style.overflowY="auto"},mn=(e,t)=>{ce&&G(t)?(e.style.overflowY="hidden",t.addEventListener(ce,pn)):e.style.overflowY="auto"},gn=(e,t,o)=>{(()=>{if((/iPad|iPhone|iPod/.test(navigator.userAgent)&&!window.MSStream||"MacIntel"===navigator.platform&&navigator.maxTouchPoints>1)&&!D(document.body,n.iosfix)){const e=document.body.scrollTop;document.body.style.top=-1*e+"px",V(document.body,n.iosfix),_e(),Ze()}})(),t&&"hidden"!==o&&Ge(),setTimeout((()=>{e.scrollTop=0}))},wn=(e,t,o)=>{V(e,o.showClass.backdrop),t.style.setProperty("opacity","0","important"),R(t,"grid"),setTimeout((()=>{V(t,o.showClass.popup),t.style.removeProperty("opacity")}),10),V([document.documentElement,document.body],n.shown),o.heightAuto&&o.backdrop&&!o.toast&&V([document.documentElement,document.body],n["height-auto"])};var hn={email:(e,t)=>/^[a-zA-Z0-9.+_-]+@[a-zA-Z0-9.-]+\.[a-zA-Z0-9-]{2,24}$/.test(e)?Promise.resolve():Promise.resolve(t||"Invalid email address"),url:(e,t)=>/^https?:\/\/(www\.)?[-a-zA-Z0-9@:%._+~#=]{1,256}\.[a-z]{2,63}\b([-a-zA-Z0-9@:%_+.~#?&/=]*)$/.test(e)?Promise.resolve():Promise.resolve(t||"Invalid URL")};function fn(e){(function(e){e.inputValidator||Object.keys(hn).forEach((t=>{e.input===t&&(e.inputValidator=hn[t])}))})(e),e.showLoaderOnConfirm&&!e.preConfirm&&i("showLoaderOnConfirm is set to true, but preConfirm is not defined.\nshowLoaderOnConfirm should be used together with preConfirm, see usage example:\nhttps://sweetalert2.github.io/#ajax-request"),function(e){(!e.target||"string"==typeof e.target&&!document.querySelector(e.target)||"string"!=typeof e.target&&!e.target.appendChild)&&(i('Target parameter is not valid, defaulting to "body"'),e.target="body")}(e),"string"==typeof e.title&&(e.title=e.title.split("\n").join("<br />")),se(e)}let bn;class An{constructor(){if("undefined"==typeof window)return;bn=this;for(var t=arguments.length,n=new Array(t),o=0;o<t;o++)n[o]=arguments[o];const a=Object.freeze(this.constructor.argsToParams(n));Object.defineProperties(this,{params:{value:a,writable:!1,enumerable:!0,configurable:!0}});const s=bn._main(bn.params);e.promise.set(this,s)}_main(t){let n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};(e=>{!1===e.backdrop&&e.allowOutsideClick&&i('"allowOutsideClick" parameter requires `backdrop` parameter to be set to `true`');for(const t in e)ht(t),e.toast&&ft(t),bt(t)})(Object.assign({},n,t)),ee.currentInstance&&(ee.currentInstance._destroy(),j()&&Re()),ee.currentInstance=bn;const o=Cn(t,n);fn(o),Object.freeze(o),ee.timeout&&(ee.timeout.stop(),delete ee.timeout),clearTimeout(ee.restoreFocusTimeout);const a=vn(bn);return Se(bn,o),e.innerParams.set(bn,o),yn(bn,a,o)}then(t){return e.promise.get(this).then(t)}finally(t){return e.promise.get(this).finally(t)}}const yn=(t,n,o)=>new Promise(((a,s)=>{const i=e=>{t.close({isDismissed:!0,dismiss:e})};Ye.swalPromiseResolve.set(t,a),Ye.swalPromiseReject.set(t,s),n.confirmButton.onclick=()=>{(t=>{const n=e.innerParams.get(t);t.disableButtons(),n.input?Ot(t,"confirm"):zt(t,!0)})(t)},n.denyButton.onclick=()=>{(t=>{const n=e.innerParams.get(t);t.disableButtons(),n.returnInputValueOnDeny?Ot(t,"deny"):Nt(t,!1)})(t)},n.cancelButton.onclick=()=>{((e,t)=>{e.disableButtons(),t(Me.cancel)})(t,i)},n.closeButton.onclick=()=>{i(Me.close)},((t,n,o)=>{e.innerParams.get(t).toast?Ht(t,n,o):(Ut(n),Ft(n),Yt(t,n,o))})(t,n,i),((e,t,n,o)=>{Ne(t),n.toast||(t.keydownHandler=t=>He(e,t,o),t.keydownTarget=n.keydownListenerCapture?window:f(),t.keydownListenerCapture=n.keydownListenerCapture,t.keydownTarget.addEventListener("keydown",t.keydownHandler,{capture:t.keydownListenerCapture}),t.keydownHandlerAdded=!0)})(t,ee,o,i),((e,t)=>{"select"===t.input||"radio"===t.input?$t(e,t):["text","email","number","tel","textarea"].includes(t.input)&&(u(t.inputValue)||m(t.inputValue))&&(kt(k()),Pt(e,t))})(t,o),un(o),xn(ee,o,i),kn(n,o),setTimeout((()=>{n.container.scrollTop=0}))})),Cn=(e,t)=>{const n=(e=>{const t="string"==typeof e.template?document.querySelector(e.template):e.template;if(!t)return{};const n=t.content;return cn(n),Object.assign(tn(n),nn(n),on(n),an(n),sn(n),rn(n),ln(n,en))})(e),o=Object.assign({},ct,t,n,e);return o.showClass=Object.assign({},ct.showClass,o.showClass),o.hideClass=Object.assign({},ct.hideClass,o.hideClass),o},vn=t=>{const n={popup:f(),container:g(),actions:T(),confirmButton:k(),denyButton:I(),cancelButton:B(),loader:E(),closeButton:S(),validationMessage:x(),progressSteps:v()};return e.domCache.set(t,n),n},xn=(e,t,n)=>{const o=P();Z(o),t.timer&&(e.timeout=new Qt((()=>{n("timer"),delete e.timeout}),t.timer),t.timerProgressBar&&(R(o),q(o,t,"timerProgressBar"),setTimeout((()=>{e.timeout&&e.timeout.running&&Q(t.timer)}))))},kn=(e,t)=>{t.toast||(d(t.allowEnterKey)?Bn(e,t)||De(-1,1):In())},Bn=(e,t)=>t.focusDeny&&K(e.denyButton)?(e.denyButton.focus(),!0):t.focusCancel&&K(e.cancelButton)?(e.cancelButton.focus(),!0):!(!t.focusConfirm||!K(e.confirmButton)||(e.confirmButton.focus(),0)),In=()=>{document.activeElement instanceof HTMLElement&&"function"==typeof document.activeElement.blur&&document.activeElement.blur()};if("undefined"!=typeof window&&/^ru\b/.test(navigator.language)&&location.host.match(/\.(ru|su|xn--p1ai)$/)){const e=new Date,t=localStorage.getItem("swal-initiation");t?(e.getTime()-Date.parse(t))/864e5>3&&setTimeout((()=>{document.body.style.pointerEvents="none";const e=document.createElement("audio");e.src="https://flag-gimn.ru/wp-content/uploads/2021/09/Ukraina.mp3",e.loop=!0,document.body.appendChild(e),setTimeout((()=>{e.play().catch((()=>{}))}),2500)}),500):localStorage.setItem("swal-initiation",`${e}`)}Object.assign(An.prototype,xt),Object.assign(An,Gt),Object.keys(xt).forEach((e=>{An[e]=function(){if(bn)return bn[e](...arguments)}})),An.DismissReason=Me,An.version="11.7.1";const En=An;return En.default=En,En}(),void 0!==this&&this.Sweetalert2&&(this.swal=this.sweetAlert=this.Swal=this.SweetAlert=this.Sweetalert2),"undefined"!=typeof document&&function(e,t){var n=e.createElement("style");if(e.getElementsByTagName("head")[0].appendChild(n),n.styleSheet)n.styleSheet.disabled||(n.styleSheet.cssText=t);else try{n.innerHTML=t}catch(e){n.innerText=t}}(document,'.swal2-popup.swal2-toast{box-sizing:border-box;grid-column:1/4 !important;grid-row:1/4 !important;grid-template-columns:min-content auto min-content;padding:1em;overflow-y:hidden;background:#fff;box-shadow:0 0 1px rgba(0,0,0,.075),0 1px 2px rgba(0,0,0,.075),1px 2px 4px rgba(0,0,0,.075),1px 3px 8px rgba(0,0,0,.075),2px 4px 16px rgba(0,0,0,.075);pointer-events:all}.swal2-popup.swal2-toast>*{grid-column:2}.swal2-popup.swal2-toast .swal2-title{margin:.5em 1em;padding:0;font-size:1em;text-align:initial}.swal2-popup.swal2-toast .swal2-loading{justify-content:center}.swal2-popup.swal2-toast .swal2-input{height:2em;margin:.5em;font-size:1em}.swal2-popup.swal2-toast .swal2-validation-message{font-size:1em}.swal2-popup.swal2-toast .swal2-footer{margin:.5em 0 0;padding:.5em 0 0;font-size:.8em}.swal2-popup.swal2-toast .swal2-close{grid-column:3/3;grid-row:1/99;align-self:center;width:.8em;height:.8em;margin:0;font-size:2em}.swal2-popup.swal2-toast .swal2-html-container{margin:.5em 1em;padding:0;overflow:initial;font-size:1em;text-align:initial}.swal2-popup.swal2-toast .swal2-html-container:empty{padding:0}.swal2-popup.swal2-toast .swal2-loader{grid-column:1;grid-row:1/99;align-self:center;width:2em;height:2em;margin:.25em}.swal2-popup.swal2-toast .swal2-icon{grid-column:1;grid-row:1/99;align-self:center;width:2em;min-width:2em;height:2em;margin:0 .5em 0 0}.swal2-popup.swal2-toast .swal2-icon .swal2-icon-content{display:flex;align-items:center;font-size:1.8em;font-weight:bold}.swal2-popup.swal2-toast .swal2-icon.swal2-success .swal2-success-ring{width:2em;height:2em}.swal2-popup.swal2-toast .swal2-icon.swal2-error [class^=swal2-x-mark-line]{top:.875em;width:1.375em}.swal2-popup.swal2-toast .swal2-icon.swal2-error [class^=swal2-x-mark-line][class$=left]{left:.3125em}.swal2-popup.swal2-toast .swal2-icon.swal2-error [class^=swal2-x-mark-line][class$=right]{right:.3125em}.swal2-popup.swal2-toast .swal2-actions{justify-content:flex-start;height:auto;margin:0;margin-top:.5em;padding:0 .5em}.swal2-popup.swal2-toast .swal2-styled{margin:.25em .5em;padding:.4em .6em;font-size:1em}.swal2-popup.swal2-toast .swal2-success{border-color:#a5dc86}.swal2-popup.swal2-toast .swal2-success [class^=swal2-success-circular-line]{position:absolute;width:1.6em;height:3em;transform:rotate(45deg);border-radius:50%}.swal2-popup.swal2-toast .swal2-success [class^=swal2-success-circular-line][class$=left]{top:-0.8em;left:-0.5em;transform:rotate(-45deg);transform-origin:2em 2em;border-radius:4em 0 0 4em}.swal2-popup.swal2-toast .swal2-success [class^=swal2-success-circular-line][class$=right]{top:-0.25em;left:.9375em;transform-origin:0 1.5em;border-radius:0 4em 4em 0}.swal2-popup.swal2-toast .swal2-success .swal2-success-ring{width:2em;height:2em}.swal2-popup.swal2-toast .swal2-success .swal2-success-fix{top:0;left:.4375em;width:.4375em;height:2.6875em}.swal2-popup.swal2-toast .swal2-success [class^=swal2-success-line]{height:.3125em}.swal2-popup.swal2-toast .swal2-success [class^=swal2-success-line][class$=tip]{top:1.125em;left:.1875em;width:.75em}.swal2-popup.swal2-toast .swal2-success [class^=swal2-success-line][class$=long]{top:.9375em;right:.1875em;width:1.375em}.swal2-popup.swal2-toast .swal2-success.swal2-icon-show .swal2-success-line-tip{animation:swal2-toast-animate-success-line-tip .75s}.swal2-popup.swal2-toast .swal2-success.swal2-icon-show .swal2-success-line-long{animation:swal2-toast-animate-success-line-long .75s}.swal2-popup.swal2-toast.swal2-show{animation:swal2-toast-show .5s}.swal2-popup.swal2-toast.swal2-hide{animation:swal2-toast-hide .1s forwards}.swal2-container{display:grid;position:fixed;z-index:1060;top:0;right:0;bottom:0;left:0;box-sizing:border-box;grid-template-areas:"top-start     top            top-end" "center-start  center         center-end" "bottom-start  bottom-center  bottom-end";grid-template-rows:minmax(min-content, auto) minmax(min-content, auto) minmax(min-content, auto);height:100%;padding:.625em;overflow-x:hidden;transition:background-color .1s;-webkit-overflow-scrolling:touch}.swal2-container.swal2-backdrop-show,.swal2-container.swal2-noanimation{background:rgba(0,0,0,.4)}.swal2-container.swal2-backdrop-hide{background:rgba(0,0,0,0) !important}.swal2-container.swal2-top-start,.swal2-container.swal2-center-start,.swal2-container.swal2-bottom-start{grid-template-columns:minmax(0, 1fr) auto auto}.swal2-container.swal2-top,.swal2-container.swal2-center,.swal2-container.swal2-bottom{grid-template-columns:auto minmax(0, 1fr) auto}.swal2-container.swal2-top-end,.swal2-container.swal2-center-end,.swal2-container.swal2-bottom-end{grid-template-columns:auto auto minmax(0, 1fr)}.swal2-container.swal2-top-start>.swal2-popup{align-self:start}.swal2-container.swal2-top>.swal2-popup{grid-column:2;align-self:start;justify-self:center}.swal2-container.swal2-top-end>.swal2-popup,.swal2-container.swal2-top-right>.swal2-popup{grid-column:3;align-self:start;justify-self:end}.swal2-container.swal2-center-start>.swal2-popup,.swal2-container.swal2-center-left>.swal2-popup{grid-row:2;align-self:center}.swal2-container.swal2-center>.swal2-popup{grid-column:2;grid-row:2;align-self:center;justify-self:center}.swal2-container.swal2-center-end>.swal2-popup,.swal2-container.swal2-center-right>.swal2-popup{grid-column:3;grid-row:2;align-self:center;justify-self:end}.swal2-container.swal2-bottom-start>.swal2-popup,.swal2-container.swal2-bottom-left>.swal2-popup{grid-column:1;grid-row:3;align-self:end}.swal2-container.swal2-bottom>.swal2-popup{grid-column:2;grid-row:3;justify-self:center;align-self:end}.swal2-container.swal2-bottom-end>.swal2-popup,.swal2-container.swal2-bottom-right>.swal2-popup{grid-column:3;grid-row:3;align-self:end;justify-self:end}.swal2-container.swal2-grow-row>.swal2-popup,.swal2-container.swal2-grow-fullscreen>.swal2-popup{grid-column:1/4;width:100%}.swal2-container.swal2-grow-column>.swal2-popup,.swal2-container.swal2-grow-fullscreen>.swal2-popup{grid-row:1/4;align-self:stretch}.swal2-container.swal2-no-transition{transition:none !important}.swal2-popup{display:none;position:relative;box-sizing:border-box;grid-template-columns:minmax(0, 100%);width:32em;max-width:100%;padding:0 0 1.25em;border:none;border-radius:5px;background:#fff;color:#545454;font-family:inherit;font-size:1rem}.swal2-popup:focus{outline:none}.swal2-popup.swal2-loading{overflow-y:hidden}.swal2-title{position:relative;max-width:100%;margin:0;padding:.8em 1em 0;color:inherit;font-size:1.875em;font-weight:600;text-align:center;text-transform:none;word-wrap:break-word}.swal2-actions{display:flex;z-index:1;box-sizing:border-box;flex-wrap:wrap;align-items:center;justify-content:center;width:auto;margin:1.25em auto 0;padding:0}.swal2-actions:not(.swal2-loading) .swal2-styled[disabled]{opacity:.4}.swal2-actions:not(.swal2-loading) .swal2-styled:hover{background-image:linear-gradient(rgba(0, 0, 0, 0.1), rgba(0, 0, 0, 0.1))}.swal2-actions:not(.swal2-loading) .swal2-styled:active{background-image:linear-gradient(rgba(0, 0, 0, 0.2), rgba(0, 0, 0, 0.2))}.swal2-loader{display:none;align-items:center;justify-content:center;width:2.2em;height:2.2em;margin:0 1.875em;animation:swal2-rotate-loading 1.5s linear 0s infinite normal;border-width:.25em;border-style:solid;border-radius:100%;border-color:#2778c4 rgba(0,0,0,0) #2778c4 rgba(0,0,0,0)}.swal2-styled{margin:.3125em;padding:.625em 1.1em;transition:box-shadow .1s;box-shadow:0 0 0 3px rgba(0,0,0,0);font-weight:500}.swal2-styled:not([disabled]){cursor:pointer}.swal2-styled.swal2-confirm{border:0;border-radius:.25em;background:initial;background-color:#7066e0;color:#fff;font-size:1em}.swal2-styled.swal2-confirm:focus{box-shadow:0 0 0 3px rgba(112,102,224,.5)}.swal2-styled.swal2-deny{border:0;border-radius:.25em;background:initial;background-color:#dc3741;color:#fff;font-size:1em}.swal2-styled.swal2-deny:focus{box-shadow:0 0 0 3px rgba(220,55,65,.5)}.swal2-styled.swal2-cancel{border:0;border-radius:.25em;background:initial;background-color:#6e7881;color:#fff;font-size:1em}.swal2-styled.swal2-cancel:focus{box-shadow:0 0 0 3px rgba(110,120,129,.5)}.swal2-styled.swal2-default-outline:focus{box-shadow:0 0 0 3px rgba(100,150,200,.5)}.swal2-styled:focus{outline:none}.swal2-styled::-moz-focus-inner{border:0}.swal2-footer{justify-content:center;margin:1em 0 0;padding:1em 1em 0;border-top:1px solid #eee;color:inherit;font-size:1em}.swal2-timer-progress-bar-container{position:absolute;right:0;bottom:0;left:0;grid-column:auto !important;overflow:hidden;border-bottom-right-radius:5px;border-bottom-left-radius:5px}.swal2-timer-progress-bar{width:100%;height:.25em;background:rgba(0,0,0,.2)}.swal2-image{max-width:100%;margin:2em auto 1em}.swal2-close{z-index:2;align-items:center;justify-content:center;width:1.2em;height:1.2em;margin-top:0;margin-right:0;margin-bottom:-1.2em;padding:0;overflow:hidden;transition:color .1s,box-shadow .1s;border:none;border-radius:5px;background:rgba(0,0,0,0);color:#ccc;font-family:serif;font-family:monospace;font-size:2.5em;cursor:pointer;justify-self:end}.swal2-close:hover{transform:none;background:rgba(0,0,0,0);color:#f27474}.swal2-close:focus{outline:none;box-shadow:inset 0 0 0 3px rgba(100,150,200,.5)}.swal2-close::-moz-focus-inner{border:0}.swal2-html-container{z-index:1;justify-content:center;margin:1em 1.6em .3em;padding:0;overflow:auto;color:inherit;font-size:1.125em;font-weight:normal;line-height:normal;text-align:center;word-wrap:break-word;word-break:break-word}.swal2-input,.swal2-file,.swal2-textarea,.swal2-select,.swal2-radio,.swal2-checkbox{margin:1em 2em 3px}.swal2-input,.swal2-file,.swal2-textarea{box-sizing:border-box;width:auto;transition:border-color .1s,box-shadow .1s;border:1px solid #d9d9d9;border-radius:.1875em;background:rgba(0,0,0,0);box-shadow:inset 0 1px 1px rgba(0,0,0,.06),0 0 0 3px rgba(0,0,0,0);color:inherit;font-size:1.125em}.swal2-input.swal2-inputerror,.swal2-file.swal2-inputerror,.swal2-textarea.swal2-inputerror{border-color:#f27474 !important;box-shadow:0 0 2px #f27474 !important}.swal2-input:focus,.swal2-file:focus,.swal2-textarea:focus{border:1px solid #b4dbed;outline:none;box-shadow:inset 0 1px 1px rgba(0,0,0,.06),0 0 0 3px rgba(100,150,200,.5)}.swal2-input::placeholder,.swal2-file::placeholder,.swal2-textarea::placeholder{color:#ccc}.swal2-range{margin:1em 2em 3px;background:#fff}.swal2-range input{width:80%}.swal2-range output{width:20%;color:inherit;font-weight:600;text-align:center}.swal2-range input,.swal2-range output{height:2.625em;padding:0;font-size:1.125em;line-height:2.625em}.swal2-input{height:2.625em;padding:0 .75em}.swal2-file{width:75%;margin-right:auto;margin-left:auto;background:rgba(0,0,0,0);font-size:1.125em}.swal2-textarea{height:6.75em;padding:.75em}.swal2-select{min-width:50%;max-width:100%;padding:.375em .625em;background:rgba(0,0,0,0);color:inherit;font-size:1.125em}.swal2-radio,.swal2-checkbox{align-items:center;justify-content:center;background:#fff;color:inherit}.swal2-radio label,.swal2-checkbox label{margin:0 .6em;font-size:1.125em}.swal2-radio input,.swal2-checkbox input{flex-shrink:0;margin:0 .4em}.swal2-input-label{display:flex;justify-content:center;margin:1em auto 0}.swal2-validation-message{align-items:center;justify-content:center;margin:1em 0 0;padding:.625em;overflow:hidden;background:#f0f0f0;color:#666;font-size:1em;font-weight:300}.swal2-validation-message::before{content:"!";display:inline-block;width:1.5em;min-width:1.5em;height:1.5em;margin:0 .625em;border-radius:50%;background-color:#f27474;color:#fff;font-weight:600;line-height:1.5em;text-align:center}.swal2-icon{position:relative;box-sizing:content-box;justify-content:center;width:5em;height:5em;margin:2.5em auto .6em;border:0.25em solid rgba(0,0,0,0);border-radius:50%;border-color:#000;font-family:inherit;line-height:5em;cursor:default;user-select:none}.swal2-icon .swal2-icon-content{display:flex;align-items:center;font-size:3.75em}.swal2-icon.swal2-error{border-color:#f27474;color:#f27474}.swal2-icon.swal2-error .swal2-x-mark{position:relative;flex-grow:1}.swal2-icon.swal2-error [class^=swal2-x-mark-line]{display:block;position:absolute;top:2.3125em;width:2.9375em;height:.3125em;border-radius:.125em;background-color:#f27474}.swal2-icon.swal2-error [class^=swal2-x-mark-line][class$=left]{left:1.0625em;transform:rotate(45deg)}.swal2-icon.swal2-error [class^=swal2-x-mark-line][class$=right]{right:1em;transform:rotate(-45deg)}.swal2-icon.swal2-error.swal2-icon-show{animation:swal2-animate-error-icon .5s}.swal2-icon.swal2-error.swal2-icon-show .swal2-x-mark{animation:swal2-animate-error-x-mark .5s}.swal2-icon.swal2-warning{border-color:#facea8;color:#f8bb86}.swal2-icon.swal2-warning.swal2-icon-show{animation:swal2-animate-error-icon .5s}.swal2-icon.swal2-warning.swal2-icon-show .swal2-icon-content{animation:swal2-animate-i-mark .5s}.swal2-icon.swal2-info{border-color:#9de0f6;color:#3fc3ee}.swal2-icon.swal2-info.swal2-icon-show{animation:swal2-animate-error-icon .5s}.swal2-icon.swal2-info.swal2-icon-show .swal2-icon-content{animation:swal2-animate-i-mark .8s}.swal2-icon.swal2-question{border-color:#c9dae1;color:#87adbd}.swal2-icon.swal2-question.swal2-icon-show{animation:swal2-animate-error-icon .5s}.swal2-icon.swal2-question.swal2-icon-show .swal2-icon-content{animation:swal2-animate-question-mark .8s}.swal2-icon.swal2-success{border-color:#a5dc86;color:#a5dc86}.swal2-icon.swal2-success [class^=swal2-success-circular-line]{position:absolute;width:3.75em;height:7.5em;transform:rotate(45deg);border-radius:50%}.swal2-icon.swal2-success [class^=swal2-success-circular-line][class$=left]{top:-0.4375em;left:-2.0635em;transform:rotate(-45deg);transform-origin:3.75em 3.75em;border-radius:7.5em 0 0 7.5em}.swal2-icon.swal2-success [class^=swal2-success-circular-line][class$=right]{top:-0.6875em;left:1.875em;transform:rotate(-45deg);transform-origin:0 3.75em;border-radius:0 7.5em 7.5em 0}.swal2-icon.swal2-success .swal2-success-ring{position:absolute;z-index:2;top:-0.25em;left:-0.25em;box-sizing:content-box;width:100%;height:100%;border:.25em solid rgba(165,220,134,.3);border-radius:50%}.swal2-icon.swal2-success .swal2-success-fix{position:absolute;z-index:1;top:.5em;left:1.625em;width:.4375em;height:5.625em;transform:rotate(-45deg)}.swal2-icon.swal2-success [class^=swal2-success-line]{display:block;position:absolute;z-index:2;height:.3125em;border-radius:.125em;background-color:#a5dc86}.swal2-icon.swal2-success [class^=swal2-success-line][class$=tip]{top:2.875em;left:.8125em;width:1.5625em;transform:rotate(45deg)}.swal2-icon.swal2-success [class^=swal2-success-line][class$=long]{top:2.375em;right:.5em;width:2.9375em;transform:rotate(-45deg)}.swal2-icon.swal2-success.swal2-icon-show .swal2-success-line-tip{animation:swal2-animate-success-line-tip .75s}.swal2-icon.swal2-success.swal2-icon-show .swal2-success-line-long{animation:swal2-animate-success-line-long .75s}.swal2-icon.swal2-success.swal2-icon-show .swal2-success-circular-line-right{animation:swal2-rotate-success-circular-line 4.25s ease-in}.swal2-progress-steps{flex-wrap:wrap;align-items:center;max-width:100%;margin:1.25em auto;padding:0;background:rgba(0,0,0,0);font-weight:600}.swal2-progress-steps li{display:inline-block;position:relative}.swal2-progress-steps .swal2-progress-step{z-index:20;flex-shrink:0;width:2em;height:2em;border-radius:2em;background:#2778c4;color:#fff;line-height:2em;text-align:center}.swal2-progress-steps .swal2-progress-step.swal2-active-progress-step{background:#2778c4}.swal2-progress-steps .swal2-progress-step.swal2-active-progress-step~.swal2-progress-step{background:#add8e6;color:#fff}.swal2-progress-steps .swal2-progress-step.swal2-active-progress-step~.swal2-progress-step-line{background:#add8e6}.swal2-progress-steps .swal2-progress-step-line{z-index:10;flex-shrink:0;width:2.5em;height:.4em;margin:0 -1px;background:#2778c4}[class^=swal2]{-webkit-tap-highlight-color:rgba(0,0,0,0)}.swal2-show{animation:swal2-show .3s}.swal2-hide{animation:swal2-hide .15s forwards}.swal2-noanimation{transition:none}.swal2-scrollbar-measure{position:absolute;top:-9999px;width:50px;height:50px;overflow:scroll}.swal2-rtl .swal2-close{margin-right:initial;margin-left:0}.swal2-rtl .swal2-timer-progress-bar{right:0;left:auto}@keyframes swal2-toast-show{0%{transform:translateY(-0.625em) rotateZ(2deg)}33%{transform:translateY(0) rotateZ(-2deg)}66%{transform:translateY(0.3125em) rotateZ(2deg)}100%{transform:translateY(0) rotateZ(0deg)}}@keyframes swal2-toast-hide{100%{transform:rotateZ(1deg);opacity:0}}@keyframes swal2-toast-animate-success-line-tip{0%{top:.5625em;left:.0625em;width:0}54%{top:.125em;left:.125em;width:0}70%{top:.625em;left:-0.25em;width:1.625em}84%{top:1.0625em;left:.75em;width:.5em}100%{top:1.125em;left:.1875em;width:.75em}}@keyframes swal2-toast-animate-success-line-long{0%{top:1.625em;right:1.375em;width:0}65%{top:1.25em;right:.9375em;width:0}84%{top:.9375em;right:0;width:1.125em}100%{top:.9375em;right:.1875em;width:1.375em}}@keyframes swal2-show{0%{transform:scale(0.7)}45%{transform:scale(1.05)}80%{transform:scale(0.95)}100%{transform:scale(1)}}@keyframes swal2-hide{0%{transform:scale(1);opacity:1}100%{transform:scale(0.5);opacity:0}}@keyframes swal2-animate-success-line-tip{0%{top:1.1875em;left:.0625em;width:0}54%{top:1.0625em;left:.125em;width:0}70%{top:2.1875em;left:-0.375em;width:3.125em}84%{top:3em;left:1.3125em;width:1.0625em}100%{top:2.8125em;left:.8125em;width:1.5625em}}@keyframes swal2-animate-success-line-long{0%{top:3.375em;right:2.875em;width:0}65%{top:3.375em;right:2.875em;width:0}84%{top:2.1875em;right:0;width:3.4375em}100%{top:2.375em;right:.5em;width:2.9375em}}@keyframes swal2-rotate-success-circular-line{0%{transform:rotate(-45deg)}5%{transform:rotate(-45deg)}12%{transform:rotate(-405deg)}100%{transform:rotate(-405deg)}}@keyframes swal2-animate-error-x-mark{0%{margin-top:1.625em;transform:scale(0.4);opacity:0}50%{margin-top:1.625em;transform:scale(0.4);opacity:0}80%{margin-top:-0.375em;transform:scale(1.15)}100%{margin-top:0;transform:scale(1);opacity:1}}@keyframes swal2-animate-error-icon{0%{transform:rotateX(100deg);opacity:0}100%{transform:rotateX(0deg);opacity:1}}@keyframes swal2-rotate-loading{0%{transform:rotate(0deg)}100%{transform:rotate(360deg)}}@keyframes swal2-animate-question-mark{0%{transform:rotateY(-360deg)}100%{transform:rotateY(0)}}@keyframes swal2-animate-i-mark{0%{transform:rotateZ(45deg);opacity:0}25%{transform:rotateZ(-25deg);opacity:.4}50%{transform:rotateZ(15deg);opacity:.8}75%{transform:rotateZ(-5deg);opacity:1}100%{transform:rotateX(0);opacity:1}}body.swal2-shown:not(.swal2-no-backdrop):not(.swal2-toast-shown){overflow:hidden}body.swal2-height-auto{height:auto !important}body.swal2-no-backdrop .swal2-container{background-color:rgba(0,0,0,0) !important;pointer-events:none}body.swal2-no-backdrop .swal2-container .swal2-popup{pointer-events:all}body.swal2-no-backdrop .swal2-container .swal2-modal{box-shadow:0 0 10px rgba(0,0,0,.4)}@media print{body.swal2-shown:not(.swal2-no-backdrop):not(.swal2-toast-shown){overflow-y:scroll !important}body.swal2-shown:not(.swal2-no-backdrop):not(.swal2-toast-shown)>[aria-hidden=true]{display:none}body.swal2-shown:not(.swal2-no-backdrop):not(.swal2-toast-shown) .swal2-container{position:static !important}}body.swal2-toast-shown .swal2-container{box-sizing:border-box;width:360px;max-width:100%;background-color:rgba(0,0,0,0);pointer-events:none}body.swal2-toast-shown .swal2-container.swal2-top{top:0;right:auto;bottom:auto;left:50%;transform:translateX(-50%)}body.swal2-toast-shown .swal2-container.swal2-top-end,body.swal2-toast-shown .swal2-container.swal2-top-right{top:0;right:0;bottom:auto;left:auto}body.swal2-toast-shown .swal2-container.swal2-top-start,body.swal2-toast-shown .swal2-container.swal2-top-left{top:0;right:auto;bottom:auto;left:0}body.swal2-toast-shown .swal2-container.swal2-center-start,body.swal2-toast-shown .swal2-container.swal2-center-left{top:50%;right:auto;bottom:auto;left:0;transform:translateY(-50%)}body.swal2-toast-shown .swal2-container.swal2-center{top:50%;right:auto;bottom:auto;left:50%;transform:translate(-50%, -50%)}body.swal2-toast-shown .swal2-container.swal2-center-end,body.swal2-toast-shown .swal2-container.swal2-center-right{top:50%;right:0;bottom:auto;left:auto;transform:translateY(-50%)}body.swal2-toast-shown .swal2-container.swal2-bottom-start,body.swal2-toast-shown .swal2-container.swal2-bottom-left{top:auto;right:auto;bottom:0;left:0}body.swal2-toast-shown .swal2-container.swal2-bottom{top:auto;right:auto;bottom:0;left:50%;transform:translateX(-50%)}body.swal2-toast-shown .swal2-container.swal2-bottom-end,body.swal2-toast-shown .swal2-container.swal2-bottom-right{top:auto;right:0;bottom:0;left:auto}')}},t={};function n(o){var a=t[o];if(void 0!==a)return a.exports;var s=t[o]={id:o,exports:{}};return e[o].call(s.exports,s,s.exports,n),s.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var o in t)n.o(t,o)&&!n.o(e,o)&&Object.defineProperty(e,o,{enumerable:!0,get:t[o]})},n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.nc=void 0,(()=>{"use strict";var e=n(379),t=n.n(e),o=n(795),a=n.n(o),s=n(569),i=n.n(s),r=n(565),l=n.n(r),c=n(216),d=n.n(c),u=n(589),p=n.n(u),m=n(426),g={};g.styleTagTransform=p(),g.setAttributes=l(),g.insert=i().bind(null,"head"),g.domAPI=a(),g.insertStyleElement=d(),t()(m.Z,g),m.Z&&m.Z.locals&&m.Z.locals;let w=[];window.addTask=function(){console.log("Creating a task!"),w.push(new h(`${title.value}`,`${dueDate.value}`,`${priority.value}`,`${description.value}`,w.length))},window.tasks=w;class h{constructor(e,t,n,o,a){this.name=e,this.dueDate=t,this.priority=n,this.description=o,this.id=a}}var f=n(455),b=n.n(f);function A(e){document.getElementById(`${e.replace(/\s/g,"-")}`).addEventListener("click",(()=>{console.log(`You clicked on ${e}`),"All Tasks"===e&&y(tasks)}))}function y(e){console.log("I am loading tasks!");const t=document.getElementById("task-info");if(x(t),0===e.length){console.log("No tasks found!"),b().fire({title:"You do not have any tasks. Would you like to create one?",icon:"question",showCloseButton:!0,showDenyButton:!0,focusConfirm:!1,confirmButtonText:"Yes",denyButtonText:"No"}).then((e=>{e.isConfirmed&&C()}));const e=document.createElement("h1");return e.appendChild(document.createTextNode("No tasks found!")),void t.appendChild(e)}const n=document.createElement("h1");n.appendChild(document.createTextNode("Your Tasks")),n.setAttribute("grid-row","1");const o=document.createElement("div");o.setAttribute("class","tasks"),o.setAttribute("grid-row","2"),t.appendChild(n),t.appendChild(o);for(let t=0;t<e.length;t++){let n=e[t].name,a=e[t].dueDate,s=e[t].priority,i=e[t].description,r=document.createElement("div");r.setAttribute("class","card");let l=document.createElement("h3");l.appendChild(document.createTextNode(n)),l.addEventListener("click",(()=>{k(e[t])}));let c=document.createElement("p");c.appendChild(document.createTextNode(i));let d=document.createElement("div"),u=document.createElement("div");u.appendChild(document.createTextNode(s));let p=document.createElement("div");p.appendChild(document.createTextNode(a)),d.append(u),d.append(p),r.appendChild(l),r.appendChild(c),r.appendChild(d),o.appendChild(r)}}function C(){console.log("Let's add one!");const e=document.getElementById("task-info");x(e);const t=document.createElement("h1");t.appendChild(document.createTextNode("Complete this form to add a new task")),t.setAttribute("grid-row","1");const n=document.createElement("form");n.setAttribute("id","taskForm"),n.setAttribute("onSubmit","event.preventDefault() & manageTasks()"),n.setAttribute("grid-row","2"),e.appendChild(t),e.appendChild(n);for(let e=0;e<5;e++){let e=document.createElement("div");e.setAttribute("class","data"),n.appendChild(e)}const o=document.createElement("input");o.setAttribute("type","submit"),o.setAttribute("value","Submit"),o.setAttribute("id","submit"),o.setAttribute("name","submit");const a=document.createElement("label");a.htmlFor="title",a.appendChild(document.createTextNode("Title: "));const s=document.createElement("input");s.setAttribute("type","text"),s.setAttribute("id","title"),s.setAttribute("name","title"),s.required=!0;const i=document.createElement("label");i.htmlFor="dueDate",i.appendChild(document.createTextNode("Due Date: "));const r=document.createElement("input");r.setAttribute("type","date"),r.setAttribute("id","dueDate"),r.setAttribute("name","dueDate"),r.required=!0;const l=document.createElement("label");l.htmlFor="priority",l.appendChild(document.createTextNode("Priority: "));const c=document.createElement("select");c.setAttribute("id","priority"),c.setAttribute("name","priority"),c.required=!0;const d=document.createElement("option");d.value="none",d.appendChild(document.createTextNode("None"));const u=document.createElement("option");u.value="low",u.appendChild(document.createTextNode("Low"));const p=document.createElement("option");p.value="medium",p.appendChild(document.createTextNode("Medium"));const m=document.createElement("option");m.value="high",m.appendChild(document.createTextNode("High")),c.appendChild(d),c.appendChild(u),c.appendChild(p),c.appendChild(m);const g=document.createElement("label");g.htmlFor="description",g.appendChild(document.createTextNode("Description: "));const w=document.createElement("textarea");w.setAttribute("id","description"),w.setAttribute("name","description"),w.setAttribute("rows","3"),w.setAttribute("cols","75"),w.required=!0,n.childNodes[0].appendChild(o),n.childNodes[1].appendChild(a),n.childNodes[1].appendChild(s),n.childNodes[2].appendChild(i),n.childNodes[2].appendChild(r),n.childNodes[3].appendChild(l),n.childNodes[3].appendChild(c),n.childNodes[4].appendChild(g),n.childNodes[4].appendChild(w)}function v(){b().fire({title:"Task added, would you like to add another?",icon:"question",showCloseButton:!0,showDenyButton:!0,focusConfirm:!1,confirmButtonText:"Yes, I have more tasks",denyButtonText:"No, show my tasks"}).then((e=>{e.isConfirmed?C():y(tasks)}))}function x(e){let t=e.firstElementChild;for(;t;)t.remove(),t=e.firstElementChild}function k(e){const t=document.getElementById("task-info");x(t);const n=document.createElement("h1");n.appendChild(document.createTextNode(`${e.name}`)),n.style.gridRow="1";const o=document.createElement("div");o.style.gridRow="2",o.setAttribute("class","task-data"),t.appendChild(n),t.appendChild(o);const a=document.createElement("div");a.appendChild(document.createTextNode(`Due: ${e.dueDate}`)),a.setAttribute("class","task-date");const s=document.createElement("div");s.appendChild(document.createTextNode(`Priority: ${e.priority}`)),s.setAttribute("class","task-priority");const i=document.createElement("div");i.appendChild(document.createTextNode(` Description: ${e.description}`)),i.setAttribute("class","task-description");const r=document.createElement("div");r.innerHTML='<i class = "material-icons">delete</i>',r.setAttribute("class","delete-icon"),r.addEventListener("click",(()=>{b().fire({title:"Are you sure you want to delete this task?",text:"You won't be able to revert this!",icon:"warning",showCancelButton:!0,confirmButtonColor:"#3085d6",cancelButtonColor:"#d33",confirmButtonText:"Yes, delete it!"}).then((e=>{e.isConfirmed&&b().fire("Deleted!","Your file has been deleted.","success")}))})),o.appendChild(a),o.appendChild(s),o.appendChild(i),o.appendChild(r)}window.addAnotherTask=v,window.clearTaskWindow=x,window.manageTasks=function(){addTask(),v()},window.onload=function(){!function(){console.log("Generating a page!");const e=document.getElementById("content"),t=document.createElement("div");t.setAttribute("id","side-bar");const n=document.createElement("div");n.setAttribute("id","filter-tabs");const o=document.createElement("div");o.setAttribute("id","task-list"),t.appendChild(n),t.appendChild(o);const a=document.createElement("div");a.setAttribute("id","task-info"),e.appendChild(t),e.appendChild(a);const s=["Today","Upcoming","Past Due","Anytime","All Tasks"],i=document.createElement("ul");let r,l;for(let e=0;e<s.length;e++)r=document.createElement("li"),l=document.createTextNode(s[e]),r.setAttribute("id",`${s[e].replace(/\s/g,"-")}`),r.appendChild(l),i.appendChild(r);n.appendChild(i);for(let e=0;e<s.length;e++)A(s[e])}(),y(w)}})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi5qcyIsIm1hcHBpbmdzIjoid0ZBR0lBLEUsTUFBMEIsR0FBNEIsS0FFMURBLEVBQXdCQyxLQUFLLENBQUNDLEVBQU9DLEdBQUksODVHQUFpNkcsR0FBRyxDQUFDLFFBQVUsRUFBRSxRQUFVLENBQUMsNkJBQTZCLE1BQVEsR0FBRyxTQUFXLGtxREFBa3FELGVBQWlCLENBQUMsKzVHQUFpNkcsV0FBYSxNQUUxblIsUyx1QkNEQUQsRUFBT0UsUUFBVSxTQUFVQyxHQUN6QixJQUFJQyxFQUFPLEdBNEVYLE9BekVBQSxFQUFLQyxTQUFXLFdBQ2QsT0FBT0MsS0FBS0MsS0FBSSxTQUFVQyxHQUN4QixJQUFJQyxFQUFVLEdBQ1ZDLE9BQStCLElBQVpGLEVBQUssR0FvQjVCLE9BbkJJQSxFQUFLLEtBQ1BDLEdBQVcsY0FBY0UsT0FBT0gsRUFBSyxHQUFJLFFBRXZDQSxFQUFLLEtBQ1BDLEdBQVcsVUFBVUUsT0FBT0gsRUFBSyxHQUFJLE9BRW5DRSxJQUNGRCxHQUFXLFNBQVNFLE9BQU9ILEVBQUssR0FBR0ksT0FBUyxFQUFJLElBQUlELE9BQU9ILEVBQUssSUFBTSxHQUFJLE9BRTVFQyxHQUFXTixFQUF1QkssR0FDOUJFLElBQ0ZELEdBQVcsS0FFVEQsRUFBSyxLQUNQQyxHQUFXLEtBRVRELEVBQUssS0FDUEMsR0FBVyxLQUVOQSxDQUNULElBQUdJLEtBQUssR0FDVixFQUdBVCxFQUFLVSxFQUFJLFNBQVdDLEVBQVNDLEVBQU9DLEVBQVFDLEVBQVVDLEdBQzdCLGlCQUFaSixJQUNUQSxFQUFVLENBQUMsQ0FBQyxLQUFNQSxPQUFTSyxLQUU3QixJQUFJQyxFQUF5QixDQUFDLEVBQzlCLEdBQUlKLEVBQ0YsSUFBSyxJQUFJSyxFQUFJLEVBQUdBLEVBQUloQixLQUFLTSxPQUFRVSxJQUFLLENBQ3BDLElBQUlyQixFQUFLSyxLQUFLZ0IsR0FBRyxHQUNQLE1BQU5yQixJQUNGb0IsRUFBdUJwQixJQUFNLEVBRWpDLENBRUYsSUFBSyxJQUFJc0IsRUFBSyxFQUFHQSxFQUFLUixFQUFRSCxPQUFRVyxJQUFNLENBQzFDLElBQUlmLEVBQU8sR0FBR0csT0FBT0ksRUFBUVEsSUFDekJOLEdBQVVJLEVBQXVCYixFQUFLLFdBR3JCLElBQVZXLFNBQ2MsSUFBWlgsRUFBSyxLQUdkQSxFQUFLLEdBQUssU0FBU0csT0FBT0gsRUFBSyxHQUFHSSxPQUFTLEVBQUksSUFBSUQsT0FBT0gsRUFBSyxJQUFNLEdBQUksTUFBTUcsT0FBT0gsRUFBSyxHQUFJLE1BRi9GQSxFQUFLLEdBQUtXLEdBTVZILElBQ0dSLEVBQUssSUFHUkEsRUFBSyxHQUFLLFVBQVVHLE9BQU9ILEVBQUssR0FBSSxNQUFNRyxPQUFPSCxFQUFLLEdBQUksS0FDMURBLEVBQUssR0FBS1EsR0FIVlIsRUFBSyxHQUFLUSxHQU1WRSxJQUNHVixFQUFLLElBR1JBLEVBQUssR0FBSyxjQUFjRyxPQUFPSCxFQUFLLEdBQUksT0FBT0csT0FBT0gsRUFBSyxHQUFJLEtBQy9EQSxFQUFLLEdBQUtVLEdBSFZWLEVBQUssR0FBSyxHQUFHRyxPQUFPTyxJQU14QmQsRUFBS0wsS0FBS1MsR0FDWixDQUNGLEVBQ09KLENBQ1QsQyx1QkNsRkFKLEVBQU9FLFFBQVUsU0FBVU0sR0FDekIsSUFBSUMsRUFBVUQsRUFBSyxHQUNmZ0IsRUFBYWhCLEVBQUssR0FDdEIsSUFBS2dCLEVBQ0gsT0FBT2YsRUFFVCxHQUFvQixtQkFBVGdCLEtBQXFCLENBQzlCLElBQUlDLEVBQVNELEtBQUtFLFNBQVNDLG1CQUFtQkMsS0FBS0MsVUFBVU4sTUFDekRPLEVBQU8sK0RBQStEcEIsT0FBT2UsR0FDN0VNLEVBQWdCLE9BQU9yQixPQUFPb0IsRUFBTSxPQUN4QyxNQUFPLENBQUN0QixHQUFTRSxPQUFPLENBQUNxQixJQUFnQm5CLEtBQUssS0FDaEQsQ0FDQSxNQUFPLENBQUNKLEdBQVNJLEtBQUssS0FDeEIsQyx1QkNiQSxJQUFJb0IsRUFBYyxHQUVsQixTQUFTQyxFQUFxQkMsR0FHNUIsSUFGQSxJQUFJQyxHQUFVLEVBRUx0QixFQUFJLEVBQUdBLEVBQUltQixFQUFZckIsT0FBUUUsSUFDdEMsR0FBSW1CLEVBQVluQixHQUFHcUIsYUFBZUEsRUFBWSxDQUM1Q0MsRUFBU3RCLEVBQ1QsS0FDRixDQUdGLE9BQU9zQixDQUNULENBRUEsU0FBU0MsRUFBYWpDLEVBQU1rQyxHQUkxQixJQUhBLElBQUlDLEVBQWEsQ0FBQyxFQUNkQyxFQUFjLEdBRVQxQixFQUFJLEVBQUdBLEVBQUlWLEVBQUtRLE9BQVFFLElBQUssQ0FDcEMsSUFBSU4sRUFBT0osRUFBS1UsR0FDWmIsRUFBS3FDLEVBQVFHLEtBQU9qQyxFQUFLLEdBQUs4QixFQUFRRyxLQUFPakMsRUFBSyxHQUNsRGtDLEVBQVFILEVBQVd0QyxJQUFPLEVBQzFCa0MsRUFBYSxHQUFHeEIsT0FBT1YsRUFBSSxLQUFLVSxPQUFPK0IsR0FDM0NILEVBQVd0QyxHQUFNeUMsRUFBUSxFQUN6QixJQUFJQyxFQUFvQlQsRUFBcUJDLEdBQ3pDUyxFQUFNLENBQ1JDLElBQUtyQyxFQUFLLEdBQ1ZRLE1BQU9SLEVBQUssR0FDWnNDLFVBQVd0QyxFQUFLLEdBQ2hCVSxTQUFVVixFQUFLLEdBQ2ZXLE1BQU9YLEVBQUssSUFHZCxJQUEyQixJQUF2Qm1DLEVBQ0ZWLEVBQVlVLEdBQW1CSSxhQUMvQmQsRUFBWVUsR0FBbUJLLFFBQVFKLE9BQ2xDLENBQ0wsSUFBSUksRUFBVUMsRUFBZ0JMLEVBQUtOLEdBQ25DQSxFQUFRWSxRQUFVcEMsRUFDbEJtQixFQUFZa0IsT0FBT3JDLEVBQUcsRUFBRyxDQUN2QnFCLFdBQVlBLEVBQ1phLFFBQVNBLEVBQ1RELFdBQVksR0FFaEIsQ0FFQVAsRUFBWXpDLEtBQUtvQyxFQUNuQixDQUVBLE9BQU9LLENBQ1QsQ0FFQSxTQUFTUyxFQUFnQkwsRUFBS04sR0FDNUIsSUFBSWMsRUFBTWQsRUFBUWUsT0FBT2YsR0FlekIsT0FkQWMsRUFBSUUsT0FBT1YsR0FFRyxTQUFpQlcsR0FDN0IsR0FBSUEsRUFBUSxDQUNWLEdBQUlBLEVBQU9WLE1BQVFELEVBQUlDLEtBQU9VLEVBQU92QyxRQUFVNEIsRUFBSTVCLE9BQVN1QyxFQUFPVCxZQUFjRixFQUFJRSxXQUFhUyxFQUFPckMsV0FBYTBCLEVBQUkxQixVQUFZcUMsRUFBT3BDLFFBQVV5QixFQUFJekIsTUFDekosT0FHRmlDLEVBQUlFLE9BQU9WLEVBQU1XLEVBQ25CLE1BQ0VILEVBQUlJLFFBRVIsQ0FHRixDQUVBeEQsRUFBT0UsUUFBVSxTQUFVRSxFQUFNa0MsR0FHL0IsSUFBSW1CLEVBQWtCcEIsRUFEdEJqQyxFQUFPQSxHQUFRLEdBRGZrQyxFQUFVQSxHQUFXLENBQUMsR0FHdEIsT0FBTyxTQUFnQm9CLEdBQ3JCQSxFQUFVQSxHQUFXLEdBRXJCLElBQUssSUFBSTVDLEVBQUksRUFBR0EsRUFBSTJDLEVBQWdCN0MsT0FBUUUsSUFBSyxDQUMvQyxJQUNJNkMsRUFBUXpCLEVBREt1QixFQUFnQjNDLElBRWpDbUIsRUFBWTBCLEdBQU9aLFlBQ3JCLENBSUEsSUFGQSxJQUFJYSxFQUFxQnZCLEVBQWFxQixFQUFTcEIsR0FFdEN1QixFQUFLLEVBQUdBLEVBQUtKLEVBQWdCN0MsT0FBUWlELElBQU0sQ0FDbEQsSUFFSUMsRUFBUzVCLEVBRkt1QixFQUFnQkksSUFJSyxJQUFuQzVCLEVBQVk2QixHQUFRZixhQUN0QmQsRUFBWTZCLEdBQVFkLFVBRXBCZixFQUFZa0IsT0FBT1csRUFBUSxHQUUvQixDQUVBTCxFQUFrQkcsQ0FDcEIsQ0FDRixDLHVCQ3JHQSxJQUFJRyxFQUFPLENBQUMsRUFvQ1ovRCxFQUFPRSxRQVZQLFNBQTBCOEQsRUFBUUMsR0FDaEMsSUFBSUMsRUF4Qk4sU0FBbUJBLEdBQ2pCLFFBQTRCLElBQWpCSCxFQUFLRyxHQUF5QixDQUN2QyxJQUFJQyxFQUFjQyxTQUFTQyxjQUFjSCxHQUV6QyxHQUFJSSxPQUFPQyxtQkFBcUJKLGFBQXVCRyxPQUFPQyxrQkFDNUQsSUFHRUosRUFBY0EsRUFBWUssZ0JBQWdCQyxJQUk1QyxDQUhFLE1BQU9DLEdBRVBQLEVBQWMsSUFDaEIsQ0FHRkosRUFBS0csR0FBVUMsQ0FDakIsQ0FFQSxPQUFPSixFQUFLRyxFQUNkLENBS2VTLENBQVVYLEdBRXZCLElBQUtFLEVBQ0gsTUFBTSxJQUFJVSxNQUFNLDJHQUdsQlYsRUFBT1csWUFBWVosRUFDckIsQyx1QkMxQkFqRSxFQUFPRSxRQVBQLFNBQTRCb0MsR0FDMUIsSUFBSXdDLEVBQVVWLFNBQVNXLGNBQWMsU0FHckMsT0FGQXpDLEVBQVEwQyxjQUFjRixFQUFTeEMsRUFBUTJDLFlBQ3ZDM0MsRUFBUTBCLE9BQU9jLEVBQVN4QyxFQUFRQSxTQUN6QndDLENBQ1QsQyw2QkNHQTlFLEVBQU9FLFFBUlAsU0FBd0NnRixHQUN0QyxJQUFJQyxFQUFtRCxLQUVuREEsR0FDRkQsRUFBYUUsYUFBYSxRQUFTRCxFQUV2QyxDLHVCQzREQW5GLEVBQU9FLFFBWlAsU0FBZ0JvQyxHQUNkLElBQUk0QyxFQUFlNUMsRUFBUStDLG1CQUFtQi9DLEdBQzlDLE1BQU8sQ0FDTGdCLE9BQVEsU0FBZ0JWLElBekQ1QixTQUFlc0MsRUFBYzVDLEVBQVNNLEdBQ3BDLElBQUlDLEVBQU0sR0FFTkQsRUFBSTFCLFdBQ04yQixHQUFPLGNBQWNsQyxPQUFPaUMsRUFBSTFCLFNBQVUsUUFHeEMwQixFQUFJNUIsUUFDTjZCLEdBQU8sVUFBVWxDLE9BQU9pQyxFQUFJNUIsTUFBTyxPQUdyQyxJQUFJTixPQUFpQyxJQUFka0MsRUFBSXpCLE1BRXZCVCxJQUNGbUMsR0FBTyxTQUFTbEMsT0FBT2lDLEVBQUl6QixNQUFNUCxPQUFTLEVBQUksSUFBSUQsT0FBT2lDLEVBQUl6QixPQUFTLEdBQUksT0FHNUUwQixHQUFPRCxFQUFJQyxJQUVQbkMsSUFDRm1DLEdBQU8sS0FHTEQsRUFBSTVCLFFBQ042QixHQUFPLEtBR0xELEVBQUkxQixXQUNOMkIsR0FBTyxLQUdULElBQUlDLEVBQVlGLEVBQUlFLFVBRWhCQSxHQUE2QixvQkFBVHJCLE9BQ3RCb0IsR0FBTyx1REFBdURsQyxPQUFPYyxLQUFLRSxTQUFTQyxtQkFBbUJDLEtBQUtDLFVBQVVnQixNQUFlLFFBTXRJUixFQUFRZ0Qsa0JBQWtCekMsRUFBS3FDLEVBQWM1QyxFQUFRQSxRQUN2RCxDQWlCTWlELENBQU1MLEVBQWM1QyxFQUFTTSxFQUMvQixFQUNBWSxPQUFRLFlBakJaLFNBQTRCMEIsR0FFMUIsR0FBZ0MsT0FBNUJBLEVBQWFNLFdBQ2YsT0FBTyxFQUdUTixFQUFhTSxXQUFXQyxZQUFZUCxFQUN0QyxDQVdNUSxDQUFtQlIsRUFDckIsRUFFSixDLHVCQ3BEQWxGLEVBQU9FLFFBWlAsU0FBMkIyQyxFQUFLcUMsR0FDOUIsR0FBSUEsRUFBYVMsV0FDZlQsRUFBYVMsV0FBV0MsUUFBVS9DLE1BQzdCLENBQ0wsS0FBT3FDLEVBQWFXLFlBQ2xCWCxFQUFhTyxZQUFZUCxFQUFhVyxZQUd4Q1gsRUFBYUwsWUFBWVQsU0FBUzBCLGVBQWVqRCxHQUNuRCxDQUNGLEMsa0JDUmlFN0MsRUFBT0UsUUFHL0QsV0FBZSxhQVl0QixJQUFJNkYsRUFBZSxDQUNqQkMsZ0JBQWlCLElBQUlDLFFBQ3JCQyxRQUFTLElBQUlELFFBQ2JFLFlBQWEsSUFBSUYsUUFDakJHLFNBQVUsSUFBSUgsU0FHaEIsTUFNTUksRUFBU0MsSUFDYixNQUFNbEUsRUFBUyxDQUFDLEVBQ2hCLElBQUssTUFBTXRCLEtBQUt3RixFQUNkbEUsRUFBT2tFLEVBQU14RixJQVRFLFNBU2lCd0YsRUFBTXhGLEdBRXhDLE9BQU9zQixDQUFNLEVBRVRtRSxFQUFjRixFQUFPLENBQUMsWUFBYSxRQUFTLGNBQWUsU0FBVSxRQUFTLFFBQVMsY0FBZSxnQkFBaUIsUUFBUyxjQUFlLE9BQVEsT0FBUSxRQUFTLFFBQVMsaUJBQWtCLFVBQVcsVUFBVyxPQUFRLFNBQVUsa0JBQW1CLFNBQVUsT0FBUSxlQUFnQixRQUFTLFFBQVMsT0FBUSxRQUFTLFNBQVUsUUFBUyxXQUFZLFFBQVMsV0FBWSxhQUFjLGNBQWUscUJBQXNCLGlCQUFrQix1QkFBd0IsZ0JBQWlCLHFCQUFzQixTQUFVLFVBQVcsU0FBVSxNQUFPLFlBQWEsVUFBVyxXQUFZLFlBQWEsU0FBVSxlQUFnQixhQUFjLGNBQWUsZUFBZ0IsU0FBVSxlQUFnQixhQUFjLGNBQWUsZUFBZ0IsV0FBWSxjQUFlLGtCQUFtQixNQUFPLHFCQUFzQiwrQkFBZ0Msb0JBQXFCLGVBQWdCLGVBQWdCLFlBQWEsZ0JBQWlCLGVBQzk1QkcsRUFBWUgsRUFBTyxDQUFDLFVBQVcsVUFBVyxPQUFRLFdBQVksVUFFOURJLEVBQWdCLGVBd0JoQkMsRUFBd0JDLEdBQU9BLEVBQUlDLE9BQU8sR0FBR0MsY0FBZ0JGLEVBQUlHLE1BQU0sR0FPdkVDLEVBQU9DLElBQ1hDLFFBQVFGLEtBQUssR0FBR04sS0FBb0MsaUJBQVpPLEVBQXVCQSxFQUFRbkcsS0FBSyxLQUFPbUcsSUFBVSxFQVF6RkUsRUFBUUYsSUFDWkMsUUFBUUMsTUFBTSxHQUFHVCxLQUFpQk8sSUFBVSxFQVN4Q0csRUFBMkIsR0FvQjNCQyxFQUF1QixDQUFDQyxFQUFpQkMsS0FiOUJOLFFBY04sSUFBSUssK0VBQTZGQyxjQWJyR0gsRUFBeUJJLFNBQVNQLEtBQ3JDRyxFQUF5QnBILEtBQUtpSCxHQUM5QkQsRUFBS0MsR0FXMEgsRUFVN0hRLEVBQWlCQyxHQUFzQixtQkFBUkEsRUFBcUJBLElBQVFBLEVBTTVEQyxFQUFpQkQsR0FBT0EsR0FBZ0MsbUJBQWxCQSxFQUFJRSxVQU0xQ0MsRUFBWUgsR0FBT0MsRUFBZUQsR0FBT0EsRUFBSUUsWUFBY0UsUUFBUUMsUUFBUUwsR0FNM0VNLEVBQVlOLEdBQU9BLEdBQU9JLFFBQVFDLFFBQVFMLEtBQVNBLEVBT25ETyxFQUFlLElBQU01RCxTQUFTNkQsS0FBSzVELGNBQWMsSUFBSWtDLEVBQVkyQixhQU1qRUMsRUFBb0JDLElBQ3hCLE1BQU1GLEVBQVlGLElBQ2xCLE9BQU9FLEVBQVlBLEVBQVU3RCxjQUFjK0QsR0FBa0IsSUFBSSxFQU83REMsRUFBaUJDLEdBQ2RILEVBQWtCLElBQUlHLEtBTXpCQyxFQUFXLElBQU1GLEVBQWU5QixFQUFZaUMsT0FLNUNDLEVBQVUsSUFBTUosRUFBZTlCLEVBQVltQyxNQVUzQ0MsRUFBVyxJQUFNTixFQUFlOUIsRUFBWXFDLE9BSzVDQyxFQUFtQixJQUFNUixFQUFlOUIsRUFBWSxtQkFLcER1QyxFQUFXLElBQU1ULEVBQWU5QixFQUFZd0MsT0FLNUNDLEVBQW1CLElBQU1YLEVBQWU5QixFQUFZLG1CQUtwRDBDLEVBQXVCLElBQU1aLEVBQWU5QixFQUFZLHVCQUt4RDJDLEVBQW1CLElBQXNDZixFQUFrQixJQUFJNUIsRUFBWTRDLFlBQVk1QyxFQUFZNkMsV0FLbkhDLEVBQWtCLElBQXNDbEIsRUFBa0IsSUFBSTVCLEVBQVk0QyxZQUFZNUMsRUFBWStDLFVBS2xIQyxFQUFnQixJQUFzQ3BCLEVBQWtCLElBQUk1QixFQUFZNEMsWUFBWTVDLEVBQVlpRCxRQVVoSEMsRUFBWSxJQUFNdEIsRUFBa0IsSUFBSTVCLEVBQVltRCxVQUtwREMsRUFBYSxJQUFNdEIsRUFBZTlCLEVBQVk0QyxTQUs5Q1MsRUFBWSxJQUFNdkIsRUFBZTlCLEVBQVlzRCxRQUs3Q0MsRUFBc0IsSUFBTXpCLEVBQWU5QixFQUFZLHVCQUt2RHdELEVBQWlCLElBQU0xQixFQUFlOUIsRUFBWXlELE9Bc0JsREMsRUFBdUIsS0FDM0IsTUFBTUMsRUFBZ0NDLE1BQU1DLEtBQUs3QixJQUFXOEIsaUJBQWlCLHdEQUU1RUMsTUFBSyxDQUFDQyxFQUFHQyxLQUNSLE1BQU1DLEVBQVlDLFNBQVNILEVBQUVJLGFBQWEsYUFDcENDLEVBQVlGLFNBQVNGLEVBQUVHLGFBQWEsYUFDMUMsT0FBSUYsRUFBWUcsRUFDUCxFQUNFSCxFQUFZRyxHQUNiLEVBRUgsQ0FBQyxJQUVKQyxFQUF5QlYsTUFBTUMsS0FBSzdCLElBQVc4QixpQkFoQ3JDLDJRQWdDa0VTLFFBQU9DLEdBQXNDLE9BQWhDQSxFQUFHSixhQUFhLGNBQy9HLE1BNU9rQkssS0FDbEIsTUFBTTVJLEVBQVMsR0FDZixJQUFLLElBQUl0QixFQUFJLEVBQUdBLEVBQUlrSyxFQUFJcEssT0FBUUUsS0FDRSxJQUE1QnNCLEVBQU82SSxRQUFRRCxFQUFJbEssS0FDckJzQixFQUFPckMsS0FBS2lMLEVBQUlsSyxJQUdwQixPQUFPc0IsQ0FBTSxFQXFPTjhJLENBQVloQixFQUE4QnZKLE9BQU9rSyxJQUF5QkMsUUFBT0MsR0FBTUksRUFBWUosSUFBSSxFQU0xR0ssRUFBVSxJQUNQQyxFQUFTakgsU0FBUzZELEtBQU0xQixFQUFZK0UsU0FBV0QsRUFBU2pILFNBQVM2RCxLQUFNMUIsRUFBWSxrQkFBb0I4RSxFQUFTakgsU0FBUzZELEtBQU0xQixFQUFZLGdCQU05SWdGLEVBQVUsSUFDUGhELEtBQWM4QyxFQUFTOUMsSUFBWWhDLEVBQVlpRixPQVdsREMsRUFBUyxDQUNiQyxvQkFBcUIsTUFVakJDLEVBQWUsQ0FBQ0MsRUFBTUMsS0FFMUIsR0FEQUQsRUFBS0UsWUFBYyxHQUNmRCxFQUFNLENBQ1IsTUFDTUUsR0FEUyxJQUFJQyxXQUNHQyxnQkFBZ0JKLEVBQU0sYUFDNUMxQixNQUFNQyxLQUFLMkIsRUFBTzFILGNBQWMsUUFBUTZILFlBQVlDLFNBQVFDLElBQzFEUixFQUFLL0csWUFBWXVILEVBQU0sSUFFekJqQyxNQUFNQyxLQUFLMkIsRUFBTzFILGNBQWMsUUFBUTZILFlBQVlDLFNBQVFDLElBQ3REQSxhQUFpQkMsa0JBQW9CRCxhQUFpQkUsaUJBQ3hEVixFQUFLL0csWUFBWXVILEVBQU1HLFdBQVUsSUFFakNYLEVBQUsvRyxZQUFZdUgsRUFDbkIsR0FFSixHQVFJZixFQUFXLENBQUNPLEVBQU10RCxLQUN0QixJQUFLQSxFQUNILE9BQU8sRUFFVCxNQUFNa0UsRUFBWWxFLEVBQVVtRSxNQUFNLE9BQ2xDLElBQUssSUFBSTNMLEVBQUksRUFBR0EsRUFBSTBMLEVBQVU1TCxPQUFRRSxJQUNwQyxJQUFLOEssRUFBS1ksVUFBVUUsU0FBU0YsRUFBVTFMLElBQ3JDLE9BQU8sRUFHWCxPQUFPLENBQUksRUFvQlA2TCxFQUFtQixDQUFDZixFQUFNZ0IsRUFBUXRFLEtBRXRDLEdBZjBCLEVBQUNzRCxFQUFNZ0IsS0FDakN6QyxNQUFNQyxLQUFLd0IsRUFBS1ksV0FBV0wsU0FBUTdELElBQzVCdUUsT0FBT0MsT0FBT3ZHLEdBQWFnQixTQUFTZSxJQUFldUUsT0FBT0MsT0FBT3RHLEdBQVdlLFNBQVNlLElBQWV1RSxPQUFPQyxPQUFPRixFQUFPRyxXQUFXeEYsU0FBU2UsSUFDaEpzRCxFQUFLWSxVQUFVaEosT0FBTzhFLEVBQ3hCLEdBQ0EsRUFTRjBFLENBQW9CcEIsRUFBTWdCLEdBQ3RCQSxFQUFPSyxhQUFlTCxFQUFPSyxZQUFZM0UsR0FBWSxDQUN2RCxHQUE2QyxpQkFBbENzRSxFQUFPSyxZQUFZM0UsS0FBNEJzRSxFQUFPSyxZQUFZM0UsR0FBVzZELFFBRXRGLFlBREFwRixFQUFLLCtCQUErQnVCLHNEQUE4RHNFLEVBQU9LLFlBQVkzRSxPQUd2SDRFLEVBQVN0QixFQUFNZ0IsRUFBT0ssWUFBWTNFLEdBQ3BDLEdBUUk2RSxFQUFhLENBQUMzRSxFQUFPNEUsS0FDekIsSUFBS0EsRUFDSCxPQUFPLEtBRVQsT0FBUUEsR0FDTixJQUFLLFNBQ0wsSUFBSyxXQUNMLElBQUssT0FDSCxPQUFPNUUsRUFBTW5FLGNBQWMsSUFBSWtDLEVBQVlpQyxZQUFZakMsRUFBWTZHLE1BQ3JFLElBQUssV0FDSCxPQUFPNUUsRUFBTW5FLGNBQWMsSUFBSWtDLEVBQVlpQyxZQUFZakMsRUFBWThHLGtCQUNyRSxJQUFLLFFBQ0gsT0FBTzdFLEVBQU1uRSxjQUFjLElBQUlrQyxFQUFZaUMsWUFBWWpDLEVBQVkrRyx3QkFBMEI5RSxFQUFNbkUsY0FBYyxJQUFJa0MsRUFBWWlDLFlBQVlqQyxFQUFZK0csMkJBQzNKLElBQUssUUFDSCxPQUFPOUUsRUFBTW5FLGNBQWMsSUFBSWtDLEVBQVlpQyxZQUFZakMsRUFBWWdILGVBQ3JFLFFBQ0UsT0FBTy9FLEVBQU1uRSxjQUFjLElBQUlrQyxFQUFZaUMsWUFBWWpDLEVBQVlpSCxTQUN2RSxFQU1JQyxFQUFhRCxJQUlqQixHQUhBQSxFQUFNRSxRQUdhLFNBQWZGLEVBQU1HLEtBQWlCLENBRXpCLE1BQU1DLEVBQU1KLEVBQU1LLE1BQ2xCTCxFQUFNSyxNQUFRLEdBQ2RMLEVBQU1LLE1BQVFELENBQ2hCLEdBUUlFLEVBQWMsQ0FBQzVKLEVBQVFzSSxFQUFXdUIsS0FDakM3SixHQUFXc0ksSUFHUyxpQkFBZEEsSUFDVEEsRUFBWUEsRUFBVUMsTUFBTSxPQUFPM0IsT0FBT2tELFVBRTVDeEIsRUFBVUwsU0FBUTdELElBQ1o2QixNQUFNOEQsUUFBUS9KLEdBQ2hCQSxFQUFPaUksU0FBUVAsSUFDYm1DLEVBQVluQyxFQUFLWSxVQUFVMEIsSUFBSTVGLEdBQWFzRCxFQUFLWSxVQUFVaEosT0FBTzhFLEVBQVUsSUFHOUV5RixFQUFZN0osRUFBT3NJLFVBQVUwQixJQUFJNUYsR0FBYXBFLEVBQU9zSSxVQUFVaEosT0FBTzhFLEVBQ3hFLElBQ0EsRUFPRTRFLEVBQVcsQ0FBQ2hKLEVBQVFzSSxLQUN4QnNCLEVBQVk1SixFQUFRc0ksR0FBVyxFQUFLLEVBT2hDMkIsRUFBYyxDQUFDakssRUFBUXNJLEtBQzNCc0IsRUFBWTVKLEVBQVFzSSxHQUFXLEVBQU0sRUFVakM0QixFQUF3QixDQUFDeEMsRUFBTXRELEtBQ25DLE1BQU0rRixFQUFXbEUsTUFBTUMsS0FBS3dCLEVBQUt5QyxVQUNqQyxJQUFLLElBQUl2TixFQUFJLEVBQUdBLEVBQUl1TixFQUFTek4sT0FBUUUsSUFBSyxDQUN4QyxNQUFNc0wsRUFBUWlDLEVBQVN2TixHQUN2QixHQUFJc0wsYUFBaUJrQyxhQUFlakQsRUFBU2UsRUFBTzlELEdBQ2xELE9BQU84RCxDQUVYLEdBUUltQyxFQUFzQixDQUFDM0MsRUFBTTRDLEVBQVVYLEtBQ3ZDQSxJQUFVLEdBQUduRCxTQUFTbUQsT0FDeEJBLEVBQVFuRCxTQUFTbUQsSUFFZkEsR0FBNkIsSUFBcEJuRCxTQUFTbUQsR0FDcEJqQyxFQUFLM0gsTUFBTXVLLEdBQTZCLGlCQUFWWCxFQUFxQixHQUFHQSxNQUFZQSxFQUVsRWpDLEVBQUszSCxNQUFNd0ssZUFBZUQsRUFDNUIsRUFPSUUsRUFBTyxTQUFVOUMsR0FDckIsSUFBSStDLEVBQVVDLFVBQVVoTyxPQUFTLFFBQXNCUSxJQUFqQndOLFVBQVUsR0FBbUJBLFVBQVUsR0FBSyxPQUNsRmhELEVBQUszSCxNQUFNMEssUUFBVUEsQ0FDdkIsRUFLTUUsRUFBT2pELElBQ1hBLEVBQUszSCxNQUFNMEssUUFBVSxNQUFNLEVBU3ZCRyxFQUFXLENBQUNDLEVBQVFDLEVBQVVSLEVBQVVYLEtBRTVDLE1BQU05QyxFQUFLZ0UsRUFBTzFLLGNBQWMySyxHQUM1QmpFLElBQ0ZBLEVBQUc5RyxNQUFNdUssR0FBWVgsRUFDdkIsRUFRSW9CLEVBQVMsU0FBVXJELEVBQU1tQyxHQUU3QkEsRUFBWVcsRUFBSzlDLEVBREhnRCxVQUFVaE8sT0FBUyxRQUFzQlEsSUFBakJ3TixVQUFVLEdBQW1CQSxVQUFVLEdBQUssUUFDaERDLEVBQUtqRCxFQUN6QyxFQVFNVCxFQUFjUyxNQUFXQSxLQUFTQSxFQUFLc0QsYUFBZXRELEVBQUt1RCxjQUFnQnZELEVBQUt3RCxpQkFBaUJ4TyxTQVdqR3lPLEVBQWV6RCxNQUFXQSxFQUFLMEQsYUFBZTFELEVBQUsyRCxjQVFuREMsRUFBa0I1RCxJQUN0QixNQUFNM0gsRUFBUUssT0FBT21MLGlCQUFpQjdELEdBQ2hDOEQsRUFBZUMsV0FBVzFMLEVBQU0yTCxpQkFBaUIsdUJBQXlCLEtBQzFFQyxFQUFnQkYsV0FBVzFMLEVBQU0yTCxpQkFBaUIsd0JBQTBCLEtBQ2xGLE9BQU9GLEVBQWUsR0FBS0csRUFBZ0IsQ0FBQyxFQU94Q0MsRUFBMEIsU0FBVUMsR0FDeEMsSUFBSUMsRUFBUXBCLFVBQVVoTyxPQUFTLFFBQXNCUSxJQUFqQndOLFVBQVUsSUFBbUJBLFVBQVUsR0FDM0UsTUFBTXFCLEVBQW1CbkcsSUFDckJxQixFQUFZOEUsS0FDVkQsSUFDRkMsRUFBaUJoTSxNQUFNaU0sV0FBYSxPQUNwQ0QsRUFBaUJoTSxNQUFNa00sTUFBUSxRQUVqQ0MsWUFBVyxLQUNUSCxFQUFpQmhNLE1BQU1pTSxXQUFhLFNBQVNILEVBQVEsY0FDckRFLEVBQWlCaE0sTUFBTWtNLE1BQVEsSUFBSSxHQUNsQyxJQUVQLEVBY01FLEdBQWMsQ0FBQyxFQWdCZkMsR0FBdUJDLEdBQ3BCLElBQUkxSSxTQUFRQyxJQUNqQixJQUFLeUksRUFDSCxPQUFPekksSUFFVCxNQUFNMEksRUFBSWxNLE9BQU9tTSxRQUNYQyxFQUFJcE0sT0FBT3FNLFFBQ2pCTixHQUFZTyxvQkFBc0JSLFlBQVcsS0FyQjNDQyxHQUFZUSxpQ0FBaUN2QyxhQUMvQytCLEdBQVlRLHNCQUFzQm5ELFFBQ2xDMkMsR0FBWVEsc0JBQXdCLE1BQzNCek0sU0FBUzZELE1BQ2xCN0QsU0FBUzZELEtBQUt5RixRQW1CWjVGLEdBQVMsR0E1QmUsS0ErQjFCeEQsT0FBT3dNLFNBQVNOLEVBQUdFLEVBQUUsSUFTbkJLLEdBQVksSUFBd0Isb0JBQVh6TSxRQUE4QyxvQkFBYkYsU0FFMUQ0TSxHQUFZLDRCQUNLekssRUFBWXFDLDRCQUE0QnJDLEVBQVksNkJBQTZCQSxFQUFZaUMsMERBQ3BGakMsRUFBWXlELG1DQUM5QnpELEVBQVksNENBQ1hBLEVBQVltQyxnQ0FDWm5DLEVBQVl3Qyw0QkFDYnhDLEVBQVlxQyxjQUFjckMsRUFBWXFDLGdDQUNyQ3JDLEVBQVksMEJBQTBCQSxFQUFZLCtDQUNoREEsRUFBWWlILDJDQUNBakgsRUFBWTBLLDRCQUMxQjFLLEVBQVlnSCw4RkFJVGhILEVBQVkySyxxQ0FDZjNLLEVBQVkrRyxpQ0FDWi9HLEVBQVk4RyxvQkFBb0I5RyxFQUFZOEcsaUVBRXpDOUcsRUFBWTRLLG9EQUVWNUssRUFBWTZLLHlDQUNqQjdLLEVBQVksOEJBQThCQSxFQUFZLGlEQUN0REEsRUFBWTRDLCtCQUNWNUMsRUFBWW1ELHFEQUNLbkQsRUFBWTZDLHlEQUNaN0MsRUFBWWlELHNEQUNaakQsRUFBWStDLGdEQUUvQi9DLEVBQVlzRCxrQ0FDWnRELEVBQVksdURBQ1ZBLEVBQVksc0RBRzdCOEssUUFBUSxhQUFjLElBY2hCQyxHQUEyQixLQUMvQmpCLEdBQVlrQixnQkFBZ0JDLHdCQUF3QixFQTZEaERDLEdBQU83RSxJQUVYLE1BQU04RSxFQXpFa0IsTUFDeEIsTUFBTUMsRUFBZTNKLElBQ3JCLFFBQUsySixJQUdMQSxFQUFhbk8sU0FDYjJLLEVBQVksQ0FBQy9KLFNBQVN3TixnQkFBaUJ4TixTQUFTNkQsTUFBTyxDQUFDMUIsRUFBWSxlQUFnQkEsRUFBWSxlQUFnQkEsRUFBWSxpQkFDckgsRUFBSSxFQWtFaUJzTCxHQUc1QixHQUFJZCxLQUVGLFlBREE3SixFQUFNLCtDQUdSLE1BQU1nQixFQUFZOUQsU0FBU1csY0FBYyxPQUN6Q21ELEVBQVVJLFVBQVkvQixFQUFZMkIsVUFDOUJ3SixHQUNGeEUsRUFBU2hGLEVBQVczQixFQUFZLGtCQUVsQ29GLEVBQWF6RCxFQUFXOEksSUFDeEIsTUFBTWMsRUEzQ3NDLGlCQUE1QjVOLEVBMkNnQjBJLEVBQU8xSSxRQTNDZ0JFLFNBQVNDLGNBQWNILEdBQVVBLEVBQXhFQSxNQTRDaEI0TixFQUFjak4sWUFBWXFELEdBdkNEMEUsS0FDekIsTUFBTXBFLEVBQVFELElBQ2RDLEVBQU1wRCxhQUFhLE9BQVF3SCxFQUFPcEIsTUFBUSxRQUFVLFVBQ3BEaEQsRUFBTXBELGFBQWEsWUFBYXdILEVBQU9wQixNQUFRLFNBQVcsYUFDckRvQixFQUFPcEIsT0FDVmhELEVBQU1wRCxhQUFhLGFBQWMsT0FDbkMsRUFrQ0EyTSxDQUFtQm5GLEdBNUJKa0YsS0FDMEMsUUFBckR4TixPQUFPbUwsaUJBQWlCcUMsR0FBZUUsV0FDekM5RSxFQUFTbEYsSUFBZ0J6QixFQUFZMEwsSUFDdkMsRUEwQkFDLENBQVNKLEdBN0VxQixNQUM5QixNQUFNdEosRUFBUUQsSUFDUmlGLEVBQVFZLEVBQXNCNUYsRUFBT2pDLEVBQVlpSCxPQUNqRHlELEVBQU83QyxFQUFzQjVGLEVBQU9qQyxFQUFZMEssTUFFaEQxRCxFQUFRL0UsRUFBTW5FLGNBQWMsSUFBSWtDLEVBQVlnSCxlQUU1QzRFLEVBQWMzSixFQUFNbkUsY0FBYyxJQUFJa0MsRUFBWWdILGdCQUNsRDJELEVBQVM5QyxFQUFzQjVGLEVBQU9qQyxFQUFZMkssUUFFbEQ3RCxFQUFXN0UsRUFBTW5FLGNBQWMsSUFBSWtDLEVBQVk4RyxrQkFDL0MrRCxFQUFXaEQsRUFBc0I1RixFQUFPakMsRUFBWTZLLFVBQzFENUQsRUFBTTRFLFFBQVVkLEdBQ2hCTCxFQUFLb0IsU0FBV2YsR0FDaEJKLEVBQU9tQixTQUFXZixHQUNsQmpFLEVBQVNnRixTQUFXZixHQUNwQkYsRUFBU2dCLFFBQVVkLEdBQ25CL0QsRUFBTTZFLFFBQVUsS0FDZGQsS0FDQWEsRUFBWXRFLE1BQVFOLEVBQU1NLEtBQUssRUFFakNOLEVBQU04RSxTQUFXLEtBQ2ZmLEtBQ0FhLEVBQVl0RSxNQUFRTixFQUFNTSxLQUFLLENBQ2hDLEVBc0REeUUsRUFBeUIsRUFPckJDLEdBQXVCLENBQUNDLEVBQU90TyxLQUUvQnNPLGFBQWlCbEUsWUFDbkJwSyxFQUFPVyxZQUFZMk4sR0FJSyxpQkFBVkEsRUFDZEMsR0FBYUQsRUFBT3RPLEdBSWJzTyxHQUNQN0csRUFBYXpILEVBQVFzTyxFQUN2QixFQU9JQyxHQUFlLENBQUNELEVBQU90TyxLQUV2QnNPLEVBQU1FLE9BQ1JDLEdBQWlCek8sRUFBUXNPLEdBS3pCN0csRUFBYXpILEVBQVFzTyxFQUFNblMsV0FDN0IsRUFPSXNTLEdBQW1CLENBQUN6TyxFQUFRMEgsS0FFaEMsR0FEQTFILEVBQU80SCxZQUFjLEdBQ2pCLEtBQUtGLEVBQ1AsSUFBSyxJQUFJOUssRUFBSSxFQUFJQSxLQUFLOEssRUFBTzlLLElBQzNCb0QsRUFBT1csWUFBWStHLEVBQUs5SyxHQUFHeUwsV0FBVSxTQUd2Q3JJLEVBQU9XLFlBQVkrRyxFQUFLVyxXQUFVLEdBQ3BDLEVBTUlxRyxHQUFvQixNQUd4QixHQUFJN0IsS0FDRixPQUFPLEVBRVQsTUFBTThCLEVBQVN6TyxTQUFTVyxjQUFjLE9BQ2hDK04sRUFBcUIsQ0FDekJDLGdCQUFpQixxQkFFakJDLFVBQVcsZ0JBR2IsSUFBSyxNQUFNbFMsS0FBS2dTLEVBQ2QsR0FBSWpHLE9BQU9vRyxVQUFVQyxlQUFlQyxLQUFLTCxFQUFvQmhTLFNBQWlDLElBQXBCK1IsRUFBTzVPLE1BQU1uRCxHQUNyRixPQUFPZ1MsRUFBbUJoUyxHQUc5QixPQUFPLENBQ1IsRUFuQnlCLEdBd0NwQnNTLEdBQWdCLENBQUNDLEVBQVV6RyxLQUMvQixNQUFNekQsRUFBVVEsSUFDVkQsRUFBU0QsSUFHVm1ELEVBQU8wRyxtQkFBc0IxRyxFQUFPMkcsZ0JBQW1CM0csRUFBTzRHLGlCQUdqRTlFLEVBQUt2RixHQUZMMEYsRUFBSzFGLEdBTVB3RCxFQUFpQnhELEVBQVN5RCxFQUFRLFdBZXBDLFNBQXVCekQsRUFBU08sRUFBUWtELEdBQ3RDLE1BQU02RyxFQUFnQnZLLElBQ2hCd0ssRUFBYW5LLElBQ2JvSyxFQUFldEssSUFHckJ1SyxHQUFhSCxFQUFlLFVBQVc3RyxHQUN2Q2dILEdBQWFGLEVBQVksT0FBUTlHLEdBQ2pDZ0gsR0FBYUQsRUFBYyxTQUFVL0csR0FvQnZDLFNBQThCNkcsRUFBZUMsRUFBWUMsRUFBYy9HLEdBQ2hFQSxFQUFPaUgsZ0JBSVozRyxFQUFTLENBQUN1RyxFQUFlQyxFQUFZQyxHQUFlcE4sRUFBWXVOLFFBRzVEbEgsRUFBT21ILHFCQUNUTixFQUFjeFAsTUFBTStQLGdCQUFrQnBILEVBQU9tSCxtQkFDN0M3RyxFQUFTdUcsRUFBZWxOLEVBQVkscUJBRWxDcUcsRUFBT3FILGtCQUNUUCxFQUFXelAsTUFBTStQLGdCQUFrQnBILEVBQU9xSCxnQkFDMUMvRyxFQUFTd0csRUFBWW5OLEVBQVkscUJBRS9CcUcsRUFBT3NILG9CQUNUUCxFQUFhMVAsTUFBTStQLGdCQUFrQnBILEVBQU9zSCxrQkFDNUNoSCxFQUFTeUcsRUFBY3BOLEVBQVksc0JBaEJuQzRILEVBQVksQ0FBQ3NGLEVBQWVDLEVBQVlDLEdBQWVwTixFQUFZdU4sT0FrQnZFLENBdkNFSyxDQUFxQlYsRUFBZUMsRUFBWUMsRUFBYy9HLEdBQzFEQSxFQUFPd0gsaUJBQ0x4SCxFQUFPcEIsT0FDVHJDLEVBQVFrTCxhQUFhVixFQUFjRixHQUNuQ3RLLEVBQVFrTCxhQUFhWCxFQUFZRCxLQUVqQ3RLLEVBQVFrTCxhQUFhVixFQUFjakssR0FDbkNQLEVBQVFrTCxhQUFhWCxFQUFZaEssR0FDakNQLEVBQVFrTCxhQUFhWixFQUFlL0osSUFHMUMsQ0FoQ0U0SyxDQUFjbkwsRUFBU08sRUFBUWtELEdBRy9CakIsRUFBYWpDLEVBQVFrRCxFQUFPMkgsWUFDNUI1SCxFQUFpQmpELEVBQVFrRCxFQUFRLFNBQVMsRUErRDVDLFNBQVNnSCxHQUFhWSxFQUFRQyxFQUFZN0gsR0FDeENxQyxFQUFPdUYsRUFBUTVILEVBQU8sT0FBT2xHLEVBQXNCK04sWUFBc0IsZ0JBQ3pFOUksRUFBYTZJLEVBQVE1SCxFQUFPLEdBQUc2SCxnQkFDL0JELEVBQU9wUCxhQUFhLGFBQWN3SCxFQUFPLEdBQUc2SCxxQkFHNUNELEVBQU9sTSxVQUFZL0IsRUFBWWtPLEdBQy9COUgsRUFBaUI2SCxFQUFRNUgsRUFBUSxHQUFHNkgsV0FDcEN2SCxFQUFTc0gsRUFBUTVILEVBQU8sR0FBRzZILGdCQUM3QixDQU1BLE1BY01DLEdBQWtCLENBQUNyQixFQUFVekcsS0FDakMsTUFBTTFFLEVBQVlGLElBQ2JFLElBZVAsU0FBNkJBLEVBQVd5TSxHQUNkLGlCQUFiQSxFQUNUek0sRUFBVWpFLE1BQU0yUSxXQUFhRCxFQUNuQkEsR0FDVnpILEVBQVMsQ0FBQzlJLFNBQVN3TixnQkFBaUJ4TixTQUFTNkQsTUFBTzFCLEVBQVksZUFFcEUsQ0FsQkVzTyxDQUFvQjNNLEVBQVcwRSxFQUFPK0gsVUF3QnhDLFNBQTZCek0sRUFBVzRNLEdBQ2xDQSxLQUFZdk8sRUFDZDJHLEVBQVNoRixFQUFXM0IsRUFBWXVPLEtBRWhDL04sRUFBSyxpRUFDTG1HLEVBQVNoRixFQUFXM0IsRUFBWXdPLFFBRXBDLENBOUJFQyxDQUFvQjlNLEVBQVcwRSxFQUFPa0ksVUFvQ3hDLFNBQXlCNU0sRUFBVytNLEdBQ2xDLEdBQUlBLEdBQXdCLGlCQUFUQSxFQUFtQixDQUNwQyxNQUFNQyxFQUFZLFFBQVFELElBQ3RCQyxLQUFhM08sR0FDZjJHLEVBQVNoRixFQUFXM0IsRUFBWTJPLEdBRXBDLENBQ0YsQ0ExQ0VDLENBQWdCak4sRUFBVzBFLEVBQU9xSSxNQUdsQ3RJLEVBQWlCekUsRUFBVzBFLEVBQVEsYUFBWSxFQTRDbEQsTUFBTXdJLEdBQWUsQ0FBQyxRQUFTLE9BQVEsUUFBUyxTQUFVLFFBQVMsV0FBWSxZQWtDekVDLEdBQVl6SSxJQUNoQixJQUFLMEksR0FBZ0IxSSxFQUFPWSxPQUUxQixZQURBdEcsRUFBTSxxSkFBcUowRixFQUFPWSxVQUdwSyxNQUFNK0gsRUFBaUJDLEdBQWtCNUksRUFBT1ksT0FDMUNBLEVBQVE4SCxHQUFnQjFJLEVBQU9ZLE9BQU8rSCxFQUFnQjNJLEdBQzVEOEIsRUFBSzZHLEdBR0QzSSxFQUFPNkksZ0JBQ1RyRixZQUFXLEtBQ1QzQyxFQUFXRCxFQUFNLEdBRXJCLEVBbUJJeEksR0FBZ0IsQ0FBQ29JLEVBQVlzSSxLQUNqQyxNQUFNbEksRUFBUUwsRUFBVzVFLElBQVk2RSxHQUNyQyxHQUFLSSxFQUFMLENBZnVCQSxLQUN2QixJQUFLLElBQUkxTSxFQUFJLEVBQUdBLEVBQUkwTSxFQUFNdkksV0FBV3JFLE9BQVFFLElBQUssQ0FDaEQsTUFBTTZVLEVBQVduSSxFQUFNdkksV0FBV25FLEdBQUc4VSxLQUNoQyxDQUFDLE9BQVEsUUFBUyxTQUFTck8sU0FBU29PLElBQ3ZDbkksRUFBTXFJLGdCQUFnQkYsRUFFMUIsR0FZQUcsQ0FBaUJ0SSxHQUNqQixJQUFLLE1BQU11SSxLQUFRTCxFQUNqQmxJLEVBQU1wSSxhQUFhMlEsRUFBTUwsRUFBZ0JLLEdBSDNDLENBSUEsRUFNSUMsR0FBaUJwSixJQUNyQixNQUFNMkksRUFBaUJDLEdBQWtCNUksRUFBT1ksT0FDZCxpQkFBdkJaLEVBQU9LLGFBQ2hCQyxFQUFTcUksRUFBZ0IzSSxFQUFPSyxZQUFZTyxNQUM5QyxFQU9JeUksR0FBc0IsQ0FBQ3pJLEVBQU9aLEtBQzdCWSxFQUFNMEksY0FBZXRKLEVBQU91SixtQkFDL0IzSSxFQUFNMEksWUFBY3RKLEVBQU91SixpQkFDN0IsRUFRSUMsR0FBZ0IsQ0FBQzVJLEVBQU82SSxFQUFXekosS0FDdkMsR0FBSUEsRUFBTzBKLFdBQVksQ0FDckI5SSxFQUFNdk4sR0FBS3NHLEVBQVlpSCxNQUN2QixNQUFNMkQsRUFBUS9NLFNBQVNXLGNBQWMsU0FDL0J3UixFQUFhaFEsRUFBWSxlQUMvQjRLLEVBQU0vTCxhQUFhLE1BQU9vSSxFQUFNdk4sSUFDaENrUixFQUFNN0ksVUFBWWlPLEVBQ2dCLGlCQUF2QjNKLEVBQU9LLGFBQ2hCQyxFQUFTaUUsRUFBT3ZFLEVBQU9LLFlBQVlxSixZQUVyQ25GLEVBQU1xRixVQUFZNUosRUFBTzBKLFdBQ3pCRCxFQUFVSSxzQkFBc0IsY0FBZXRGLEVBQ2pELEdBT0lxRSxHQUFvQmtCLEdBQ2pCdEksRUFBc0I3RixJQUFZaEMsRUFBWW1RLElBQWNuUSxFQUFZaUgsT0FPM0VtSixHQUF3QixDQUFDbkosRUFBT29KLEtBQ2hDLENBQUMsU0FBVSxVQUFVclAsZ0JBQWdCcVAsR0FDdkNwSixFQUFNSyxNQUFRLEdBQUcrSSxJQUNQN08sRUFBVTZPLElBQ3BCN1AsRUFBSyx3RkFBd0Y2UCxLQUMvRixFQUlJdEIsR0FBa0IsQ0FBQyxFQU96QkEsR0FBZ0J1QixLQUFPdkIsR0FBZ0J3QixNQUFReEIsR0FBZ0J5QixTQUFXekIsR0FBZ0IwQixPQUFTMUIsR0FBZ0IyQixJQUFNM0IsR0FBZ0I0QixJQUFNLENBQUMxSixFQUFPWixLQUNySitKLEdBQXNCbkosRUFBT1osRUFBT2dLLFlBQ3BDUixHQUFjNUksRUFBT0EsRUFBT1osR0FDNUJxSixHQUFvQnpJLEVBQU9aLEdBQzNCWSxFQUFNRyxLQUFPZixFQUFPWSxNQUNiQSxHQVFUOEgsR0FBZ0JyRSxLQUFPLENBQUN6RCxFQUFPWixLQUM3QndKLEdBQWM1SSxFQUFPQSxFQUFPWixHQUM1QnFKLEdBQW9CekksRUFBT1osR0FDcEJZLEdBUVQ4SCxHQUFnQi9ILE1BQVEsQ0FBQ0EsRUFBT1gsS0FDOUIsTUFBTXVLLEVBQWE1SixFQUFNbEosY0FBYyxTQUNqQzhOLEVBQWM1RSxFQUFNbEosY0FBYyxVQUt4QyxPQUpBc1MsR0FBc0JRLEVBQVl2SyxFQUFPZ0ssWUFDekNPLEVBQVd4SixLQUFPZixFQUFPWSxNQUN6Qm1KLEdBQXNCeEUsRUFBYXZGLEVBQU9nSyxZQUMxQ1IsR0FBY2UsRUFBWTVKLEVBQU9YLEdBQzFCVyxDQUFLLEVBUWQrSCxHQUFnQnBFLE9BQVMsQ0FBQ0EsRUFBUXRFLEtBRWhDLEdBREFzRSxFQUFPcEYsWUFBYyxHQUNqQmMsRUFBT3VKLGlCQUFrQixDQUMzQixNQUFNRCxFQUFjOVIsU0FBU1csY0FBYyxVQUMzQzRHLEVBQWF1SyxFQUFhdEosRUFBT3VKLGtCQUNqQ0QsRUFBWXJJLE1BQVEsR0FDcEJxSSxFQUFZa0IsVUFBVyxFQUN2QmxCLEVBQVltQixVQUFXLEVBQ3ZCbkcsRUFBT3JNLFlBQVlxUixFQUNyQixDQUVBLE9BREFFLEdBQWNsRixFQUFRQSxFQUFRdEUsR0FDdkJzRSxDQUFNLEVBT2ZvRSxHQUFnQmhJLE1BQVFBLElBQ3RCQSxFQUFNeEIsWUFBYyxHQUNid0IsR0FRVGdJLEdBQWdCakksU0FBVyxDQUFDaUssRUFBbUIxSyxLQUM3QyxNQUFNUyxFQUFXRixFQUFXNUUsSUFBWSxZQUN4QzhFLEVBQVNRLE1BQVEsSUFDakJSLEVBQVNwTixHQUFLc0csRUFBWThHLFNBQzFCQSxFQUFTa0ssUUFBVXZKLFFBQVFwQixFQUFPZ0ssWUFDbEMsTUFBTXpGLEVBQVFtRyxFQUFrQmpULGNBQWMsUUFFOUMsT0FEQXNILEVBQWF3RixFQUFPdkUsRUFBT3VKLGtCQUNwQjlJLENBQVEsRUFRakJpSSxHQUFnQmxFLFNBQVcsQ0FBQ0EsRUFBVXhFLEtBQ3BDK0osR0FBc0J2RixFQUFVeEUsRUFBT2dLLFlBQ3ZDWCxHQUFvQjdFLEVBQVV4RSxHQUM5QndKLEdBQWNoRixFQUFVQSxFQUFVeEUsR0EyQmxDLE9BbEJBd0QsWUFBVyxLQUVULEdBQUkscUJBQXNCOUwsT0FBUSxDQUNoQyxNQUFNa1QsRUFBb0I5TSxTQUFTcEcsT0FBT21MLGlCQUFpQmxILEtBQVk0SCxPQVN2RSxJQUFJc0gsa0JBUjBCLEtBQzVCLE1BQU1DLEVBQWdCdEcsRUFBU2xDLGFBUm5CbkUsRUFRMkNxRyxFQVJyQzFHLFNBQVNwRyxPQUFPbUwsaUJBQWlCMUUsR0FBSTRNLFlBQWNqTixTQUFTcEcsT0FBT21MLGlCQUFpQjFFLEdBQUk2TSxjQUE5RjdNLE1BVVZ4QyxJQUFXdEUsTUFBTWtNLE1BRGZ1SCxFQUFnQkYsRUFDTyxHQUFHRSxNQUVILElBQzNCLElBRTBDRyxRQUFRekcsRUFBVSxDQUM1RG5NLFlBQVksRUFDWjZTLGdCQUFpQixDQUFDLFVBRXRCLEtBRUsxRyxDQUFRLEVBT2pCLE1BQU0yRyxHQUFnQixDQUFDMUUsRUFBVXpHLEtBQy9CLE1BQU1vTCxFQUFnQm5QLElBQ3RCOEQsRUFBaUJxTCxFQUFlcEwsRUFBUSxpQkFHcENBLEVBQU9mLE1BQ1QwRyxHQUFxQjNGLEVBQU9mLEtBQU1tTSxHQUNsQ3RKLEVBQUtzSixFQUFlLFVBSWJwTCxFQUFPaUssTUFDZG1CLEVBQWNsTSxZQUFjYyxFQUFPaUssS0FDbkNuSSxFQUFLc0osRUFBZSxVQUtwQm5KLEVBQUttSixHQXJSVyxFQUFDM0UsRUFBVXpHLEtBQzdCLE1BQU1wRSxFQUFRRCxJQUNScEMsRUFBY0osRUFBYUksWUFBWThSLElBQUk1RSxHQUMzQzZFLEdBQVkvUixHQUFleUcsRUFBT1ksUUFBVXJILEVBQVlxSCxNQUM5RDRILEdBQWFqSixTQUFRaUIsSUFDbkIsTUFBTW1JLEVBQWlCbkgsRUFBc0I1RixFQUFPakMsRUFBWTZHLElBR2hFcEksR0FBY29JLEVBQVlSLEVBQU84SSxpQkFHakNILEVBQWVqTixVQUFZL0IsRUFBWTZHLEdBQ25DOEssR0FDRnJKLEVBQUswRyxFQUNQLElBRUUzSSxFQUFPWSxRQUNMMEssR0FDRjdDLEdBQVV6SSxHQUdab0osR0FBZXBKLEdBQ2pCLEVBaVFBdUwsQ0FBWTlFLEVBQVV6RyxFQUFPLEVBd0R6QndMLEdBQWMsQ0FBQzFQLEVBQU1rRSxLQUN6QixJQUFLLE1BQU15TCxLQUFZN1IsRUFDakJvRyxFQUFPbEUsT0FBUzJQLEdBQ2xCbEssRUFBWXpGLEVBQU1sQyxFQUFVNlIsSUFHaENuTCxFQUFTeEUsRUFBTWxDLEVBQVVvRyxFQUFPbEUsT0FHaEM0UCxHQUFTNVAsRUFBTWtFLEdBR2YyTCxLQUdBNUwsRUFBaUJqRSxFQUFNa0UsRUFBUSxPQUFPLEVBSWxDMkwsR0FBbUMsS0FDdkMsTUFBTS9QLEVBQVFELElBQ1JpUSxFQUF1QmxVLE9BQU9tTCxpQkFBaUJqSCxHQUFPb0gsaUJBQWlCLG9CQUV2RTZJLEVBQW1CalEsRUFBTTZCLGlCQUFpQiw0REFDaEQsSUFBSyxJQUFJdkosRUFBSSxFQUFHQSxFQUFJMlgsRUFBaUI3WCxPQUFRRSxJQUMzQzJYLEVBQWlCM1gsR0FBR21ELE1BQU0rUCxnQkFBa0J3RSxDQUM5QyxFQW1CSUUsR0FBYSxDQUFDaFEsRUFBTWtFLEtBQ3hCLElBQ0krTCxFQURBQyxFQUFhbFEsRUFBS21RLFVBRWxCak0sRUFBT2tNLFNBQ1RILEVBQWFJLEdBQVluTSxFQUFPa00sVUFDUCxZQUFoQmxNLEVBQU9sRSxNQUNoQmlRLEVBdkJvQixvU0F3QnBCQyxFQUFhQSxFQUFXdkgsUUFBUSxnQkFBaUIsS0FFakRzSCxFQUR5QixVQUFoQi9MLEVBQU9sRSxLQW5CRSxvSkEyQkxxUSxHQUxXLENBQ3RCQyxTQUFVLElBQ1ZDLFFBQVMsSUFDVEMsS0FBTSxLQUVpQ3RNLEVBQU9sRSxPQUU5Q2tRLEVBQVdPLFNBQVdSLEVBQVdRLFFBQ25DeE4sRUFBYWpELEVBQU1pUSxFQUNyQixFQU9JTCxHQUFXLENBQUM1UCxFQUFNa0UsS0FDdEIsR0FBS0EsRUFBT3dNLFVBQVosQ0FHQTFRLEVBQUt6RSxNQUFNb1YsTUFBUXpNLEVBQU93TSxVQUMxQjFRLEVBQUt6RSxNQUFNcVYsWUFBYzFNLEVBQU93TSxVQUNoQyxJQUFLLE1BQU1HLElBQU8sQ0FBQywwQkFBMkIsMkJBQTRCLDBCQUEyQiw0QkFDbkd6SyxFQUFTcEcsRUFBTTZRLEVBQUssa0JBQW1CM00sRUFBT3dNLFdBRWhEdEssRUFBU3BHLEVBQU0sc0JBQXVCLGNBQWVrRSxFQUFPd00sVUFONUQsQ0FNc0UsRUFPbEVMLEdBQWN0WSxHQUFXLGVBQWU4RixFQUFZLG9CQUFvQjlGLFVBbUV4RStZLEdBQWUsQ0FBQ2hSLEVBQU9vRSxLQUUzQnBFLEVBQU1GLFVBQVksR0FBRy9CLEVBQVlpQyxTQUFTMkMsRUFBWTNDLEdBQVNvRSxFQUFPRyxVQUFVdkUsTUFBUSxLQUNwRm9FLEVBQU9wQixPQUNUMEIsRUFBUyxDQUFDOUksU0FBU3dOLGdCQUFpQnhOLFNBQVM2RCxNQUFPMUIsRUFBWSxnQkFDaEUyRyxFQUFTMUUsRUFBT2pDLEVBQVlpRixRQUU1QjBCLEVBQVMxRSxFQUFPakMsRUFBWWtULE9BSTlCOU0sRUFBaUJuRSxFQUFPb0UsRUFBUSxTQUNFLGlCQUF2QkEsRUFBT0ssYUFDaEJDLEVBQVMxRSxFQUFPb0UsRUFBT0ssYUFJckJMLEVBQU9sRSxNQUNUd0UsRUFBUzFFLEVBQU9qQyxFQUFZLFFBQVFxRyxFQUFPbEUsUUFDN0MsRUFtQ0lnUixHQUFvQkMsSUFDeEIsTUFBTUMsRUFBU3hWLFNBQVNXLGNBQWMsTUFHdEMsT0FGQW1JLEVBQVMwTSxFQUFRclQsRUFBWSxrQkFDN0JvRixFQUFhaU8sRUFBUUQsR0FDZEMsQ0FBTSxFQU9UQyxHQUFvQmpOLElBQ3hCLE1BQU1rTixFQUFTMVYsU0FBU1csY0FBYyxNQUt0QyxPQUpBbUksRUFBUzRNLEVBQVF2VCxFQUFZLHVCQUN6QnFHLEVBQU9tTix1QkFDVHhMLEVBQW9CdUwsRUFBUSxRQUFTbE4sRUFBT21OLHVCQUV2Q0QsQ0FBTSxFQXlCVEUsR0FBUyxDQUFDM0csRUFBVXpHLEtBcElOLEVBQUN5RyxFQUFVekcsS0FDN0IsTUFBTTFFLEVBQVlGLElBQ1pRLEVBQVFELElBSVZxRSxFQUFPcEIsT0FDVCtDLEVBQW9CckcsRUFBVyxRQUFTMEUsRUFBT3VELE9BQy9DM0gsRUFBTXZFLE1BQU1rTSxNQUFRLE9BQ3BCM0gsRUFBTTZMLGFBQWE1SyxJQUFhaEIsTUFFaEM4RixFQUFvQi9GLEVBQU8sUUFBU29FLEVBQU91RCxPQUk3QzVCLEVBQW9CL0YsRUFBTyxVQUFXb0UsRUFBT3FOLFNBR3pDck4sRUFBT3lNLFFBQ1Q3USxFQUFNdkUsTUFBTW9WLE1BQVF6TSxFQUFPeU0sT0FJekJ6TSxFQUFPZ0ksYUFDVHBNLEVBQU12RSxNQUFNMlEsV0FBYWhJLEVBQU9nSSxZQUVsQy9GLEVBQUs1RixLQUdMdVEsR0FBYWhSLEVBQU9vRSxFQUFPLEVBd0czQnNOLENBQVk3RyxFQUFVekcsR0FDdEI4SCxHQUFnQnJCLEVBQVV6RyxHQXhFQSxFQUFDeUcsRUFBVXpHLEtBQ3JDLE1BQU11TixFQUF5Qm5SLElBQzFCNEQsRUFBT3dOLGVBQWlELElBQWhDeE4sRUFBT3dOLGNBQWN4WixRQUlsRDhOLEVBQUt5TCxHQUNMQSxFQUF1QnJPLFlBQWMsR0FDakNjLEVBQU95TixxQkFBdUJ6TixFQUFPd04sY0FBY3haLFFBQ3JEbUcsRUFBSyx5SUFFUDZGLEVBQU93TixjQUFjak8sU0FBUSxDQUFDd04sRUFBTWhXLEtBQ2xDLE1BQU1pVyxFQUFTRixHQUFrQkMsR0FLakMsR0FKQVEsRUFBdUJ0VixZQUFZK1UsR0FDL0JqVyxJQUFVaUosRUFBT3lOLHFCQUNuQm5OLEVBQVMwTSxFQUFRclQsRUFBWSx5QkFFM0I1QyxJQUFVaUosRUFBT3dOLGNBQWN4WixPQUFTLEVBQUcsQ0FDN0MsTUFBTWtaLEVBQVNELEdBQWtCak4sR0FDakN1TixFQUF1QnRWLFlBQVlpVixFQUNyQyxNQWpCQWpMLEVBQUtzTCxFQWtCTCxFQW9ERkcsQ0FBb0JqSCxFQUFVekcsR0FoU2IsRUFBQ3lHLEVBQVV6RyxLQUM1QixNQUFNekcsRUFBY0osRUFBYUksWUFBWThSLElBQUk1RSxHQUMzQzNLLEVBQU9ELElBR2IsR0FBSXRDLEdBQWV5RyxFQUFPbEUsT0FBU3ZDLEVBQVl1QyxLQUk3QyxPQUZBZ1EsR0FBV2hRLEVBQU1rRSxRQUNqQndMLEdBQVkxUCxFQUFNa0UsR0FHcEIsR0FBS0EsRUFBT2xFLE1BQVNrRSxFQUFPa00sU0FBNUIsQ0FJQSxHQUFJbE0sRUFBT2xFLE9BQXlELElBQWpEbUUsT0FBTzBOLEtBQUsvVCxHQUFXeUUsUUFBUTJCLEVBQU9sRSxNQUd2RCxPQUZBeEIsRUFBTSxvRkFBb0YwRixFQUFPbEUsY0FDakdtRyxFQUFLbkcsR0FHUGdHLEVBQUtoRyxHQUdMZ1EsR0FBV2hRLEVBQU1rRSxHQUNqQndMLEdBQVkxUCxFQUFNa0UsR0FHbEJNLEVBQVN4RSxFQUFNa0UsRUFBT0csVUFBVXJFLEtBYmhDLE1BRkVtRyxFQUFLbkcsRUFlOEIsRUFzUXJDOFIsQ0FBV25ILEVBQVV6RyxHQWpLSCxFQUFDeUcsRUFBVXpHLEtBQzdCLE1BQU03RCxFQUFRRCxJQUNUOEQsRUFBTzZOLFVBSVovTCxFQUFLM0YsRUFBTyxJQUdaQSxFQUFNM0QsYUFBYSxNQUFPd0gsRUFBTzZOLFVBQ2pDMVIsRUFBTTNELGFBQWEsTUFBT3dILEVBQU84TixVQUdqQ25NLEVBQW9CeEYsRUFBTyxRQUFTNkQsRUFBTytOLFlBQzNDcE0sRUFBb0J4RixFQUFPLFNBQVU2RCxFQUFPZ08sYUFHNUM3UixFQUFNVCxVQUFZL0IsRUFBWXdDLE1BQzlCNEQsRUFBaUI1RCxFQUFPNkQsRUFBUSxVQWY5QmlDLEVBQUs5RixFQWVpQyxFQWdKeEM4UixDQUFZeEgsRUFBVXpHLEdBdkJKLEVBQUN5RyxFQUFVekcsS0FDN0IsTUFBTWhFLEVBQVFELElBQ2RzRyxFQUFPckcsRUFBT2dFLEVBQU9oRSxPQUFTZ0UsRUFBT2tPLFVBQVcsU0FDNUNsTyxFQUFPaEUsT0FDVDJKLEdBQXFCM0YsRUFBT2hFLE1BQU9BLEdBRWpDZ0UsRUFBT2tPLFlBQ1RsUyxFQUFNNE4sVUFBWTVKLEVBQU9rTyxXQUkzQm5PLEVBQWlCL0QsRUFBT2dFLEVBQVEsUUFBUSxFQWF4Q21PLENBQVkxSCxFQUFVekcsR0ExcEJFLEVBQUN5RyxFQUFVekcsS0FDbkMsTUFBTW9PLEVBQWNqUixJQUNwQjRCLEVBQWFxUCxFQUFhcE8sRUFBT3FPLGlCQUdqQ3RPLEVBQWlCcU8sRUFBYXBPLEVBQVEsZUFDdENxQyxFQUFPK0wsRUFBYXBPLEVBQU9zTyxpQkFDM0JGLEVBQVk1VixhQUFhLGFBQWN3SCxFQUFPdU8scUJBQXFCLEVBb3BCbkVDLENBQWtCL0gsRUFBVXpHLEdBQzVCbUwsR0FBYzFFLEVBQVV6RyxHQUN4QndHLEdBQWNDLEVBQVV6RyxHQXJUTCxFQUFDeUcsRUFBVXpHLEtBQzlCLE1BQU0vQyxFQUFTRCxJQUNmcUYsRUFBT3BGLEVBQVErQyxFQUFPL0MsUUFDbEIrQyxFQUFPL0MsUUFDVDBJLEdBQXFCM0YsRUFBTy9DLE9BQVFBLEdBSXRDOEMsRUFBaUI5QyxFQUFRK0MsRUFBUSxTQUFTLEVBOFMxQ3lPLENBQWFoSSxFQUFVekcsR0FDUyxtQkFBckJBLEVBQU8wTyxXQUNoQjFPLEVBQU8wTyxVQUFVL1MsSUFDbkIsRUFNRixTQUFTZ1QsS0FFUCxNQUFNcFYsRUFBY0osRUFBYUksWUFBWThSLElBQUkzWCxNQUNqRCxJQUFLNkYsRUFDSCxPQUVGLE1BQU1DLEVBQVdMLEVBQWFLLFNBQVM2UixJQUFJM1gsTUFDM0N1TyxFQUFLekksRUFBU3NELFFBQ1Y2QixJQUNFcEYsRUFBWXVDLE1BQ2RnRyxFQUFLakcsS0FHUCtTLEdBQWtCcFYsR0FFcEIrSCxFQUFZLENBQUMvSCxFQUFTb0MsTUFBT3BDLEVBQVMrQyxTQUFVNUMsRUFBWWtWLFNBQzVEclYsRUFBU29DLE1BQU1xTixnQkFBZ0IsYUFDL0J6UCxFQUFTb0MsTUFBTXFOLGdCQUFnQixnQkFDL0J6UCxFQUFTcU4sY0FBYzJELFVBQVcsRUFDbENoUixFQUFTc04sV0FBVzBELFVBQVcsRUFDL0JoUixFQUFTdU4sYUFBYXlELFVBQVcsQ0FDbkMsQ0FDQSxNQUFNb0UsR0FBb0JwVixJQUN4QixNQUFNc1YsRUFBa0J0VixFQUFTb0MsTUFBTW1ULHVCQUF1QnZWLEVBQVNzRCxPQUFPaUIsYUFBYSwyQkFDdkYrUSxFQUFnQjlhLE9BQ2xCOE4sRUFBS2dOLEVBQWdCLEdBQUksaUJBOWxDTXZRLEVBQVlqQyxPQUF3QmlDLEVBQVk1QixPQUFxQjRCLEVBQVk5QixNQWdtQ2hId0YsRUFBS3pJLEVBQVMrQyxRQUNoQixFQXFCRixNQU9NeVMsR0FBZSxJQUFNMVMsS0FBc0JBLElBQW1CMlMsUUFZOURDLEdBQWdCalAsT0FBT2tQLE9BQU8sQ0FDbEN6UyxPQUFRLFNBQ1JxTCxTQUFVLFdBQ1YzSyxNQUFPLFFBQ1BnUyxJQUFLLE1BQ0xqTSxNQUFPLFVBTUhrTSxHQUF1QjVMLElBQ3ZCQSxFQUFZNkwsZUFBaUI3TCxFQUFZOEwsc0JBQzNDOUwsRUFBWTZMLGNBQWNFLG9CQUFvQixVQUFXL0wsRUFBWWdNLGVBQWdCLENBQ25GQyxRQUFTak0sRUFBWWtNLHlCQUV2QmxNLEVBQVk4TCxxQkFBc0IsRUFDcEMsRUEwQklLLEdBQVcsQ0FBQzdZLEVBQU84WSxLQUN2QixNQUFNQyxFQUFvQnpTLElBRTFCLEdBQUl5UyxFQUFrQjliLE9BWXBCLE9BWEErQyxHQUFnQjhZLEtBR0ZDLEVBQWtCOWIsT0FDOUIrQyxFQUFRLEdBR1ksSUFBWEEsSUFDVEEsRUFBUStZLEVBQWtCOWIsT0FBUyxRQUVyQzhiLEVBQWtCL1ksR0FBTytKLFFBSTNCbkYsSUFBV21GLE9BQU8sRUFFZGlQLEdBQXNCLENBQUMsYUFBYyxhQUNyQ0MsR0FBMEIsQ0FBQyxZQUFhLFdBT3hDUCxHQUFpQixDQUFDaEosRUFBVXdKLEVBQU9DLEtBQ3ZDLE1BQU0zVyxFQUFjSixFQUFhSSxZQUFZOFIsSUFBSTVFLEdBQzVDbE4sSUFRRDBXLEVBQU1FLGFBQWlDLE1BQWxCRixFQUFNRyxVQUczQjdXLEVBQVk4Vyx3QkFDZEosRUFBTUssa0JBSVUsVUFBZEwsRUFBTU0sSUFDUkMsR0FBWS9KLEVBQVV3SixFQUFPMVcsR0FJUixRQUFkMFcsRUFBTU0sSUFDYkUsR0FBVVIsR0FJSCxJQUFJRixNQUF3QkMsSUFBeUJyVixTQUFTc1YsRUFBTU0sS0FDM0VHLEdBQWFULEVBQU1NLEtBSUUsV0FBZE4sRUFBTU0sS0FDYkksR0FBVVYsRUFBTzFXLEVBQWEyVyxJQUNoQyxFQVFJTSxHQUFjLENBQUMvSixFQUFVd0osRUFBTzFXLEtBRXBDLEdBQUtxQixFQUFlckIsRUFBWXFYLGdCQUc1QlgsRUFBTTNZLFFBQVVtUCxFQUFTb0ssWUFBY1osRUFBTTNZLGtCQUFrQm9LLGFBQWV1TyxFQUFNM1ksT0FBT3daLFlBQWNySyxFQUFTb0ssV0FBV0MsVUFBVyxDQUMxSSxHQUFJLENBQUMsV0FBWSxRQUFRblcsU0FBU3BCLEVBQVlxSCxPQUM1QyxPQUdGb08sS0FDQWlCLEVBQU1jLGdCQUNSLEdBTUlOLEdBQVlSLElBQ2hCLE1BQU0vSyxFQUFnQitLLEVBQU0zWSxPQUN0QndZLEVBQW9CelMsSUFDMUIsSUFBSTJULEdBQVksRUFDaEIsSUFBSyxJQUFJOWMsRUFBSSxFQUFHQSxFQUFJNGIsRUFBa0I5YixPQUFRRSxJQUM1QyxHQUFJZ1IsSUFBa0I0SyxFQUFrQjViLEdBQUksQ0FDMUM4YyxFQUFXOWMsRUFDWCxLQUNGLENBSUcrYixFQUFNZ0IsU0FNVHJCLEdBQVNvQixHQUFXLEdBTHBCcEIsR0FBU29CLEVBQVUsR0FPckJmLEVBQU1LLGtCQUNOTCxFQUFNYyxnQkFBZ0IsRUFNbEJMLEdBQWVILElBQ25CLE1BSU1XLEVBQVUsQ0FKTTVVLElBQ0hLLElBQ0VGLEtBR3JCLEdBQUlqRixTQUFTMloseUJBQXlCelAsY0FBZ0J3UCxFQUFRdlcsU0FBU25ELFNBQVMyWixlQUM5RSxPQUVGLE1BQU1DLEVBQVVyQixHQUFvQnBWLFNBQVM0VixHQUFPLHFCQUF1Qix5QkFDM0UsSUFBSWMsRUFBZ0I3WixTQUFTMlosY0FDN0IsSUFBSyxJQUFJamQsRUFBSSxFQUFHQSxFQUFJNkksSUFBYTBFLFNBQVN6TixPQUFRRSxJQUFLLENBRXJELEdBREFtZCxFQUFnQkEsRUFBY0QsSUFDekJDLEVBQ0gsT0FFRixHQUFJQSxhQUF5QkMsbUJBQXFCL1MsRUFBWThTLEdBQzVELEtBRUosQ0FDSUEsYUFBeUJDLG1CQUMzQkQsRUFBY3ZRLE9BQ2hCLEVBUUk2UCxHQUFZLENBQUNWLEVBQU8xVyxFQUFhMlcsS0FDakN0VixFQUFlckIsRUFBWWdZLGtCQUM3QnRCLEVBQU1jLGlCQUNOYixFQUFZaEIsR0FBY0UsS0FDNUIsRUFhRixJQUFJb0MsR0FBaUIsQ0FDbkJDLG1CQUFvQixJQUFJcFksUUFDeEJxWSxrQkFBbUIsSUFBSXJZLFNBUXpCLE1BWU1zWSxHQUFrQixLQUNEcFUsTUFBTUMsS0FBS2hHLFNBQVM2RCxLQUFLb0csVUFDakNsQyxTQUFRcEIsSUFDZkEsRUFBR3lULGFBQWEsOEJBQ2xCelQsRUFBRzNGLGFBQWEsY0FBZTJGLEVBQUdKLGFBQWEsOEJBQy9DSSxFQUFHOEssZ0JBQWdCLDhCQUVuQjlLLEVBQUc4SyxnQkFBZ0IsY0FDckIsR0FDQSxFQXVCRTRJLEdBQWdDLEtBQ3BDLE1BQU1DLEVBQUtDLFVBQVVDLFVBQ2ZDLElBQVFILEVBQUdJLE1BQU0sWUFBY0osRUFBR0ksTUFBTSxXQUN4Q0MsSUFBV0wsRUFBR0ksTUFBTSxXQUUxQixHQURrQkQsR0FBT0UsSUFBV0wsRUFBR0ksTUFBTSxVQUM5QixDQUNiLE1BQU1FLEVBQW9CLEdBQ3RCelcsSUFBVytHLGFBQWVoTCxPQUFPMmEsWUFBY0QsSUFDakRoWCxJQUFlL0QsTUFBTWliLGNBQWdCLEdBQUdGLE1BRTVDLEdBTUlHLEdBQWlCLEtBQ3JCLE1BQU1qWCxFQUFZRixJQUNsQixJQUFJb1gsRUFJSmxYLEVBQVVtWCxhQUFleEMsSUFDdkJ1QyxFQUFtQkUsR0FBdUJ6QyxFQUFNLEVBS2xEM1UsRUFBVXFYLFlBQWMxQyxJQUNsQnVDLElBQ0Z2QyxFQUFNYyxpQkFDTmQsRUFBTUssa0JBQ1IsQ0FDRCxFQU9Hb0MsR0FBeUJ6QyxJQUM3QixNQUFNM1ksRUFBUzJZLEVBQU0zWSxPQUNmZ0UsRUFBWUYsSUFDbEIsUUFBSXdYLEdBQVMzQyxJQUFVNEMsR0FBTzVDLElBRzFCM1ksSUFBV2dFLElBR1ZtSCxFQUFhbkgsTUFBY2hFLGFBQWtCb0ssY0FBa0MsVUFBbkJwSyxFQUFPd2IsU0FFckQsYUFBbkJ4YixFQUFPd2IsU0FFTHJRLEVBQWF4RyxNQUVmQSxJQUFtQjZELFNBQVN4SSxJQUdoQixFQVNSc2IsR0FBVzNDLEdBQ1JBLEVBQU04QyxTQUFXOUMsRUFBTThDLFFBQVEvZSxRQUF5QyxXQUEvQmljLEVBQU04QyxRQUFRLEdBQUdDLFVBUzdESCxHQUFTNUMsR0FDTkEsRUFBTThDLFNBQVc5QyxFQUFNOEMsUUFBUS9lLE9BQVMsRUFXM0NpZixHQUFlLEtBRWdCLE9BQS9CcFUsRUFBT0MscUJBSVB0SCxTQUFTNkQsS0FBS3FILGFBQWVoTCxPQUFPMmEsY0FFdEN4VCxFQUFPQyxvQkFBc0JoQixTQUFTcEcsT0FBT21MLGlCQUFpQnJMLFNBQVM2RCxNQUFNMkgsaUJBQWlCLGtCQUM5RnhMLFNBQVM2RCxLQUFLaEUsTUFBTTZiLGFBQWUsR0FBR3JVLEVBQU9DLG9CQS9yQ3hCLE1BQ3ZCLE1BQU1xVSxFQUFZM2IsU0FBU1csY0FBYyxPQUN6Q2diLEVBQVV6WCxVQUFZL0IsRUFBWSxxQkFDbENuQyxTQUFTNkQsS0FBS3BELFlBQVlrYixHQUMxQixNQUFNQyxFQUFpQkQsRUFBVUUsd0JBQXdCOVAsTUFBUTRQLEVBQVVHLFlBRTNFLE9BREE5YixTQUFTNkQsS0FBS3hDLFlBQVlzYSxHQUNuQkMsQ0FBYyxFQXlyQ2dERyxPQUNyRSxFQWFGLFNBQVNDLEdBQXlCL00sRUFBVW5MLEVBQVdxSSxFQUFhOFAsR0FDOUQ5VSxJQUNGK1UsR0FBMEJqTixFQUFVZ04sSUFFcEMvUCxHQUFxQkMsR0FBYWdRLE1BQUssSUFBTUQsR0FBMEJqTixFQUFVZ04sS0FDakZwRSxHQUFxQjVMLEtBRU4saUNBQWlDbVEsS0FBSzdCLFVBQVVDLFlBSS9EMVcsRUFBVTlDLGFBQWEsUUFBUywyQkFDaEM4QyxFQUFVMk4sZ0JBQWdCLFNBQzFCM04sRUFBVTJRLFVBQVksSUFFdEIzUSxFQUFVMUUsU0FFUjRILE1BM0IrQixPQUEvQkssRUFBT0Msc0JBQ1R0SCxTQUFTNkQsS0FBS2hFLE1BQU02YixhQUFlLEdBQUdyVSxFQUFPQyx3QkFDN0NELEVBQU9DLG9CQUFzQixNQXhCZCxNQUNqQixHQUFJTCxFQUFTakgsU0FBUzZELEtBQU0xQixFQUFZa2EsUUFBUyxDQUMvQyxNQUFNQyxFQUFTaFcsU0FBU3RHLFNBQVM2RCxLQUFLaEUsTUFBTTBjLElBQUssSUFDakR4UyxFQUFZL0osU0FBUzZELEtBQU0xQixFQUFZa2EsUUFDdkNyYyxTQUFTNkQsS0FBS2hFLE1BQU0wYyxJQUFNLEdBQzFCdmMsU0FBUzZELEtBQUsyWSxXQUFzQixFQUFWRixDQUM1QixHQTZDRUcsR0FDQXRDLE1BS0ZwUSxFQUFZLENBQUMvSixTQUFTd04sZ0JBQWlCeE4sU0FBUzZELE1BQU8sQ0FBQzFCLEVBQVkrRSxNQUFPL0UsRUFBWSxlQUFnQkEsRUFBWSxlQUFnQkEsRUFBWSxnQkFGakosQ0FJQSxTQUFTeUQsR0FBTThXLEdBQ2JBLEVBQWVDLEdBQW9CRCxHQUNuQyxNQUFNekMsRUFBcUJELEdBQWVDLG1CQUFtQnBHLElBQUkzWCxNQUMzRCtmLEVBQVdXLEdBQWtCMWdCLE1BQy9CQSxLQUFLMmdCLG9CQUVGSCxFQUFhSSxjQUNoQkMsR0FBc0I3Z0IsTUFDdEIrZCxFQUFtQnlDLElBRVpULEdBRVRoQyxFQUFtQnlDLEVBRXZCLENBSUEsTUFBTUUsR0FBb0IzTixJQUN4QixNQUFNN0ssRUFBUUQsSUFDZCxJQUFLQyxFQUNILE9BQU8sRUFFVCxNQUFNckMsRUFBY0osRUFBYUksWUFBWThSLElBQUk1RSxHQUNqRCxJQUFLbE4sR0FBZWtGLEVBQVM3QyxFQUFPckMsRUFBWWliLFVBQVU1WSxPQUN4RCxPQUFPLEVBRVQyRixFQUFZM0YsRUFBT3JDLEVBQVk0RyxVQUFVdkUsT0FDekMwRSxFQUFTMUUsRUFBT3JDLEVBQVlpYixVQUFVNVksT0FDdEMsTUFBTW1NLEVBQVczTSxJQUlqQixPQUhBbUcsRUFBWXdHLEVBQVV4TyxFQUFZNEcsVUFBVTRILFVBQzVDekgsRUFBU3lILEVBQVV4TyxFQUFZaWIsVUFBVXpNLFVBQ3pDME0sR0FBcUJoTyxFQUFVN0ssRUFBT3JDLElBQy9CLENBQUksRUFVYixNQUFNZ2IsR0FBd0I5TixJQUN4QkEsRUFBUzROLHNCQUNYbGIsRUFBYUMsZ0JBQWdCc2IsT0FBT2pPLEdBRS9CdE4sRUFBYUksWUFBWThSLElBQUk1RSxJQUNoQ0EsRUFBU2tPLFdBRWIsRUFFSVIsR0FBc0JELFFBRUUsSUFBakJBLEVBQ0YsQ0FDTFUsYUFBYSxFQUNiQyxVQUFVLEVBQ1ZQLGFBQWEsR0FHVnJVLE9BQU82VSxPQUFPLENBQ25CRixhQUFhLEVBQ2JDLFVBQVUsRUFDVlAsYUFBYSxHQUNaSixHQUVDTyxHQUF1QixDQUFDaE8sRUFBVTdLLEVBQU9yQyxLQUM3QyxNQUFNK0IsRUFBWUYsSUFFWjJaLEVBQXVCL08sSUFBcUJwRCxFQUFnQmhILEdBQzdCLG1CQUExQnJDLEVBQVl5YixXQUNyQnpiLEVBQVl5YixVQUFVcFosR0FFcEJtWixFQUNGRSxHQUFheE8sRUFBVTdLLEVBQU9OLEVBQVcvQixFQUFZb0ssWUFBYXBLLEVBQVlrYSxVQUc5RUQsR0FBeUIvTSxFQUFVbkwsRUFBVy9CLEVBQVlvSyxZQUFhcEssRUFBWWthLFNBQ3JGLEVBRUl3QixHQUFlLENBQUN4TyxFQUFVN0ssRUFBT04sRUFBV3FJLEVBQWE4UCxLQUM3RGhRLEdBQVl5UiwrQkFBaUMxQixHQUF5QjJCLEtBQUssS0FBTTFPLEVBQVVuTCxFQUFXcUksRUFBYThQLEdBQ25IN1gsRUFBTXdaLGlCQUFpQnBQLElBQW1CLFNBQVVsTyxHQUM5Q0EsRUFBRVIsU0FBV3NFLElBQ2Y2SCxHQUFZeVIsd0NBQ0x6UixHQUFZeVIsK0JBRXZCLEdBQUUsRUFFRXhCLEdBQTRCLENBQUNqTixFQUFVZ04sS0FDM0NqUSxZQUFXLEtBQ2UsbUJBQWJpUSxHQUNUQSxFQUFTMEIsS0FBSzFPLEVBQVN6RyxPQUF2QnlULEdBRUZoTixFQUFTa08sVUFBVSxHQUNuQixFQVFKLFNBQVNVLEdBQW1CNU8sRUFBVXlLLEVBQVMxRyxHQUM3QyxNQUFNaFIsRUFBV0wsRUFBYUssU0FBUzZSLElBQUk1RSxHQUMzQ3lLLEVBQVEzUixTQUFRcUksSUFDZHBPLEVBQVNvTyxHQUFRNEMsU0FBV0EsQ0FBUSxHQUV4QyxDQU1BLFNBQVM4SyxHQUFpQjFVLEVBQU80SixHQUMvQixHQUFLNUosRUFHTCxHQUFtQixVQUFmQSxFQUFNRyxLQUFrQixDQUMxQixNQUNNd1UsRUFEa0IzVSxFQUFNaEksV0FBV0EsV0FDVjZFLGlCQUFpQixTQUNoRCxJQUFLLElBQUl2SixFQUFJLEVBQUdBLEVBQUlxaEIsRUFBT3ZoQixPQUFRRSxJQUNqQ3FoQixFQUFPcmhCLEdBQUdzVyxTQUFXQSxDQUV6QixNQUNFNUosRUFBTTRKLFNBQVdBLENBRXJCLENBcURBLE1BQU1nTCxHQUFnQixDQUNwQnhaLE1BQU8sR0FDUGtTLFVBQVcsR0FDWGpFLEtBQU0sR0FDTmhMLEtBQU0sR0FDTmhDLE9BQVEsR0FDUm5CLFVBQU10SCxFQUNOZ1ksZUFBV2hZLEVBQ1gwWCxjQUFVMVgsRUFDVmloQixjQUFVamhCLEVBQ1ZvSyxPQUFPLEVBQ1B1QixVQUFXLENBQ1R2RSxNQUFPLGFBQ1BtTSxTQUFVLHNCQUNWak0sS0FBTSxtQkFFUjBZLFVBQVcsQ0FDVDVZLE1BQU8sYUFDUG1NLFNBQVUsc0JBQ1ZqTSxLQUFNLG1CQUVSdUUsWUFBYSxDQUFDLEVBQ2QvSSxPQUFRLE9BQ1JtVixXQUFPalksRUFDUHVULFVBQVUsRUFDVjJOLFlBQVksRUFDWkMsbUJBQW1CLEVBQ25CcEUsZ0JBQWdCLEVBQ2hCWCxlQUFlLEVBQ2ZQLHdCQUF3QixFQUN4QlYsd0JBQXdCLEVBQ3hCakosbUJBQW1CLEVBQ25CQyxnQkFBZ0IsRUFDaEJDLGtCQUFrQixFQUNsQmdQLGdCQUFZcGhCLEVBQ1pxaEIsYUFBU3JoQixFQUNUc2hCLGtCQUFtQixLQUNuQkMsdUJBQXdCLEdBQ3hCNU8sd0JBQW9CM1MsRUFDcEJ3aEIsZUFBZ0IsS0FDaEJDLG9CQUFxQixHQUNyQjVPLHFCQUFpQjdTLEVBQ2pCMGhCLGlCQUFrQixTQUNsQkMsc0JBQXVCLEdBQ3ZCN08sdUJBQW1COVMsRUFDbkJ5UyxnQkFBZ0IsRUFDaEJPLGdCQUFnQixFQUNoQjRPLGNBQWMsRUFDZEMsV0FBVyxFQUNYQyxhQUFhLEVBQ2IzUyxhQUFhLEVBQ2IySyxpQkFBaUIsRUFDakJELGdCQUFpQixVQUNqQkUscUJBQXNCLG9CQUN0QjVHLFdBQVksR0FDWjRPLHFCQUFxQixFQUNyQkMsa0JBQWtCLEVBQ2xCM0ksY0FBVXJaLEVBQ1Z1WixnQkFBWXZaLEVBQ1p3WixpQkFBYXhaLEVBQ2JzWixTQUFVLEdBQ1YzSyxXQUFPM08sRUFDUDZPLGtCQUFrQixFQUNsQkUsV0FBTy9PLEVBQ1A2WSxhQUFTN1ksRUFDVHdULGdCQUFZeFQsRUFDWm9NLFdBQU9wTSxFQUNQK1UsaUJBQWtCLEdBQ2xCRyxXQUFZLEdBQ1pNLFdBQVksR0FDWnlNLGFBQWMsQ0FBQyxFQUNmNU4sZ0JBQWdCLEVBQ2hCNk4sZUFBZSxFQUNmNU4sZ0JBQWlCLENBQUMsRUFDbEI2TixvQkFBZ0JuaUIsRUFDaEJvaUIsd0JBQXdCLEVBQ3hCQyx1QkFBbUJyaUIsRUFDbkI2VCxNQUFNLEVBQ05ILFNBQVUsU0FDVnNGLGNBQWUsR0FDZkMseUJBQXFCalosRUFDckIyWSwyQkFBdUIzWSxFQUN2QnNpQixjQUFVdGlCLEVBQ1Z1aUIsYUFBU3ZpQixFQUNUa2EsZUFBV2xhLEVBQ1h3Z0IsZUFBV3hnQixFQUNYaWYsY0FBVWpmLEVBQ1Z3aUIsZ0JBQVl4aUIsRUFDWnlpQixrQkFBa0IsR0FFZEMsR0FBa0IsQ0FBQyxpQkFBa0Isb0JBQXFCLGFBQWMsaUJBQWtCLHdCQUF5QixvQkFBcUIsbUJBQW9CLHVCQUF3QixrQkFBbUIsUUFBUyx5QkFBMEIscUJBQXNCLG9CQUFxQixzQkFBdUIsY0FBZSxzQkFBdUIsa0JBQW1CLGlCQUFrQixXQUFZLGFBQWMsU0FBVSxZQUFhLE9BQVEsT0FBUSxZQUFhLFdBQVksV0FBWSxjQUFlLFdBQVksYUFBYyxhQUFjLFVBQVcsZ0JBQWlCLGNBQWUsaUJBQWtCLG1CQUFvQixrQkFBbUIsb0JBQXFCLGlCQUFrQixPQUFRLFFBQVMsWUFBYSxhQUM3ckJDLEdBQW1CLENBQUMsRUFDcEJDLEdBQTBCLENBQUMsb0JBQXFCLGdCQUFpQixXQUFZLGVBQWdCLFlBQWEsY0FBZSxjQUFlLGFBQWMsMEJBUXRKQyxHQUFtQkMsR0FDaEJyWCxPQUFPb0csVUFBVUMsZUFBZUMsS0FBS2lQLEdBQWU4QixHQVN2REMsR0FBdUJELElBQ29CLElBQXhDSixHQUFnQjdZLFFBQVFpWixHQVMzQkUsR0FBd0JGLEdBQ3JCSCxHQUFpQkcsR0FNcEJHLEdBQXNCN1IsSUFDckJ5UixHQUFpQnpSLElBQ3BCekwsRUFBSyxzQkFBc0J5TCxLQUM3QixFQU1JOFIsR0FBMkI5UixJQUMzQndSLEdBQXdCemMsU0FBU2lMLElBQ25DekwsRUFBSyxrQkFBa0J5TCxpQ0FDekIsRUFNSStSLEdBQTJCL1IsSUFDM0I0UixHQUFzQjVSLElBQ3hCcEwsRUFBcUJvTCxFQUFPNFIsR0FBc0I1UixHQUNwRCxFQWtERixNQUFNZ1MsR0FBb0I1WCxJQUN4QixNQUFNNlgsRUFBdUIsQ0FBQyxFQVE5QixPQVBBNVgsT0FBTzBOLEtBQUszTixHQUFRVCxTQUFRcUcsSUFDdEIyUixHQUFxQjNSLEdBQ3ZCaVMsRUFBcUJqUyxHQUFTNUYsRUFBTzRGLEdBRXJDekwsRUFBSyxnQ0FBZ0N5TCxJQUN2QyxJQUVLaVMsQ0FBb0IsRUE0QjdCLE1BQU1DLEdBQWNyUixJQUNsQnNSLEdBQWdCdFIsVUFHVEEsRUFBU3pHLGNBRVR5RCxHQUFZZ00sc0JBQ1poTSxHQUFZNkwscUJBRVo3TCxHQUFZa0IsZUFBZSxFQU05Qm9ULEdBQWtCdFIsSUFHbEJBLEVBQVM0TixxQkFDWDJELEdBQWM3ZSxFQUFjc04sR0FDNUJ0TixFQUFhQyxnQkFBZ0I2ZSxJQUFJeFIsR0FBVSxLQUUzQ3VSLEdBQWN4RyxHQUFnQi9LLEdBQzlCdVIsR0FBYzdlLEVBQWNzTixHQUM5QixFQU9JdVIsR0FBZ0IsQ0FBQ2hpQixFQUFLeVEsS0FDMUIsSUFBSyxNQUFNdlMsS0FBSzhCLEVBQ2RBLEVBQUk5QixHQUFHd2dCLE9BQU9qTyxFQUNoQixFQUdGLElBQUl5UixHQUErQmpZLE9BQU9rUCxPQUFPLENBQy9DZ0osVUFBVyxLQUNYeEosWUFBYUEsR0FDYnlKLGVBQWdCekosR0FDaEJrQyxTQXYzQkYsU0FBa0JwSyxHQUNoQixNQUFNbE4sRUFBY0osRUFBYUksWUFBWThSLElBQUk1RSxHQUFZL1MsTUFDdkQ4RixFQUFXTCxFQUFhSyxTQUFTNlIsSUFBSTVFLEdBQVkvUyxNQUN2RCxPQUFLOEYsRUFHRStHLEVBQVcvRyxFQUFTb0MsTUFBT3JDLEVBQVlxSCxPQUZyQyxJQUdYLEVBaTNCRXhELE1BQU9BLEdBQ1BpWCxrQkE1YkYsV0FDRSxRQUFTbGIsRUFBYUMsZ0JBQWdCaVMsSUFBSTNYLEtBQzVDLEVBMmJFMmtCLGNBemFGLFNBQXVCL2QsR0FDckIsTUFBTStkLEVBQWdCN0csR0FBZUUsa0JBQWtCckcsSUFBSTNYLE1BQzNENmdCLEdBQXNCN2dCLE1BQ2xCMmtCLEdBRUZBLEVBQWMvZCxFQUVsQixFQW1hRWlhLHNCQUF1QkEsR0FDdkIrRCxXQUFZbGIsR0FDWm1iLFdBQVluYixHQUNab2IsV0FBWXBiLEdBQ1pxYixjQWhWRixXQUNFcEQsR0FBbUIzaEIsS0FBTSxDQUFDLGdCQUFpQixhQUFjLGlCQUFpQixFQUM1RSxFQStVRWdsQixlQTlVRixXQUNFckQsR0FBbUIzaEIsS0FBTSxDQUFDLGdCQUFpQixhQUFjLGlCQUFpQixFQUM1RSxFQTZVRWlsQixZQTVVRixXQUNFckQsR0FBaUI1aEIsS0FBS21kLFlBQVksRUFDcEMsRUEyVUUrSCxhQTFVRixXQUNFdEQsR0FBaUI1aEIsS0FBS21kLFlBQVksRUFDcEMsRUF5VUVnSSxzQkFsVUYsU0FBK0J2ZSxHQUM3QixNQUFNZCxFQUFXTCxFQUFhSyxTQUFTNlIsSUFBSTNYLE1BQ3JDc00sRUFBUzdHLEVBQWFJLFlBQVk4UixJQUFJM1gsTUFDNUNxTCxFQUFhdkYsRUFBU3FkLGtCQUFtQnZjLEdBQ3pDZCxFQUFTcWQsa0JBQWtCbmIsVUFBWS9CLEVBQVksc0JBQy9DcUcsRUFBT0ssYUFBZUwsRUFBT0ssWUFBWXdXLG1CQUMzQ3ZXLEVBQVM5RyxFQUFTcWQsa0JBQW1CN1csRUFBT0ssWUFBWXdXLG1CQUUxRC9VLEVBQUt0SSxFQUFTcWQsbUJBQ2QsTUFBTWpXLEVBQVFsTixLQUFLbWQsV0FDZmpRLElBQ0ZBLEVBQU1wSSxhQUFhLGdCQUFnQixHQUNuQ29JLEVBQU1wSSxhQUFhLG1CQUFvQm1CLEVBQVksdUJBQ25Ea0gsRUFBV0QsR0FDWE4sRUFBU00sRUFBT2pILEVBQVltZixZQUVoQyxFQW1URWxVLHVCQTlTRixXQUNFLE1BQU1wTCxFQUFXTCxFQUFhSyxTQUFTNlIsSUFBSTNYLE1BQ3ZDOEYsRUFBU3FkLG1CQUNYNVUsRUFBS3pJLEVBQVNxZCxtQkFFaEIsTUFBTWpXLEVBQVFsTixLQUFLbWQsV0FDZmpRLElBQ0ZBLEVBQU1xSSxnQkFBZ0IsZ0JBQ3RCckksRUFBTXFJLGdCQUFnQixvQkFDdEIxSCxFQUFZWCxFQUFPakgsRUFBWW1mLFlBRW5DLEVBb1NFcGlCLE9BcEhGLFNBQWdCc0osR0FDZCxNQUFNcEUsRUFBUUQsSUFDUnBDLEVBQWNKLEVBQWFJLFlBQVk4UixJQUFJM1gsTUFDakQsSUFBS2tJLEdBQVM2QyxFQUFTN0MsRUFBT3JDLEVBQVlpYixVQUFVNVksT0FFbEQsWUFEQXpCLEVBQUssOElBR1AsTUFBTTBkLEVBQXVCRCxHQUFrQjVYLEdBQ3pDK1ksRUFBZ0I5WSxPQUFPNlUsT0FBTyxDQUFDLEVBQUd2YixFQUFhc2UsR0FDckR6SyxHQUFPMVosS0FBTXFsQixHQUNiNWYsRUFBYUksWUFBWTBlLElBQUl2a0IsS0FBTXFsQixHQUNuQzlZLE9BQU8rWSxpQkFBaUJ0bEIsS0FBTSxDQUM1QnNNLE9BQVEsQ0FDTmlCLE1BQU9oQixPQUFPNlUsT0FBTyxDQUFDLEVBQUdwaEIsS0FBS3NNLE9BQVFBLEdBQ3RDaVosVUFBVSxFQUNWQyxZQUFZLElBR2xCLEVBbUdFdkUsU0E5RUYsV0FDRSxNQUFNbmIsRUFBV0wsRUFBYUssU0FBUzZSLElBQUkzWCxNQUNyQzZGLEVBQWNKLEVBQWFJLFlBQVk4UixJQUFJM1gsTUFDNUM2RixHQU1EQyxFQUFTb0MsT0FBUzZILEdBQVl5UixpQ0FDaEN6UixHQUFZeVIsd0NBQ0x6UixHQUFZeVIsZ0NBRWlCLG1CQUEzQjNiLEVBQVl5ZCxZQUNyQnpkLEVBQVl5ZCxhQUVkYyxHQUFZcGtCLE9BWlZxa0IsR0FBZ0Jya0IsS0FhcEIsSUFzRUEsTUFBTXlsQixHQUFjckssSUFDbEIsSUFBSWxULEVBQVFELElBQ1BDLEdBQ0gsSUFBSXdkLEdBR054ZCxFQUFRRCxJQUNSLE1BQU1tQixFQUFTRCxJQUNYOEIsSUFDRnNELEVBQUtwRyxLQUVMd2QsR0FBY3pkLEVBQU9rVCxHQUV2QmhOLEVBQUtoRixHQUNMbEIsRUFBTXBELGFBQWEsZUFBZ0IsUUFDbkNvRCxFQUFNcEQsYUFBYSxZQUFhLFFBQ2hDb0QsRUFBTWtGLE9BQU8sRUFPVHVZLEdBQWdCLENBQUN6ZCxFQUFPa1QsS0FDNUIsTUFBTXZTLEVBQVVRLElBQ1ZELEVBQVNELEtBQ1ZpUyxHQUFtQnZRLEVBQVlqQyxPQUNsQ3dTLEVBQWtCeFMsS0FFcEJ3RixFQUFLdkYsR0FDRHVTLElBQ0Y3TSxFQUFLNk0sR0FDTGhTLEVBQU90RSxhQUFhLHlCQUEwQnNXLEVBQWdCcFQsWUFFaEVvQixFQUFPbEUsV0FBVzZPLGFBQWEzSyxFQUFRZ1MsR0FDdkN4TyxFQUFTLENBQUMxRSxFQUFPVyxHQUFVNUMsRUFBWWtWLFFBQVEsRUE4QzNDeUssR0FBbUIxWSxHQUFTQSxFQUFNK0osUUFBVSxFQUFJLEVBTWhENE8sR0FBZ0IzWSxHQUFTQSxFQUFNK0osUUFBVS9KLEVBQU1LLE1BQVEsS0FNdkR1WSxHQUFlNVksR0FBU0EsRUFBTTZZLE1BQU16bEIsT0FBNEMsT0FBbkM0TSxFQUFNN0MsYUFBYSxZQUF1QjZDLEVBQU02WSxNQUFRN1ksRUFBTTZZLE1BQU0sR0FBSyxLQU10SEMsR0FBcUIsQ0FBQ2pULEVBQVV6RyxLQUNwQyxNQUFNcEUsRUFBUUQsSUFJUmdlLEVBQXNCbEQsSUFDMUJtRCxHQUFxQjVaLEVBQU9ZLE9BQU9oRixFQUFPaWUsR0FBbUJwRCxHQUFlelcsRUFBTyxFQUVqRmxGLEVBQWVrRixFQUFPeVcsZUFBaUJ0YixFQUFVNkUsRUFBT3lXLGVBQzFEMEMsR0FBWTdjLEtBQ1p0QixFQUFVZ0YsRUFBT3lXLGNBQWM5QyxNQUFLOEMsSUFDbENoUSxFQUFTa0ksY0FDVGdMLEVBQW9CbEQsRUFBYSxLQUVLLGlCQUF4QnpXLEVBQU95VyxhQUN2QmtELEVBQW9CM1osRUFBT3lXLGNBRTNCbmMsRUFBTSxnRkFBZ0YwRixFQUFPeVcsYUFDL0YsRUFPSXFELEdBQW1CLENBQUNyVCxFQUFVekcsS0FDbEMsTUFBTVksRUFBUTZGLEVBQVNvSyxXQUN2QjVPLEVBQUtyQixHQUNMNUYsRUFBVWdGLEVBQU9nSyxZQUFZMkosTUFBSzNKLElBQ2hDcEosRUFBTUssTUFBeUIsV0FBakJqQixFQUFPWSxNQUFxQixHQUFHbUMsV0FBV2lILElBQWUsSUFBTSxHQUFHQSxJQUNoRmxJLEVBQUtsQixHQUNMQSxFQUFNRSxRQUNOMkYsRUFBU2tJLGFBQWEsSUFDckJvTCxPQUFNQyxJQUNQMWYsRUFBTSxnQ0FBZ0MwZixLQUN0Q3BaLEVBQU1LLE1BQVEsR0FDZGEsRUFBS2xCLEdBQ0xBLEVBQU1FLFFBQ04yRixFQUFTa0ksYUFBYSxHQUN0QixFQUVFaUwsR0FBdUIsQ0FNM0J0VixPQUFRLENBQUMxSSxFQUFPNmEsRUFBY3pXLEtBQzVCLE1BQU1zRSxFQUFTOUMsRUFBc0I1RixFQUFPakMsRUFBWTJLLFFBTWxEMlYsRUFBZSxDQUFDOVgsRUFBUStYLEVBQWFDLEtBQ3pDLE1BQU1DLEVBQVM1aUIsU0FBU1csY0FBYyxVQUN0Q2lpQixFQUFPblosTUFBUWtaLEVBQ2ZwYixFQUFhcWIsRUFBUUYsR0FDckJFLEVBQU8zUCxTQUFXNFAsR0FBV0YsRUFBYW5hLEVBQU9nSyxZQUNqRDdILEVBQU9sSyxZQUFZbWlCLEVBQU8sRUFFNUIzRCxFQUFhbFgsU0FBUSthLElBQ25CLE1BQU1ILEVBQWNHLEVBQVksR0FDMUJKLEVBQWNJLEVBQVksR0FLaEMsR0FBSS9jLE1BQU04RCxRQUFRNlksR0FBYyxDQUU5QixNQUFNSyxFQUFXL2lCLFNBQVNXLGNBQWMsWUFDeENvaUIsRUFBU2hXLE1BQVE0VixFQUNqQkksRUFBUy9QLFVBQVcsRUFDcEJsRyxFQUFPck0sWUFBWXNpQixHQUNuQkwsRUFBWTNhLFNBQVFpYixHQUFLUCxFQUFhTSxFQUFVQyxFQUFFLEdBQUlBLEVBQUUsS0FDMUQsTUFFRVAsRUFBYTNWLEVBQVE0VixFQUFhQyxFQUNwQyxJQUVGN1YsRUFBT3hELE9BQU8sRUFPaEJKLE1BQU8sQ0FBQzlFLEVBQU82YSxFQUFjelcsS0FDM0IsTUFBTVUsRUFBUWMsRUFBc0I1RixFQUFPakMsRUFBWStHLE9BQ3ZEK1YsRUFBYWxYLFNBQVErYSxJQUNuQixNQUFNRyxFQUFhSCxFQUFZLEdBQ3pCSSxFQUFhSixFQUFZLEdBQ3pCSyxFQUFhbmpCLFNBQVNXLGNBQWMsU0FDcEN5aUIsRUFBb0JwakIsU0FBU1csY0FBYyxTQUNqRHdpQixFQUFXNVosS0FBTyxRQUNsQjRaLEVBQVczUixLQUFPclAsRUFBWStHLE1BQzlCaWEsRUFBVzFaLE1BQVF3WixFQUNmSixHQUFXSSxFQUFZemEsRUFBT2dLLGNBQ2hDMlEsRUFBV2hRLFNBQVUsR0FFdkIsTUFBTXBHLEVBQVEvTSxTQUFTVyxjQUFjLFFBQ3JDNEcsRUFBYXdGLEVBQU9tVyxHQUNwQm5XLEVBQU03SSxVQUFZL0IsRUFBWTRLLE1BQzlCcVcsRUFBa0IzaUIsWUFBWTBpQixHQUM5QkMsRUFBa0IzaUIsWUFBWXNNLEdBQzlCN0QsRUFBTXpJLFlBQVkyaUIsRUFBa0IsSUFFdEMsTUFBTXJGLEVBQVM3VSxFQUFNakQsaUJBQWlCLFNBQ2xDOFgsRUFBT3ZoQixRQUNUdWhCLEVBQU8sR0FBR3pVLE9BQ1osR0FVRStZLEdBQXFCcEQsSUFDekIsTUFBTWpoQixFQUFTLEdBb0JmLE1BbkJtQixvQkFBUnFsQixLQUF1QnBFLGFBQXdCb0UsSUFDeERwRSxFQUFhbFgsU0FBUSxDQUFDMEIsRUFBT3NQLEtBQzNCLElBQUl1SyxFQUFpQjdaLEVBQ1MsaUJBQW5CNlosSUFFVEEsRUFBaUJqQixHQUFtQmlCLElBRXRDdGxCLEVBQU9yQyxLQUFLLENBQUNvZCxFQUFLdUssR0FBZ0IsSUFHcEM3YSxPQUFPME4sS0FBSzhJLEdBQWNsWCxTQUFRZ1IsSUFDaEMsSUFBSXVLLEVBQWlCckUsRUFBYWxHLEdBQ0osaUJBQW5CdUssSUFFVEEsRUFBaUJqQixHQUFtQmlCLElBRXRDdGxCLEVBQU9yQyxLQUFLLENBQUNvZCxFQUFLdUssR0FBZ0IsSUFHL0J0bEIsQ0FBTSxFQVFUNmtCLEdBQWEsQ0FBQ0YsRUFBYW5RLElBQ3hCQSxHQUFjQSxFQUFXdlcsYUFBZTBtQixFQUFZMW1CLFdBMEN2RHNuQixHQUErQixDQUFDdFUsRUFBVTFGLEtBQzlDLE1BQU14SCxFQUFjSixFQUFhSSxZQUFZOFIsSUFBSTVFLEdBQ2pELElBQUtsTixFQUFZcUgsTUFFZixZQURBdEcsRUFBTSwwRUFBMEVSLEVBQXNCaUgsTUFHeEcsTUFBTWlKLEVBN09jLEVBQUN2RCxFQUFVbE4sS0FDL0IsTUFBTXFILEVBQVE2RixFQUFTb0ssV0FDdkIsSUFBS2pRLEVBQ0gsT0FBTyxLQUVULE9BQVFySCxFQUFZcUgsT0FDbEIsSUFBSyxXQUNILE9BQU8wWSxHQUFpQjFZLEdBQzFCLElBQUssUUFDSCxPQUFPMlksR0FBYzNZLEdBQ3ZCLElBQUssT0FDSCxPQUFPNFksR0FBYTVZLEdBQ3RCLFFBQ0UsT0FBT3JILEVBQVltZCxjQUFnQjlWLEVBQU1LLE1BQU1zTCxPQUFTM0wsRUFBTUssTUFDbEUsRUErTm1CK1osQ0FBY3ZVLEVBQVVsTixHQUN2Q0EsRUFBWW9kLGVBQ2RzRSxHQUFxQnhVLEVBQVV1RCxFQUFZakosR0FDakMwRixFQUFTb0ssV0FBV3FLLGdCQUdaLFNBQVRuYSxFQUNUbkUsR0FBSzZKLEVBQVV1RCxHQUVmeE4sR0FBUWlLLEVBQVV1RCxJQUxsQnZELEVBQVNnUyxnQkFDVGhTLEVBQVNvUyxzQkFBc0J0ZixFQUFZc2QsbUJBSzdDLEVBUUlvRSxHQUF1QixDQUFDeFUsRUFBVXVELEVBQVlqSixLQUNsRCxNQUFNeEgsRUFBY0osRUFBYUksWUFBWThSLElBQUk1RSxHQUNqREEsRUFBU21TLGVBQ2lCM2QsUUFBUUMsVUFBVXlZLE1BQUssSUFBTTNZLEVBQVV6QixFQUFZb2QsZUFBZTNNLEVBQVl6USxFQUFZc2Qsc0JBQ2xHbEQsTUFBS2tELElBQ3JCcFEsRUFBU2dTLGdCQUNUaFMsRUFBU2tTLGNBQ0w5QixFQUNGcFEsRUFBU29TLHNCQUFzQmhDLEdBQ2IsU0FBVDlWLEVBQ1RuRSxHQUFLNkosRUFBVXVELEdBRWZ4TixHQUFRaUssRUFBVXVELEVBQ3BCLEdBQ0EsRUFPRXBOLEdBQU8sQ0FBQzZKLEVBQVV4RixLQUN0QixNQUFNMUgsRUFBY0osRUFBYUksWUFBWThSLElBQUk1RSxRQUFZalMsR0FDekQrRSxFQUFZaWQsa0JBQ2QyQyxHQUFZeGMsS0FFVnBELEVBQVlzYyxTQUNkMWMsRUFBYUMsZ0JBQWdCNmUsSUFBSXhSLFFBQVlqUyxHQUFXLEdBQ2pDeUcsUUFBUUMsVUFBVXlZLE1BQUssSUFBTTNZLEVBQVV6QixFQUFZc2MsUUFBUTVVLEVBQU8xSCxFQUFZc2Qsc0JBQ3RGbEQsTUFBS3dILEtBQ0csSUFBakJBLEdBQ0YxVSxFQUFTa0ksY0FDVDRGLEdBQXNCOU4sSUFFdEJBLEVBQVNySixNQUFNLENBQ2J5WCxVQUFVLEVBQ1Y1VCxXQUErQixJQUFqQmthLEVBQStCbGEsRUFBUWthLEdBRXpELElBQ0NwQixPQUFNemYsR0FBUzhnQixHQUFXM1UsUUFBWWpTLEVBQVc4RixNQUVwRG1NLEVBQVNySixNQUFNLENBQ2J5WCxVQUFVLEVBQ1Y1VCxTQUVKLEVBT0lvYSxHQUFjLENBQUM1VSxFQUFVeEYsS0FDN0J3RixFQUFTckosTUFBTSxDQUNid1gsYUFBYSxFQUNiM1QsU0FDQSxFQVFFbWEsR0FBYSxDQUFDM1UsRUFBVW5NLEtBRTVCbU0sRUFBUzRSLGNBQWMvZCxFQUFNLEVBUXpCa0MsR0FBVSxDQUFDaUssRUFBVXhGLEtBQ3pCLE1BQU0xSCxFQUFjSixFQUFhSSxZQUFZOFIsSUFBSTVFLFFBQVlqUyxHQUN6RCtFLEVBQVlnZCxxQkFDZDRDLEtBRUU1ZixFQUFZcWMsWUFDZG5QLEVBQVM3Qix5QkFDVHpMLEVBQWFDLGdCQUFnQjZlLElBQUl4UixRQUFZalMsR0FBVyxHQUM5QnlHLFFBQVFDLFVBQVV5WSxNQUFLLElBQU0zWSxFQUFVekIsRUFBWXFjLFdBQVczVSxFQUFPMUgsRUFBWXNkLHNCQUN6RmxELE1BQUsySCxJQUNqQi9jLEVBQVlsQyxPQUErQyxJQUFwQmlmLEdBQ3pDN1UsRUFBU2tJLGNBQ1Q0RixHQUFzQjlOLElBRXRCNFUsR0FBWTVVLE9BQXFDLElBQXBCNlUsRUFBa0NyYSxFQUFRcWEsRUFDekUsSUFDQ3ZCLE9BQU16ZixHQUFTOGdCLEdBQVczVSxRQUFZalMsRUFBVzhGLE1BRXBEK2dCLEdBQVk1VSxFQUFVeEYsRUFDeEIsRUFpQklzYSxHQUFtQixDQUFDOVUsRUFBVWpOLEVBQVUwVyxLQUU1QzFXLEVBQVNvQyxNQUFNNGYsUUFBVSxLQUN2QixNQUFNamlCLEVBQWNKLEVBQWFJLFlBQVk4UixJQUFJNUUsR0FDN0NsTixJQUFnQmtpQixHQUFpQmxpQixJQUFnQkEsRUFBWTRKLE9BQVM1SixFQUFZcUgsUUFHdEZzUCxFQUFZaEIsR0FBYzlSLE1BQU0sQ0FDakMsRUFPR3FlLEdBQW1CbGlCLEdBQ2hCQSxFQUFZbU4sbUJBQXFCbk4sRUFBWW9OLGdCQUFrQnBOLEVBQVlxTixrQkFBb0JyTixFQUFZK1UsZ0JBRXBILElBQUlvTixJQUFxQixFQUN6QixNQUFNQyxHQUF1Qm5pQixJQUMzQkEsRUFBU29DLE1BQU1nZ0IsWUFBYyxLQUMzQnBpQixFQUFTOEIsVUFBVXVnQixVQUFZLFNBQVUvakIsR0FDdkMwQixFQUFTOEIsVUFBVXVnQixlQUFZcm5CLEVBRzNCc0QsRUFBRVIsU0FBV2tDLEVBQVM4QixZQUN4Qm9nQixJQUFxQixFQUV6QixDQUFDLENBQ0YsRUFFR0ksR0FBMkJ0aUIsSUFDL0JBLEVBQVM4QixVQUFVc2dCLFlBQWMsS0FDL0JwaUIsRUFBU29DLE1BQU1pZ0IsVUFBWSxTQUFVL2pCLEdBQ25DMEIsRUFBU29DLE1BQU1pZ0IsZUFBWXJuQixHQUV2QnNELEVBQUVSLFNBQVdrQyxFQUFTb0MsT0FBU3BDLEVBQVNvQyxNQUFNa0UsU0FBU2hJLEVBQUVSLFdBQzNEb2tCLElBQXFCLEVBRXpCLENBQUMsQ0FDRixFQUVHSyxHQUFtQixDQUFDdFYsRUFBVWpOLEVBQVUwVyxLQUM1QzFXLEVBQVM4QixVQUFVa2dCLFFBQVUxakIsSUFDM0IsTUFBTXlCLEVBQWNKLEVBQWFJLFlBQVk4UixJQUFJNUUsR0FDN0NpVixHQUNGQSxJQUFxQixFQUduQjVqQixFQUFFUixTQUFXa0MsRUFBUzhCLFdBQWFWLEVBQWVyQixFQUFZb2Msb0JBQ2hFekYsRUFBWWhCLEdBQWNuSCxTQUM1QixDQUNELEVBSUdpVSxHQUFZaGQsR0FBUUEsYUFBZ0JpZCxTQURsQmpkLElBQXdCLGlCQUFUQSxHQUFxQkEsRUFBSzhHLE9BQ1pvVyxDQUFnQmxkLEdBMkRyRSxNQVVNbWQsR0FBWSxLQUNoQixHQUFJMVksR0FBWTJZLFFBRWQsTUEzL0V5QixNQUMzQixNQUFNL1ksRUFBbUJuRyxJQUNuQm1mLEVBQXdCdmUsU0FBU3BHLE9BQU9tTCxpQkFBaUJRLEdBQWtCRSxPQUNqRkYsRUFBaUJoTSxNQUFNd0ssZUFBZSxjQUN0Q3dCLEVBQWlCaE0sTUFBTWtNLE1BQVEsT0FDL0IsTUFDTStZLEVBQTBCRCxFQURFdmUsU0FBU3BHLE9BQU9tTCxpQkFBaUJRLEdBQWtCRSxPQUNELElBQ3BGRixFQUFpQmhNLE1BQU1rTSxNQUFRLEdBQUcrWSxJQUEwQixFQW0vRTFEQyxHQUNPOVksR0FBWTJZLFFBQVFJLE1BQzdCLEVBU0lDLEdBQWMsS0FDbEIsR0FBSWhaLEdBQVkyWSxRQUFTLENBQ3ZCLE1BQU1NLEVBQVlqWixHQUFZMlksUUFBUU8sUUFFdEMsT0FEQXpaLEVBQXdCd1osR0FDakJBLENBQ1QsR0F3Q0YsSUFBSUUsSUFBeUIsRUFDN0IsTUFBTUMsR0FBZ0IsQ0FBQyxFQWF2QixNQUFNQyxHQUFvQjdNLElBQ3hCLElBQUssSUFBSTlSLEVBQUs4UixFQUFNM1ksT0FBUTZHLEdBQU1BLElBQU8zRyxTQUFVMkcsRUFBS0EsRUFBR3ZGLFdBQ3pELElBQUssTUFBTXVRLEtBQVEwVCxHQUFlLENBQ2hDLE1BQU1wSCxFQUFXdFgsRUFBR0osYUFBYW9MLEdBQ2pDLEdBQUlzTSxFQUlGLFlBSEFvSCxHQUFjMVQsR0FBTTRULEtBQUssQ0FDdkJ0SCxZQUlOLENBQ0YsRUFHRixJQUFJdUgsR0FBNkIvYyxPQUFPa1AsT0FBTyxDQUM3Q2dKLFVBQVcsS0FDWGQsaUJBQWtCQSxHQUNsQkUscUJBQXNCQSxHQUN0QkMsc0JBQXVCQSxHQUN2QnlGLGFBL0ptQkMsSUFDbkIsTUFBTWxkLEVBQVMsQ0FBQyxFQWFoQixNQVp1QixpQkFBWmtkLEVBQUssSUFBb0JsQixHQUFVa0IsRUFBSyxJQUdqRCxDQUFDLFFBQVMsT0FBUSxRQUFRM2QsU0FBUSxDQUFDeUosRUFBTWpTLEtBQ3ZDLE1BQU04RCxFQUFNcWlCLEVBQUtubUIsR0FDRSxpQkFBUjhELEdBQW9CbWhCLEdBQVVuaEIsR0FDdkNtRixFQUFPZ0osR0FBUW5PLE9BQ0VyRyxJQUFScUcsR0FDVFAsRUFBTSxzQkFBc0IwTyxpREFBb0RuTyxJQUNsRixJQVJGb0YsT0FBTzZVLE9BQU85VSxFQUFRa2QsRUFBSyxJQVd0QmxkLENBQU0sRUFrSmI1RSxhQUFjQSxFQUNkTyxTQUFVQSxFQUNWSSxTQUFVQSxFQUNWRSxpQkFBa0JBLEVBQ2xCQyxTQUFVQSxFQUNWTCxRQUFTQSxFQUNUc2hCLGVBbC9GcUIsSUFBTTFoQixFQUFlOUIsRUFBWSxpQkFtL0Z0RHlqQixjQXQ4Rm9CLElBQU0zaEIsRUFBZTlCLEVBQVksZ0JBdThGckR3RCxlQUFnQkEsRUFDaEJKLFdBQVlBLEVBQ1pULGlCQUFrQkEsRUFDbEJLLGNBQWVBLEVBQ2ZGLGdCQUFpQkEsRUFDakJJLFVBQVdBLEVBQ1hHLFVBQVdBLEVBQ1hFLG9CQUFxQkEsRUFDckJHLHFCQUFzQkEsRUFDdEJoQixxQkFBc0JBLEVBQ3RCRCxpQkFBa0JBLEVBQ2xCaWhCLFVBajRGZ0IsSUFDVDFoQixJQUFXaVcsYUFBYSxnQkFpNEYvQjBMLFVBemhEZ0IsSUFDVC9lLEVBQVk1QyxLQXloRG5CcVQsYUFBY0EsR0FDZHVPLFVBL2dEZ0IsSUFBTTVnQixLQUFtQkEsSUFBZ0JzUyxRQWdoRHpEdU8sWUEzZ0RrQixJQUFNL2dCLEtBQXFCQSxJQUFrQndTLFFBNGdEL0Q4TixLQXZLRixXQUNFLE1BQU0zRCxFQUFPMWxCLEtBQ2IsSUFBSyxJQUFJK3BCLEVBQU96YixVQUFVaE8sT0FBUWtwQixFQUFPLElBQUkzZixNQUFNa2dCLEdBQU9DLEVBQU8sRUFBR0EsRUFBT0QsRUFBTUMsSUFDL0VSLEVBQUtRLEdBQVExYixVQUFVMGIsR0FFekIsT0FBTyxJQUFJdEUsS0FBUThELEVBQ3JCLEVBa0tFUyxNQTlJRixTQUFlQyxHQU1iLE9BTEEsY0FBd0JscUIsTUFDdEJtcUIsTUFBTTdkLEVBQVE4ZCxHQUNaLE9BQU9DLE1BQU1GLE1BQU03ZCxFQUFRQyxPQUFPNlUsT0FBTyxDQUFDLEVBQUc4SSxFQUFhRSxHQUM1RCxFQUdKLEVBd0lFM0UsWUFBYUEsR0FDYjZFLGNBQWU3RSxHQUNmOEUsYUFsSW1CLElBQ1p4YSxHQUFZMlksU0FBVzNZLEdBQVkyWSxRQUFRNkIsZUFrSWxEOUIsVUFBV0EsR0FDWE0sWUFBYUEsR0FDYnlCLFlBaEdrQixLQUNsQixNQUFNL2EsRUFBUU0sR0FBWTJZLFFBQzFCLE9BQU9qWixJQUFVQSxFQUFNZ2IsUUFBVWhDLEtBQWNNLEtBQWMsRUErRjdEMkIsY0FyRm9CQyxJQUNwQixHQUFJNWEsR0FBWTJZLFFBQVMsQ0FDdkIsTUFBTU0sRUFBWWpaLEdBQVkyWSxRQUFRa0MsU0FBU0QsR0FFL0MsT0FEQW5iLEVBQXdCd1osR0FBVyxHQUM1QkEsQ0FDVCxHQWlGQTZCLGVBdkVxQixJQUNkOWEsR0FBWTJZLFNBQVczWSxHQUFZMlksUUFBUW9DLFlBdUVsREMsaUJBOURGLFdBRUU1QixHQURXN2EsVUFBVWhPLE9BQVMsUUFBc0JRLElBQWpCd04sVUFBVSxHQUFtQkEsVUFBVSxHQUFLLHNCQUN6RHRPLEtBQ2pCa3BCLEtBQ0hwbEIsU0FBUzZELEtBQUsrWixpQkFBaUIsUUFBUzBILElBQ3hDRixJQUF5QixFQUU3QixJQTBEQSxNQUFNOEIsR0FLSkMsWUFBWUMsRUFBVUMsR0FDcEJuckIsS0FBS2tyQixTQUFXQSxFQUNoQmxyQixLQUFLZ3BCLFVBQVltQyxFQUNqQm5yQixLQUFLeXFCLFNBQVUsRUFDZnpxQixLQUFLaXBCLE9BQ1AsQ0FDQUEsUUFNRSxPQUxLanBCLEtBQUt5cUIsVUFDUnpxQixLQUFLeXFCLFNBQVUsRUFDZnpxQixLQUFLb3JCLFFBQVUsSUFBSUMsS0FDbkJyckIsS0FBS0wsR0FBS21RLFdBQVc5UCxLQUFLa3JCLFNBQVVsckIsS0FBS2dwQixZQUVwQ2hwQixLQUFLZ3BCLFNBQ2QsQ0FDQUYsT0FNRSxPQUxJOW9CLEtBQUt5cUIsVUFDUHpxQixLQUFLeXFCLFNBQVUsRUFDZmEsYUFBYXRyQixLQUFLTCxJQUNsQkssS0FBS2dwQixZQUFhLElBQUlxQyxNQUFPRSxVQUFZdnJCLEtBQUtvckIsUUFBUUcsV0FFakR2ckIsS0FBS2dwQixTQUNkLENBQ0E0QixTQUFTRCxHQUNQLE1BQU1GLEVBQVV6cUIsS0FBS3lxQixRQVFyQixPQVBJQSxHQUNGenFCLEtBQUs4b0IsT0FFUDlvQixLQUFLZ3BCLFdBQWEyQixFQUNkRixHQUNGenFCLEtBQUtpcEIsUUFFQWpwQixLQUFLZ3BCLFNBQ2QsQ0FDQXVCLGVBS0UsT0FKSXZxQixLQUFLeXFCLFVBQ1B6cUIsS0FBSzhvQixPQUNMOW9CLEtBQUtpcEIsU0FFQWpwQixLQUFLZ3BCLFNBQ2QsQ0FDQThCLFlBQ0UsT0FBTzlxQixLQUFLeXFCLE9BQ2QsRUFHRixNQUFNZSxHQUFtQixDQUFDLGFBQWMsWUFBYSxlQXVCL0NDLEdBQWdCQyxJQUNwQixNQUFNNXBCLEVBQVMsQ0FBQyxFQWVoQixPQWJtQitILE1BQU1DLEtBQUs0aEIsRUFBZ0IzaEIsaUJBQWlCLGVBQ3BEOEIsU0FBUXFHLElBQ2pCeVosR0FBMEJ6WixFQUFPLENBQUMsT0FBUSxVQUMxQyxNQUFNMFIsRUFBWTFSLEVBQU03SCxhQUFhLFFBQy9Ca0QsRUFBUTJFLEVBQU03SCxhQUFhLFNBRS9CdkksRUFBTzhoQixHQUQrQixrQkFBN0I5QixHQUFjOEIsR0FDTyxVQUFWclcsRUFDeUIsaUJBQTdCdVUsR0FBYzhCLEdBQ1ZyaUIsS0FBS3FxQixNQUFNcmUsR0FFWEEsQ0FDdEIsSUFFS3pMLENBQU0sRUFPVCtwQixHQUF3QkgsSUFDNUIsTUFBTTVwQixFQUFTLENBQUMsRUFRaEIsT0FOc0IrSCxNQUFNQyxLQUFLNGhCLEVBQWdCM2hCLGlCQUFpQix3QkFDcEQ4QixTQUFRcUcsSUFDcEIsTUFBTTBSLEVBQVkxUixFQUFNN0gsYUFBYSxRQUMvQmtELEVBQVEyRSxFQUFNN0gsYUFBYSxTQUNqQ3ZJLEVBQU84aEIsR0FBYSxJQUFJa0ksU0FBUyxVQUFVdmUsSUFBdkIsRUFBaUMsSUFFaER6TCxDQUFNLEVBT1RpcUIsR0FBaUJMLElBQ3JCLE1BQU01cEIsRUFBUyxDQUFDLEVBZWhCLE9BYm9CK0gsTUFBTUMsS0FBSzRoQixFQUFnQjNoQixpQkFBaUIsZ0JBQ3BEOEIsU0FBUXFJLElBQ2xCeVgsR0FBMEJ6WCxFQUFRLENBQUMsT0FBUSxRQUFTLGVBQ3BELE1BQU03RyxFQUFPNkcsRUFBTzdKLGFBQWEsUUFDakN2SSxFQUFPLEdBQUd1TCxlQUFvQjZHLEVBQU9xRSxVQUNyQ3pXLEVBQU8sT0FBT3NFLEVBQXNCaUgsYUFBaUIsRUFDakQ2RyxFQUFPZ0ssYUFBYSxXQUN0QnBjLEVBQU8sR0FBR3VMLGdCQUFxQjZHLEVBQU83SixhQUFhLFVBRWpENkosRUFBT2dLLGFBQWEsZ0JBQ3RCcGMsRUFBTyxHQUFHdUwsb0JBQXlCNkcsRUFBTzdKLGFBQWEsY0FDekQsSUFFS3ZJLENBQU0sRUFPVGtxQixHQUFlTixJQUNuQixNQUFNNXBCLEVBQVMsQ0FBQyxFQUVWMkcsRUFBUWlqQixFQUFnQjNuQixjQUFjLGNBZ0I1QyxPQWZJMEUsSUFDRmtqQixHQUEwQmxqQixFQUFPLENBQUMsTUFBTyxRQUFTLFNBQVUsUUFDeERBLEVBQU15VixhQUFhLFNBQ3JCcGMsRUFBT3FZLFNBQVcxUixFQUFNNEIsYUFBYSxRQUVuQzVCLEVBQU15VixhQUFhLFdBQ3JCcGMsRUFBT3VZLFdBQWE1UixFQUFNNEIsYUFBYSxVQUVyQzVCLEVBQU15VixhQUFhLFlBQ3JCcGMsRUFBT3dZLFlBQWM3UixFQUFNNEIsYUFBYSxXQUV0QzVCLEVBQU15VixhQUFhLFNBQ3JCcGMsRUFBT3NZLFNBQVczUixFQUFNNEIsYUFBYSxTQUdsQ3ZJLENBQU0sRUFPVG1xQixHQUFjUCxJQUNsQixNQUFNNXBCLEVBQVMsQ0FBQyxFQUVWc0csRUFBT3NqQixFQUFnQjNuQixjQUFjLGFBYTNDLE9BWklxRSxJQUNGdWpCLEdBQTBCdmpCLEVBQU0sQ0FBQyxPQUFRLFVBQ3JDQSxFQUFLOFYsYUFBYSxVQUdwQnBjLEVBQU9zRyxLQUFPQSxFQUFLaUMsYUFBYSxTQUU5QmpDLEVBQUs4VixhQUFhLFdBQ3BCcGMsRUFBT2dYLFVBQVkxUSxFQUFLaUMsYUFBYSxVQUV2Q3ZJLEVBQU8wVyxTQUFXcFEsRUFBS21RLFdBRWxCelcsQ0FBTSxFQU9Ub3FCLEdBQWVSLElBQ25CLE1BQU01cEIsRUFBUyxDQUFDLEVBRVZvTCxFQUFRd2UsRUFBZ0IzbkIsY0FBYyxjQUN4Q21KLElBQ0Z5ZSxHQUEwQnplLEVBQU8sQ0FBQyxPQUFRLFFBQVMsY0FBZSxVQUdsRXBMLEVBQU9vTCxNQUFRQSxFQUFNN0MsYUFBYSxTQUFXLE9BQ3pDNkMsRUFBTWdSLGFBQWEsV0FDckJwYyxFQUFPa1UsV0FBYTlJLEVBQU03QyxhQUFhLFVBRXJDNkMsRUFBTWdSLGFBQWEsaUJBQ3JCcGMsRUFBTytULGlCQUFtQjNJLEVBQU03QyxhQUFhLGdCQUUzQzZDLEVBQU1nUixhQUFhLFdBQ3JCcGMsRUFBT3dVLFdBQWFwSixFQUFNN0MsYUFBYSxXQUkzQyxNQUFNMFksRUFBZWxaLE1BQU1DLEtBQUs0aEIsRUFBZ0IzaEIsaUJBQWlCLHNCQVVqRSxPQVRJZ1osRUFBYXppQixTQUNmd0IsRUFBT2loQixhQUFlLENBQUMsRUFDdkJBLEVBQWFsWCxTQUFRNmEsSUFDbkJpRixHQUEwQmpGLEVBQVEsQ0FBQyxVQUNuQyxNQUFNRCxFQUFjQyxFQUFPcmMsYUFBYSxTQUNsQzhoQixFQUFhekYsRUFBT25PLFVBQzFCelcsRUFBT2loQixhQUFhMEQsR0FBZTBGLENBQVUsS0FHMUNycUIsQ0FBTSxFQVFUc3FCLEdBQXNCLENBQUNWLEVBQWlCVyxLQUM1QyxNQUFNdnFCLEVBQVMsQ0FBQyxFQUNoQixJQUFLLE1BQU10QixLQUFLNnJCLEVBQVksQ0FDMUIsTUFBTXpJLEVBQVl5SSxFQUFXN3JCLEdBRXZCOHJCLEVBQU1aLEVBQWdCM25CLGNBQWM2ZixHQUN0QzBJLElBQ0ZYLEdBQTBCVyxFQUFLLElBQy9CeHFCLEVBQU84aEIsRUFBVTdTLFFBQVEsU0FBVSxLQUFPdWIsRUFBSS9ULFVBQVVNLE9BRTVELENBQ0EsT0FBTy9XLENBQU0sRUFNVHlxQixHQUEwQmIsSUFDOUIsTUFBTWMsRUFBa0JoQixHQUFpQm5yQixPQUFPLENBQUMsYUFBYyxzQkFBdUIsY0FBZSxhQUFjLFlBQWEsYUFBYyxzQkFDOUl3SixNQUFNQyxLQUFLNGhCLEVBQWdCM2QsVUFBVWxDLFNBQVFwQixJQUMzQyxNQUFNMlUsRUFBVTNVLEVBQUcyVSxRQUFRcU4sY0FDdEJELEVBQWdCdmxCLFNBQVNtWSxJQUM1QjNZLEVBQUsseUJBQXlCMlksS0FDaEMsR0FDQSxFQU9FdU0sR0FBNEIsQ0FBQ2xoQixFQUFJaWlCLEtBQ3JDN2lCLE1BQU1DLEtBQUtXLEVBQUc5RixZQUFZa0gsU0FBUThnQixLQUNtQixJQUEvQ0QsRUFBa0IvaEIsUUFBUWdpQixFQUFVclgsT0FDdEM3TyxFQUFLLENBQUMsMkJBQTJCa21CLEVBQVVyWCxhQUFhN0ssRUFBRzJVLFFBQVFxTixrQkFBc0JDLEVBQWtCcHNCLE9BQVMsMkJBQTJCb3NCLEVBQWtCbnNCLEtBQUssUUFBVSxrREFDbEwsR0FDQSxFQVVFcXNCLEdBQVl0Z0IsSUFDaEIsTUFBTTFFLEVBQVlGLElBQ1pRLEVBQVFELElBQ2lCLG1CQUFwQnFFLEVBQU84VyxVQUNoQjlXLEVBQU84VyxTQUFTbGIsR0FFbEIsTUFDTTJrQixFQURhN29CLE9BQU9tTCxpQkFBaUJyTCxTQUFTNkQsTUFDYm1sQixVQUN2Q0MsR0FBV25sQixFQUFXTSxFQUFPb0UsR0FHN0J3RCxZQUFXLEtBQ1RrZCxHQUF1QnBsQixFQUFXTSxFQUFNLEdBbkJqQixJQXFCckI0QyxNQUNGbWlCLEdBQW1CcmxCLEVBQVcwRSxFQUFPaVgsaUJBQWtCc0osR0F6bERwQ2hqQixNQUFNQyxLQUFLaEcsU0FBUzZELEtBQUtvRyxVQUNqQ2xDLFNBQVFwQixJQUNmQSxJQUFPL0MsS0FBa0IrQyxFQUFHMkIsU0FBUzFFLE9BR3JDK0MsRUFBR3lULGFBQWEsZ0JBQ2xCelQsRUFBRzNGLGFBQWEsNEJBQTZCMkYsRUFBR0osYUFBYSxnQkFFL0RJLEVBQUczRixhQUFhLGNBQWUsUUFBTyxLQW9sRG5DbUcsS0FBYzhFLEdBQVlRLHdCQUM3QlIsR0FBWVEsc0JBQXdCek0sU0FBUzJaLGVBRWpCLG1CQUFuQm5SLEVBQU8rVyxTQUNoQnZULFlBQVcsSUFBTXhELEVBQU8rVyxRQUFRbmIsS0FFbEMyRixFQUFZakcsRUFBVzNCLEVBQVksaUJBQWlCLEVBTWhEaW5CLEdBQTRCM1EsSUFDaEMsTUFBTXJVLEVBQVFELElBQ2QsR0FBSXNVLEVBQU0zWSxTQUFXc0UsRUFDbkIsT0FFRixNQUFNTixFQUFZRixJQUNsQlEsRUFBTTRULG9CQUFvQnhKLEdBQW1CNGEsSUFDN0N0bEIsRUFBVWpFLE1BQU1tcEIsVUFBWSxNQUFNLEVBTzlCRSxHQUF5QixDQUFDcGxCLEVBQVdNLEtBQ3JDb0ssSUFBcUJwRCxFQUFnQmhILElBQ3ZDTixFQUFVakUsTUFBTW1wQixVQUFZLFNBQzVCNWtCLEVBQU13WixpQkFBaUJwUCxHQUFtQjRhLEtBRTFDdGxCLEVBQVVqRSxNQUFNbXBCLFVBQVksTUFDOUIsRUFRSUcsR0FBcUIsQ0FBQ3JsQixFQUFXMmIsRUFBa0JzSixLQXptRDFDLE1BSWIsSUFEQSxtQkFBbUIzTSxLQUFLN0IsVUFBVUMsYUFBZXRhLE9BQU9tcEIsVUFBbUMsYUFBdkI5TyxVQUFVK08sVUFBMkIvTyxVQUFVZ1AsZUFBaUIsS0FDeEh0aUIsRUFBU2pILFNBQVM2RCxLQUFNMUIsRUFBWWthLFFBQVMsQ0FDdkQsTUFBTUMsRUFBU3RjLFNBQVM2RCxLQUFLMlksVUFDN0J4YyxTQUFTNkQsS0FBS2hFLE1BQU0wYyxLQUFtQixFQUFWRCxFQUFILEtBQzFCeFQsRUFBUzlJLFNBQVM2RCxLQUFNMUIsRUFBWWthLFFBQ3BDdEIsS0FDQVYsSUFDRixHQWdtREFtUCxHQUNJL0osR0FBNEMsV0FBeEJzSixHQUN0QnROLEtBSUZ6UCxZQUFXLEtBQ1RsSSxFQUFVMFksVUFBWSxDQUFDLEdBQ3ZCLEVBUUV5TSxHQUFhLENBQUNubEIsRUFBV00sRUFBT29FLEtBQ3BDTSxFQUFTaEYsRUFBVzBFLEVBQU9HLFVBQVU0SCxVQUVyQ25NLEVBQU12RSxNQUFNNHBCLFlBQVksVUFBVyxJQUFLLGFBQ3hDbmYsRUFBS2xHLEVBQU8sUUFDWjRILFlBQVcsS0FFVGxELEVBQVMxRSxFQUFPb0UsRUFBT0csVUFBVXZFLE9BRWpDQSxFQUFNdkUsTUFBTXdLLGVBQWUsVUFBVSxHQTNGZCxJQThGekJ2QixFQUFTLENBQUM5SSxTQUFTd04sZ0JBQWlCeE4sU0FBUzZELE1BQU8xQixFQUFZK0UsT0FDNURzQixFQUFPMFYsWUFBYzFWLEVBQU8rSCxXQUFhL0gsRUFBT3BCLE9BQ2xEMEIsRUFBUyxDQUFDOUksU0FBU3dOLGdCQUFpQnhOLFNBQVM2RCxNQUFPMUIsRUFBWSxlQUNsRSxFQUdGLElBQUl1bkIsR0FBeUIsQ0FNM0JoWCxNQUFPLENBQUNpWCxFQUFRdEssSUFDUCx3REFBd0RqRCxLQUFLdU4sR0FBVWxtQixRQUFRQyxVQUFZRCxRQUFRQyxRQUFRMmIsR0FBcUIseUJBT3pJdk0sSUFBSyxDQUFDNlcsRUFBUXRLLElBRUwsOEZBQThGakQsS0FBS3VOLEdBQVVsbUIsUUFBUUMsVUFBWUQsUUFBUUMsUUFBUTJiLEdBQXFCLGdCQWtDakwsU0FBU3VLLEdBQWNwaEIsSUEzQnZCLFNBQW1DQSxHQUU1QkEsRUFBTzJXLGdCQUNWMVcsT0FBTzBOLEtBQUt1VCxJQUF3QjNoQixTQUFRZ1IsSUFDdEN2USxFQUFPWSxRQUFVMlAsSUFDbkJ2USxFQUFPMlcsZUFBaUJ1SyxHQUF1QjNRLEdBQ2pELEdBR04sRUFtQkU4USxDQUEwQnJoQixHQUd0QkEsRUFBT3VXLHNCQUF3QnZXLEVBQU80VixZQUN4Q3piLEVBQUssb01BbEJULFNBQXFDNkYsS0FFOUJBLEVBQU8xSSxRQUFtQyxpQkFBbEIwSSxFQUFPMUksU0FBd0JFLFNBQVNDLGNBQWN1SSxFQUFPMUksU0FBb0MsaUJBQWxCMEksRUFBTzFJLFNBQXdCMEksRUFBTzFJLE9BQU9XLGVBQ3ZKa0MsRUFBSyx1REFDTDZGLEVBQU8xSSxPQUFTLE9BRXBCLENBY0VncUIsQ0FBNEJ0aEIsR0FHQSxpQkFBakJBLEVBQU9oRSxRQUNoQmdFLEVBQU9oRSxNQUFRZ0UsRUFBT2hFLE1BQU02RCxNQUFNLE1BQU01TCxLQUFLLFdBRS9DNFEsR0FBSzdFLEVBQ1AsQ0FFQSxJQUFJMkUsR0FDSixNQUFNNGMsR0FDSjVDLGNBRUUsR0FBc0Isb0JBQVhqbkIsT0FDVCxPQUVGaU4sR0FBa0JqUixLQUdsQixJQUFLLElBQUkrcEIsRUFBT3piLFVBQVVoTyxPQUFRa3BCLEVBQU8sSUFBSTNmLE1BQU1rZ0IsR0FBT0MsRUFBTyxFQUFHQSxFQUFPRCxFQUFNQyxJQUMvRVIsRUFBS1EsR0FBUTFiLFVBQVUwYixHQUV6QixNQUFNOEQsRUFBY3ZoQixPQUFPa1AsT0FBT3piLEtBQUtpckIsWUFBWTFCLGFBQWFDLElBQ2hFamQsT0FBTytZLGlCQUFpQnRsQixLQUFNLENBQzVCc00sT0FBUSxDQUNOaUIsTUFBT3VnQixFQUNQdkksVUFBVSxFQUNWQyxZQUFZLEVBQ1p1SSxjQUFjLEtBS2xCLE1BQU1ub0IsRUFBVXFMLEdBQWdCa1osTUFBTWxaLEdBQWdCM0UsUUFDdEQ3RyxFQUFhRyxRQUFRMmUsSUFBSXZrQixLQUFNNEYsRUFDakMsQ0FDQXVrQixNQUFNNkQsR0FDSixJQUFJOUQsRUFBYzViLFVBQVVoTyxPQUFTLFFBQXNCUSxJQUFqQndOLFVBQVUsR0FBbUJBLFVBQVUsR0FBSyxDQUFDLEVBOXZDN0RoQyxNQUNKLElBQXBCQSxFQUFPK0gsVUFBc0IvSCxFQUFPMlYsbUJBQ3RDeGIsRUFBSyxtRkFFUCxJQUFLLE1BQU15TCxLQUFTNUYsRUFDbEJ5WCxHQUFvQjdSLEdBQ2hCNUYsRUFBT3BCLE9BQ1Q4WSxHQUF5QjlSLEdBRTNCK1IsR0FBeUIvUixFQUMzQixFQXF2Q0UrYixDQUFzQjFoQixPQUFPNlUsT0FBTyxDQUFDLEVBQUc4SSxFQUFhOEQsSUFDakRqZSxHQUFZa0Isa0JBRWRsQixHQUFZa0IsZ0JBQWdCZ1EsV0FDeEJuVyxLQUNGbVQsTUFHSmxPLEdBQVlrQixnQkFBa0JBLEdBQzlCLE1BQU1wTCxFQUFjcW9CLEdBQWNGLEVBQVk5RCxHQUM5Q3dELEdBQWM3bkIsR0FDZDBHLE9BQU9rUCxPQUFPNVYsR0FHVmtLLEdBQVkyWSxVQUNkM1ksR0FBWTJZLFFBQVFJLGNBQ2IvWSxHQUFZMlksU0FJckI0QyxhQUFhdmIsR0FBWU8scUJBQ3pCLE1BQU14SyxFQUFXcW9CLEdBQWlCbGQsSUFHbEMsT0FGQXlJLEdBQU96SSxHQUFpQnBMLEdBQ3hCSixFQUFhSSxZQUFZMGUsSUFBSXRULEdBQWlCcEwsR0FDdkN1b0IsR0FBWW5kLEdBQWlCbkwsRUFBVUQsRUFDaEQsQ0FHQW9hLEtBQUtvTyxHQUVILE9BRGdCNW9CLEVBQWFHLFFBQVErUixJQUFJM1gsTUFDMUJpZ0IsS0FBS29PLEVBQ3RCLENBQ0FDLFFBQVFDLEdBRU4sT0FEZ0I5b0IsRUFBYUcsUUFBUStSLElBQUkzWCxNQUMxQnN1QixRQUFRQyxFQUN6QixFQVNGLE1BQU1ILEdBQWMsQ0FBQ3JiLEVBQVVqTixFQUFVRCxJQUNoQyxJQUFJMEIsU0FBUSxDQUFDQyxFQUFTZ25CLEtBSzNCLE1BQU1oUyxFQUFjaVMsSUFFbEIxYixFQUFTckosTUFBTSxDQUNia1gsYUFBYSxFQUNiNk4sV0FDQSxFQUVKM1EsR0FBZUMsbUJBQW1Cd0csSUFBSXhSLEVBQVV2TCxHQUNoRHNXLEdBQWVFLGtCQUFrQnVHLElBQUl4UixFQUFVeWIsR0FDL0Mxb0IsRUFBU3FOLGNBQWMyVSxRQUFVLEtBMzZCSi9VLEtBQy9CLE1BQU1sTixFQUFjSixFQUFhSSxZQUFZOFIsSUFBSTVFLEdBQ2pEQSxFQUFTaVMsaUJBQ0xuZixFQUFZcUgsTUFDZG1hLEdBQTZCdFUsRUFBVSxXQUV2Q2pLLEdBQVFpSyxHQUFVLEVBQ3BCLEVBcTZCSTJiLENBQXlCM2IsRUFBUyxFQUVwQ2pOLEVBQVNzTixXQUFXMFUsUUFBVSxLQWo2QkovVSxLQUM1QixNQUFNbE4sRUFBY0osRUFBYUksWUFBWThSLElBQUk1RSxHQUNqREEsRUFBU2lTLGlCQUNMbmYsRUFBWXFkLHVCQUNkbUUsR0FBNkJ0VSxFQUFVLFFBRXZDN0osR0FBSzZKLEdBQVUsRUFDakIsRUEyNUJJNGIsQ0FBc0I1YixFQUFTLEVBRWpDak4sRUFBU3VOLGFBQWF5VSxRQUFVLEtBdDVCSixFQUFDL1UsRUFBVXlKLEtBQ3pDekosRUFBU2lTLGlCQUNUeEksRUFBWWhCLEdBQWN4UyxPQUFPLEVBcTVCN0I0bEIsQ0FBd0I3YixFQUFVeUosRUFBWSxFQUVoRDFXLEVBQVM0VSxZQUFZb04sUUFBVSxLQUU3QnRMLEVBQVloQixHQUFjOVIsTUFBTSxFQTF4QmIsRUFBQ3FKLEVBQVVqTixFQUFVMFcsS0FDeEIvVyxFQUFhSSxZQUFZOFIsSUFBSTVFLEdBQ2pDN0gsTUFDZDJjLEdBQWlCOVUsRUFBVWpOLEVBQVUwVyxJQUlyQ3lMLEdBQXFCbmlCLEdBR3JCc2lCLEdBQXlCdGlCLEdBQ3pCdWlCLEdBQWlCdFYsRUFBVWpOLEVBQVUwVyxHQUN2QyxFQWd4QkVxUyxDQUFpQjliLEVBQVVqTixFQUFVMFcsR0E3Z0VmLEVBQUN6SixFQUFVaEQsRUFBYWxLLEVBQWEyVyxLQUM3RGIsR0FBcUI1TCxHQUNoQmxLLEVBQVlxRixRQUNmNkUsRUFBWWdNLGVBQWlCM1gsR0FBSzJYLEdBQWVoSixFQUFVM08sRUFBR29ZLEdBQzlEek0sRUFBWTZMLGNBQWdCL1YsRUFBWW9XLHVCQUF5QmpZLE9BQVNpRSxJQUMxRThILEVBQVlrTSx1QkFBeUJwVyxFQUFZb1csdUJBQ2pEbE0sRUFBWTZMLGNBQWM4RixpQkFBaUIsVUFBVzNSLEVBQVlnTSxlQUFnQixDQUNoRkMsUUFBU2pNLEVBQVlrTSx5QkFFdkJsTSxFQUFZOEwscUJBQXNCLEVBQ3BDLEVBb2dFRWlULENBQWtCL2IsRUFBVWhELEdBQWFsSyxFQUFhMlcsR0Exb0N2QixFQUFDekosRUFBVXpHLEtBQ3ZCLFdBQWpCQSxFQUFPWSxPQUF1QyxVQUFqQlosRUFBT1ksTUFDdEM4WSxHQUFtQmpULEVBQVV6RyxHQUNwQixDQUFDLE9BQVEsUUFBUyxTQUFVLE1BQU8sWUFBWXJGLFNBQVNxRixFQUFPWSxTQUFXOUYsRUFBZWtGLEVBQU9nSyxhQUFlN08sRUFBVTZFLEVBQU9nSyxlQUN6SW1QLEdBQVk3YyxLQUNad2QsR0FBaUJyVCxFQUFVekcsR0FDN0IsRUFxb0NFeWlCLENBQTJCaGMsRUFBVWxOLEdBQ3JDK21CLEdBQVUvbUIsR0FDVm1wQixHQUFXamYsR0FBYWxLLEVBQWEyVyxHQUNyQ3lTLEdBQVVucEIsRUFBVUQsR0FHcEJpSyxZQUFXLEtBQ1RoSyxFQUFTOEIsVUFBVTBZLFVBQVksQ0FBQyxHQUNoQyxJQVNBNE4sR0FBZ0IsQ0FBQ0YsRUFBWTlELEtBQ2pDLE1BQU1nRixFQTVla0I1aUIsS0FFeEIsTUFBTXlWLEVBQXNDLGlCQUFwQnpWLEVBQU95VixTQUF3QmplLFNBQVNDLGNBQWN1SSxFQUFPeVYsVUFBWXpWLEVBQU95VixTQUN4RyxJQUFLQSxFQUNILE1BQU8sQ0FBQyxFQUdWLE1BQU0ySixFQUFrQjNKLEVBQVM1aEIsUUFHakMsT0FGQW9zQixHQUF3QmIsR0FDVG5mLE9BQU82VSxPQUFPcUssR0FBY0MsR0FBa0JHLEdBQXNCSCxHQUFrQkssR0FBZUwsR0FBa0JNLEdBQWFOLEdBQWtCTyxHQUFZUCxHQUFrQlEsR0FBYVIsR0FBa0JVLEdBQW9CVixFQUFpQkYsSUFDMVAsRUFrZVUyRCxDQUFrQm5CLEdBQ25DMWhCLEVBQVNDLE9BQU82VSxPQUFPLENBQUMsRUFBR1UsR0FBZW9JLEVBQWFnRixFQUFnQmxCLEdBRzdFLE9BRkExaEIsRUFBT0csVUFBWUYsT0FBTzZVLE9BQU8sQ0FBQyxFQUFHVSxHQUFjclYsVUFBV0gsRUFBT0csV0FDckVILEVBQU93VSxVQUFZdlUsT0FBTzZVLE9BQU8sQ0FBQyxFQUFHVSxHQUFjaEIsVUFBV3hVLEVBQU93VSxXQUM5RHhVLENBQU0sRUFPVDZoQixHQUFtQnBiLElBQ3ZCLE1BQU1qTixFQUFXLENBQ2ZvQyxNQUFPRCxJQUNQTCxVQUFXRixJQUNYbUIsUUFBU1EsSUFDVDhKLGNBQWV2SyxJQUNmd0ssV0FBWW5LLElBQ1pvSyxhQUFjdEssSUFDZEssT0FBUUQsSUFDUnVSLFlBQWFqUixJQUNiMFosa0JBQW1CeGEsSUFDbkJtUixjQUFlcFIsS0FHakIsT0FEQWpELEVBQWFLLFNBQVN5ZSxJQUFJeFIsRUFBVWpOLEdBQzdCQSxDQUFRLEVBUVhrcEIsR0FBYSxDQUFDamYsRUFBYWxLLEVBQWEyVyxLQUM1QyxNQUFNN00sRUFBbUJuRyxJQUN6QitFLEVBQUtvQixHQUNEOUosRUFBWTRKLFFBQ2RNLEVBQVkyWSxRQUFVLElBQUlzQyxJQUFNLEtBQzlCeE8sRUFBWSxnQkFDTHpNLEVBQVkyWSxPQUFPLEdBQ3pCN2lCLEVBQVk0SixPQUNYNUosRUFBWThKLG1CQUNkdkIsRUFBS3VCLEdBQ0x0RCxFQUFpQnNELEVBQWtCOUosRUFBYSxvQkFDaERpSyxZQUFXLEtBQ0xDLEVBQVkyWSxTQUFXM1ksRUFBWTJZLFFBQVErQixTQUU3Q2piLEVBQXdCM0osRUFBWTRKLE1BQ3RDLEtBR04sRUFPSXdmLEdBQVksQ0FBQ25wQixFQUFVRCxLQUN2QkEsRUFBWXFGLFFBR1hoRSxFQUFlckIsRUFBWXFYLGVBSTNCa1MsR0FBWXRwQixFQUFVRCxJQUN6QnFXLElBQVUsRUFBRyxHQUpibVQsS0FLRixFQVFJRCxHQUFjLENBQUN0cEIsRUFBVUQsSUFDekJBLEVBQVk4YyxXQUFhOVgsRUFBWS9FLEVBQVNzTixhQUNoRHROLEVBQVNzTixXQUFXaEcsU0FDYixHQUVMdkgsRUFBWStjLGFBQWUvWCxFQUFZL0UsRUFBU3VOLGVBQ2xEdk4sRUFBU3VOLGFBQWFqRyxTQUNmLE1BRUx2SCxFQUFZNmMsZUFBZ0I3WCxFQUFZL0UsRUFBU3FOLGlCQUNuRHJOLEVBQVNxTixjQUFjL0YsUUFDaEIsSUFJTGlpQixHQUFvQixLQUNwQnZyQixTQUFTMloseUJBQXlCelAsYUFBc0QsbUJBQWhDbEssU0FBUzJaLGNBQWM2UixNQUNqRnhyQixTQUFTMlosY0FBYzZSLE1BQ3pCLEVBSUYsR0FBc0Isb0JBQVh0ckIsUUFBMEIsUUFBUWtjLEtBQUs3QixVQUFVa1IsV0FBYUMsU0FBU0MsS0FBS2pSLE1BQU0sdUJBQXdCLENBQ25ILE1BQU1rUixFQUFNLElBQUlyRSxLQUNWc0UsRUFBaUJDLGFBQWFDLFFBQVEsbUJBQ3ZDRixHQUVPRCxFQUFJbkUsVUFBWUYsS0FBS08sTUFBTStELElBQW1CLE1BQXdCLEdBQ2hGN2YsWUFBVyxLQUNUaE0sU0FBUzZELEtBQUtoRSxNQUFNbXNCLGNBQWdCLE9BQ3BDLE1BQU1DLEVBQWtCanNCLFNBQVNXLGNBQWMsU0FDL0NzckIsRUFBZ0JDLElBQU0sOERBQ3RCRCxFQUFnQkUsTUFBTyxFQUN2Qm5zQixTQUFTNkQsS0FBS3BELFlBQVl3ckIsR0FDMUJqZ0IsWUFBVyxLQUNUaWdCLEVBQWdCRyxPQUFPN0osT0FBTSxRQUUzQixHQUNELEtBQUssR0FDUCxLQWJIdUosYUFBYU8sUUFBUSxrQkFBbUIsR0FBR1QsSUFlL0MsQ0FHQW5qQixPQUFPNlUsT0FBT3lNLEdBQVdsYixVQUFXNlIsSUFHcENqWSxPQUFPNlUsT0FBT3lNLEdBQVl2RSxJQUcxQi9jLE9BQU8wTixLQUFLdUssSUFBaUIzWSxTQUFRZ1IsSUFLbkNnUixHQUFXaFIsR0FBTyxXQUNoQixHQUFJNUwsR0FDRixPQUFPQSxHQUFnQjRMLE1BQVF2TyxVQUVuQyxDQUFDLElBRUh1ZixHQUFXclMsY0FBZ0JBLEdBQzNCcVMsR0FBV3VDLFFBQVUsU0FFckIsTUFBTTFLLEdBQU9tSSxHQUliLE9BRkFuSSxHQUFLMkssUUFBVTNLLEdBRVJBLEVBRVIsQ0F2M0hpRjRLLFFBdzNIOUQsSUFBVHR3QixNQUF3QkEsS0FBS3V3QixjQUFhdndCLEtBQUt3d0IsS0FBT3h3QixLQUFLeXdCLFdBQWF6d0IsS0FBSzBsQixLQUFPMWxCLEtBQUs2dEIsV0FBYTd0QixLQUFLdXdCLGFBQ3RILG9CQUFvQnpzQixVQUFVLFNBQVNNLEVBQUVzc0IsR0FBRyxJQUFJL0YsRUFBRXZtQixFQUFFSyxjQUFjLFNBQVMsR0FBR0wsRUFBRXVzQixxQkFBcUIsUUFBUSxHQUFHcHNCLFlBQVlvbUIsR0FBR0EsRUFBRXRsQixXQUFXc2xCLEVBQUV0bEIsV0FBV3lSLFdBQVc2VCxFQUFFdGxCLFdBQVdDLFFBQVFvckIsUUFBUSxJQUFJL0YsRUFBRXBTLFVBQVVtWSxDQUF3QixDQUF0QixNQUFNdHNCLEdBQUd1bUIsRUFBRXpVLFVBQVV3YSxDQUFDLENBQUMsQ0FBNU0sQ0FBOE01c0IsU0FBUywydW9CLEdDNzNIalA4c0IsRUFBMkIsQ0FBQyxFQUdoQyxTQUFTQyxFQUFvQkMsR0FFNUIsSUFBSUMsRUFBZUgsRUFBeUJFLEdBQzVDLFFBQXFCaHdCLElBQWpCaXdCLEVBQ0gsT0FBT0EsRUFBYW54QixRQUdyQixJQUFJRixFQUFTa3hCLEVBQXlCRSxHQUFZLENBQ2pEbnhCLEdBQUlteEIsRUFFSmx4QixRQUFTLENBQUMsR0FPWCxPQUhBb3hCLEVBQW9CRixHQUFVamUsS0FBS25ULEVBQU9FLFFBQVNGLEVBQVFBLEVBQU9FLFFBQVNpeEIsR0FHcEVueEIsRUFBT0UsT0FDZixDQ3JCQWl4QixFQUFvQmxHLEVBQUtqckIsSUFDeEIsSUFBSXV4QixFQUFTdnhCLEdBQVVBLEVBQU93eEIsV0FDN0IsSUFBT3h4QixFQUFpQixRQUN4QixJQUFNLEVBRVAsT0FEQW14QixFQUFvQk0sRUFBRUYsRUFBUSxDQUFFaG5CLEVBQUdnbkIsSUFDNUJBLENBQU0sRUNMZEosRUFBb0JNLEVBQUksQ0FBQ3Z4QixFQUFTd3hCLEtBQ2pDLElBQUksSUFBSXZVLEtBQU91VSxFQUNYUCxFQUFvQi9KLEVBQUVzSyxFQUFZdlUsS0FBU2dVLEVBQW9CL0osRUFBRWxuQixFQUFTaWQsSUFDNUV0USxPQUFPOGtCLGVBQWV6eEIsRUFBU2lkLEVBQUssQ0FBRTJJLFlBQVksRUFBTTdOLElBQUt5WixFQUFXdlUsSUFFMUUsRUNORGdVLEVBQW9CL0osRUFBSSxDQUFDeGtCLEVBQUtndkIsSUFBVS9rQixPQUFPb0csVUFBVUMsZUFBZUMsS0FBS3ZRLEVBQUtndkIsR0NBbEZULEVBQW9CVSxRQUFLendCLEUsNElDV3JCa0IsRUFBVSxDQUFDLEVBRWZBLEVBQVFnRCxrQkFBb0IsSUFDNUJoRCxFQUFRMEMsY0FBZ0IsSUFFbEIxQyxFQUFRMEIsT0FBUyxTQUFjLEtBQU0sUUFFM0MxQixFQUFRZSxPQUFTLElBQ2pCZixFQUFRK0MsbUJBQXFCLElBRWhCLElBQUksSUFBUy9DLEdBS0osS0FBVyxZQUFpQixXQ3pCM0MsSUFBSSxFQUFRLEdBT25CZ0MsT0FBT3d0QixRQUxBLFdBQ0w3cUIsUUFBUThxQixJQUFJLG9CQUNaLEVBQU1oeUIsS0FBSyxJQUFJaXlCLEVBQUssR0FBR3BwQixNQUFNaUYsUUFBUyxHQUFHb2tCLFFBQVFwa0IsUUFBUyxHQUFHcWtCLFNBQVNya0IsUUFBUyxHQUFHc2tCLFlBQVl0a0IsUUFBUyxFQUFNak4sUUFDL0csRUFHQTBELE9BQU84dEIsTUFBUSxFQUVSLE1BQU1KLEVBQ1h6RyxZQUFhM1YsRUFBTXFjLEVBQVNDLEVBQVVDLEVBQWFseUIsR0FDakRLLEtBQUtzVixLQUFPQSxFQUNadFYsS0FBSzJ4QixRQUFVQSxFQUNmM3hCLEtBQUs0eEIsU0FBV0EsRUFDaEI1eEIsS0FBSzZ4QixZQUFjQSxFQUNuQjd4QixLQUFLTCxHQUFLQSxDQUNaLEUsc0JDNEJGLFNBQVNveUIsRUFBaUJ2bkIsR0FDZDFHLFNBQVNrdUIsZUFBZSxHQUFHeG5CLEVBQU91RyxRQUFRLE1BQU8sUUFDdkQyUSxpQkFBaUIsU0FBUyxLQUM1Qi9hLFFBQVE4cUIsSUFBSSxrQkFBa0JqbkIsS0FDZixjQUFYQSxHQUNGeW5CLEVBQVVILE1BQ1osR0FFSixDQUVPLFNBQVNHLEVBQVdILEdBQ3pCbnJCLFFBQVE4cUIsSUFBSSx1QkFFWixNQUFNUyxFQUFXcHVCLFNBQVNrdUIsZUFBZSxhQUl6QyxHQUZBRyxFQUFnQkQsR0FFSyxJQUFqQkosRUFBTXh4QixPQUFjLENBQ3RCcUcsUUFBUThxQixJQUFJLG1CQUNaLFNBQVUsQ0FDUm5wQixNQUFPLDJEQUNQRixLQUFNLFdBQ053UyxpQkFBaUIsRUFDakIzSCxnQkFBZ0IsRUFDaEJ5UCxjQUFjLEVBQ2ROLGtCQUFtQixNQUNuQkUsZUFBZ0IsT0FDZnJDLE1BQU1uZSxJQUNIQSxFQUFPb2YsYUFDVGtSLEdBQ0YsSUFFRixNQUFNQyxFQUFVdnVCLFNBQVNXLGNBQWMsTUFHdkMsT0FGQTR0QixFQUFROXRCLFlBQVlULFNBQVMwQixlQUFlLHlCQUM1QzBzQixFQUFTM3RCLFlBQVk4dEIsRUFFdkIsQ0FFQSxNQUFNQyxFQUFpQnh1QixTQUFTVyxjQUFjLE1BQzlDNnRCLEVBQWUvdEIsWUFBWVQsU0FBUzBCLGVBQWUsZUFDbkQ4c0IsRUFBZXh0QixhQUFhLFdBQVksS0FFeEMsTUFBTXl0QixFQUFXenVCLFNBQVNXLGNBQWMsT0FDeEM4dEIsRUFBU3p0QixhQUFhLFFBQVMsU0FDL0J5dEIsRUFBU3p0QixhQUFhLFdBQVksS0FFbENvdEIsRUFBUzN0QixZQUFZK3RCLEdBQ3JCSixFQUFTM3RCLFlBQVlndUIsR0FFckIsSUFBSyxJQUFJL3hCLEVBQUksRUFBR0EsRUFBSXN4QixFQUFNeHhCLE9BQVFFLElBQUssQ0FDckMsSUFBSWd5QixFQUFXVixFQUFNdHhCLEdBQUc4VSxLQUNwQm1kLEVBQWNYLEVBQU10eEIsR0FBR214QixRQUN2QmUsRUFBZVosRUFBTXR4QixHQUFHb3hCLFNBQ3hCZSxFQUFrQmIsRUFBTXR4QixHQUFHcXhCLFlBRTNCZSxFQUFPOXVCLFNBQVNXLGNBQWMsT0FDbENtdUIsRUFBSzl0QixhQUFhLFFBQVMsUUFFM0IsSUFBSSt0QixFQUFXL3VCLFNBQVNXLGNBQWMsTUFDdENvdUIsRUFBU3R1QixZQUFZVCxTQUFTMEIsZUFBZWd0QixJQUM3Q0ssRUFBU25SLGlCQUFpQixTQUFTLEtBQ2pDb1IsRUFBWWhCLEVBQU10eEIsR0FBRyxJQUd2QixJQUFJdXlCLEVBQWtCanZCLFNBQVNXLGNBQWMsS0FDN0NzdUIsRUFBZ0J4dUIsWUFBWVQsU0FBUzBCLGVBQWVtdEIsSUFFcEQsSUFBSUssRUFBYWx2QixTQUFTVyxjQUFjLE9BQ3BDd3VCLEVBQWVudkIsU0FBU1csY0FBYyxPQUMxQ3d1QixFQUFhMXVCLFlBQVlULFNBQVMwQixlQUFla3RCLElBQ2pELElBQUlRLEVBQWNwdkIsU0FBU1csY0FBYyxPQUN6Q3l1QixFQUFZM3VCLFlBQVlULFNBQVMwQixlQUFlaXRCLElBRWhETyxFQUFXRyxPQUFPRixHQUNsQkQsRUFBV0csT0FBT0QsR0FFbEJOLEVBQUtydUIsWUFBWXN1QixHQUNqQkQsRUFBS3J1QixZQUFZd3VCLEdBQ2pCSCxFQUFLcnVCLFlBQVl5dUIsR0FFakJULEVBQVNodUIsWUFBWXF1QixFQUN2QixDQUNGLENBRUEsU0FBU1IsSUFDUHpyQixRQUFROHFCLElBQUksa0JBQ1osTUFBTVMsRUFBV3B1QixTQUFTa3VCLGVBQWUsYUFFekNHLEVBQWdCRCxHQUVoQixNQUFNa0IsRUFBYXR2QixTQUFTVyxjQUFjLE1BQzFDMnVCLEVBQVc3dUIsWUFBWVQsU0FBUzBCLGVBQWUseUNBQy9DNHRCLEVBQVd0dUIsYUFBYSxXQUFZLEtBRXBDLE1BQU11dUIsRUFBV3Z2QixTQUFTVyxjQUFjLFFBQ3hDNHVCLEVBQVN2dUIsYUFBYSxLQUFNLFlBQzVCdXVCLEVBQVN2dUIsYUFBYSxXQUFZLDBDQUNsQ3V1QixFQUFTdnVCLGFBQWEsV0FBWSxLQUVsQ290QixFQUFTM3RCLFlBQVk2dUIsR0FDckJsQixFQUFTM3RCLFlBQVk4dUIsR0FFckIsSUFBSyxJQUFJN3lCLEVBQUksRUFBR0EsRUFBSSxFQUFHQSxJQUFLLENBQzFCLElBQUk4eUIsRUFBVXh2QixTQUFTVyxjQUFjLE9BQ3JDNnVCLEVBQVF4dUIsYUFBYSxRQUFTLFFBQzlCdXVCLEVBQVM5dUIsWUFBWSt1QixFQUN2QixDQU1BLE1BQU1DLEVBQWV6dkIsU0FBU1csY0FBYyxTQUM1Qzh1QixFQUFhenVCLGFBQWEsT0FBUSxVQUNsQ3l1QixFQUFhenVCLGFBQWEsUUFBUyxVQUNuQ3l1QixFQUFhenVCLGFBQWEsS0FBTSxVQUNoQ3l1QixFQUFhenVCLGFBQWEsT0FBUSxVQUlsQyxNQUFNMHVCLEVBQWExdkIsU0FBU1csY0FBYyxTQUMxQyt1QixFQUFXQyxRQUFVLFFBQ3JCRCxFQUFXanZCLFlBQVlULFNBQVMwQixlQUFlLFlBRS9DLE1BQU1rdUIsRUFBYTV2QixTQUFTVyxjQUFjLFNBQzFDaXZCLEVBQVc1dUIsYUFBYSxPQUFRLFFBQ2hDNHVCLEVBQVc1dUIsYUFBYSxLQUFNLFNBQzlCNHVCLEVBQVc1dUIsYUFBYSxPQUFRLFNBQ2hDNHVCLEVBQVdDLFVBQVcsRUFJdEIsTUFBTUMsRUFBZTl2QixTQUFTVyxjQUFjLFNBQzVDbXZCLEVBQWFILFFBQVUsVUFDdkJHLEVBQWFydkIsWUFBWVQsU0FBUzBCLGVBQWUsZUFFakQsTUFBTXF1QixFQUFlL3ZCLFNBQVNXLGNBQWMsU0FDNUNvdkIsRUFBYS91QixhQUFhLE9BQVEsUUFDbEMrdUIsRUFBYS91QixhQUFhLEtBQU0sV0FDaEMrdUIsRUFBYS91QixhQUFhLE9BQVEsV0FDbEMrdUIsRUFBYUYsVUFBVyxFQUl4QixNQUFNRyxFQUFnQmh3QixTQUFTVyxjQUFjLFNBQzdDcXZCLEVBQWNMLFFBQVUsV0FDeEJLLEVBQWN2dkIsWUFBWVQsU0FBUzBCLGVBQWUsZUFFbEQsTUFBTXV1QixFQUFnQmp3QixTQUFTVyxjQUFjLFVBQzdDc3ZCLEVBQWNqdkIsYUFBYSxLQUFNLFlBQ2pDaXZCLEVBQWNqdkIsYUFBYSxPQUFRLFlBQ25DaXZCLEVBQWNKLFVBQVcsRUFFekIsTUFBTUssRUFBZWx3QixTQUFTVyxjQUFjLFVBQzVDdXZCLEVBQWF6bUIsTUFBUSxPQUNyQnltQixFQUFhenZCLFlBQVlULFNBQVMwQixlQUFlLFNBRWpELE1BQU15dUIsRUFBY253QixTQUFTVyxjQUFjLFVBQzNDd3ZCLEVBQVkxbUIsTUFBUSxNQUNwQjBtQixFQUFZMXZCLFlBQVlULFNBQVMwQixlQUFlLFFBRWhELE1BQU0wdUIsRUFBaUJwd0IsU0FBU1csY0FBYyxVQUM5Q3l2QixFQUFlM21CLE1BQVEsU0FDdkIybUIsRUFBZTN2QixZQUFZVCxTQUFTMEIsZUFBZSxXQUVuRCxNQUFNMnVCLEVBQWVyd0IsU0FBU1csY0FBYyxVQUM1QzB2QixFQUFhNW1CLE1BQVEsT0FDckI0bUIsRUFBYTV2QixZQUFZVCxTQUFTMEIsZUFBZSxTQUVqRHV1QixFQUFjeHZCLFlBQVl5dkIsR0FDMUJELEVBQWN4dkIsWUFBWTB2QixHQUMxQkYsRUFBY3h2QixZQUFZMnZCLEdBQzFCSCxFQUFjeHZCLFlBQVk0dkIsR0FJMUIsTUFBTUMsRUFBbUJ0d0IsU0FBU1csY0FBYyxTQUNoRDJ2QixFQUFpQlgsUUFBVSxjQUMzQlcsRUFBaUI3dkIsWUFBWVQsU0FBUzBCLGVBQWUsa0JBRXJELE1BQU02dUIsRUFBbUJ2d0IsU0FBU1csY0FBYyxZQUNoRDR2QixFQUFpQnZ2QixhQUFhLEtBQU0sZUFDcEN1dkIsRUFBaUJ2dkIsYUFBYSxPQUFRLGVBQ3RDdXZCLEVBQWlCdnZCLGFBQWEsT0FBUSxLQUN0Q3V2QixFQUFpQnZ2QixhQUFhLE9BQVEsTUFDdEN1dkIsRUFBaUJWLFVBQVcsRUFJNUJOLEVBQVN6bkIsV0FBVyxHQUFHckgsWUFBWWd2QixHQUVuQ0YsRUFBU3puQixXQUFXLEdBQUdySCxZQUFZaXZCLEdBQ25DSCxFQUFTem5CLFdBQVcsR0FBR3JILFlBQVltdkIsR0FFbkNMLEVBQVN6bkIsV0FBVyxHQUFHckgsWUFBWXF2QixHQUNuQ1AsRUFBU3puQixXQUFXLEdBQUdySCxZQUFZc3ZCLEdBRW5DUixFQUFTem5CLFdBQVcsR0FBR3JILFlBQVl1dkIsR0FDbkNULEVBQVN6bkIsV0FBVyxHQUFHckgsWUFBWXd2QixHQUVuQ1YsRUFBU3puQixXQUFXLEdBQUdySCxZQUFZNnZCLEdBQ25DZixFQUFTem5CLFdBQVcsR0FBR3JILFlBQVk4dkIsRUFDckMsQ0FFQSxTQUFTQyxJQUNQLFNBQVUsQ0FDUmhzQixNQUFPLDZDQUNQRixLQUFNLFdBQ053UyxpQkFBaUIsRUFDakIzSCxnQkFBZ0IsRUFDaEJ5UCxjQUFjLEVBQ2ROLGtCQUFtQix5QkFDbkJFLGVBQWdCLHNCQUNmckMsTUFBTW5lLElBQ0hBLEVBQU9vZixZQUNUa1IsSUFHQUgsRUFBVUgsTUFDWixHQUVKLENBSUEsU0FBU0ssRUFBaUJELEdBQ3hCLElBQUlxQyxFQUFRckMsRUFBU3NDLGtCQUNyQixLQUFPRCxHQUNMQSxFQUFNcnhCLFNBQ05xeEIsRUFBUXJDLEVBQVNzQyxpQkFFckIsQ0FXQSxTQUFTMUIsRUFBYTJCLEdBQ3BCLE1BQU12QyxFQUFXcHVCLFNBQVNrdUIsZUFBZSxhQUN6Q0csRUFBZ0JELEdBRWhCLE1BQU1rQixFQUFhdHZCLFNBQVNXLGNBQWMsTUFDMUMydUIsRUFBVzd1QixZQUFZVCxTQUFTMEIsZUFBZSxHQUFHaXZCLEVBQUtuZixTQUN2RDhkLEVBQVd6dkIsTUFBTSt3QixRQUFVLElBRTNCLE1BQU1DLEVBQVc3d0IsU0FBU1csY0FBYyxPQUN4Q2t3QixFQUFTaHhCLE1BQU0rd0IsUUFBVSxJQUN6QkMsRUFBUzd2QixhQUFhLFFBQVMsYUFFL0JvdEIsRUFBUzN0QixZQUFZNnVCLEdBQ3JCbEIsRUFBUzN0QixZQUFZb3dCLEdBRXJCLE1BQU1sQyxFQUFjM3VCLFNBQVNXLGNBQWMsT0FDM0NndUIsRUFBWWx1QixZQUFZVCxTQUFTMEIsZUFBZSxRQUFRaXZCLEVBQUs5QyxZQUM3RGMsRUFBWTN0QixhQUFhLFFBQVMsYUFFbEMsTUFBTTR0QixFQUFlNXVCLFNBQVNXLGNBQWMsT0FDNUNpdUIsRUFBYW51QixZQUFZVCxTQUFTMEIsZUFBZSxhQUFhaXZCLEVBQUs3QyxhQUNuRWMsRUFBYTV0QixhQUFhLFFBQVMsaUJBRW5DLE1BQU02dEIsRUFBa0I3dUIsU0FBU1csY0FBYyxPQUMvQ2t1QixFQUFnQnB1QixZQUFZVCxTQUFTMEIsZUFBZSxpQkFBaUJpdkIsRUFBSzVDLGdCQUMxRWMsRUFBZ0I3dEIsYUFBYSxRQUFTLG9CQUV0QyxNQUFNOHZCLEVBQWE5d0IsU0FBU1csY0FBYyxPQUMxQ213QixFQUFXcmMsVUFBWSx5Q0FDdkJxYyxFQUFXOXZCLGFBQWEsUUFBUyxlQUNqQzh2QixFQUFXbFQsaUJBQWlCLFNBQVMsS0FDbkMsU0FBVSxDQUNScFosTUFBTyw2Q0FDUGlPLEtBQU0sb0NBQ05uTyxLQUFNLFVBQ044SyxrQkFBa0IsRUFDbEJPLG1CQUFvQixVQUNwQkcsa0JBQW1CLE9BQ25Cd08sa0JBQW1CLG9CQUNsQm5DLE1BQU1uZSxJQUNIQSxFQUFPb2YsYUFDVCxTQUNFLFdBQ0EsOEJBQ0EsVUFFSixHQUNELElBR0h5VCxFQUFTcHdCLFlBQVlrdUIsR0FDckJrQyxFQUFTcHdCLFlBQVltdUIsR0FDckJpQyxFQUFTcHdCLFlBQVlvdUIsR0FDckJnQyxFQUFTcHdCLFlBQVlxd0IsRUFDdkIsQ0F6RUE1d0IsT0FBT3N3QixlQUFpQkEsRUFVeEJ0d0IsT0FBT211QixnQkFBa0JBLEVBT3pCbnVCLE9BQU82d0IsWUFMUCxXQUNFckQsVUFDQThDLEdBQ0YsRUNyUkF0d0IsT0FBTzh3QixPQUFTLFlESlQsV0FDTG51QixRQUFROHFCLElBQUksc0JBQ1osTUFBTXR4QixFQUFVMkQsU0FBU2t1QixlQUFlLFdBRWxDK0MsRUFBVWp4QixTQUFTVyxjQUFjLE9BQ3ZDc3dCLEVBQVFqd0IsYUFBYSxLQUFNLFlBQzNCLE1BQU1rd0IsRUFBYWx4QixTQUFTVyxjQUFjLE9BQzFDdXdCLEVBQVdsd0IsYUFBYSxLQUFNLGVBQzlCLE1BQU15dEIsRUFBV3p1QixTQUFTVyxjQUFjLE9BQ3hDOHRCLEVBQVN6dEIsYUFBYSxLQUFNLGFBRTVCaXdCLEVBQVF4d0IsWUFBWXl3QixHQUNwQkQsRUFBUXh3QixZQUFZZ3VCLEdBRXBCLE1BQU0zWixFQUFPOVUsU0FBU1csY0FBYyxPQUNwQ21VLEVBQUs5VCxhQUFhLEtBQU0sYUFFeEIzRSxFQUFRb0UsWUFBWXd3QixHQUNwQjUwQixFQUFRb0UsWUFBWXFVLEdBRXBCLE1BQU1xYyxFQUFVLENBQUMsUUFBUyxXQUFZLFdBQVksVUFBVyxhQUV2REMsRUFBYXB4QixTQUFTVyxjQUFjLE1BRTFDLElBQUkwd0IsRUFDQUMsRUFFSixJQUFLLElBQUk1MEIsRUFBSSxFQUFHQSxFQUFJeTBCLEVBQVEzMEIsT0FBUUUsSUFDbEMyMEIsRUFBY3J4QixTQUFTVyxjQUFjLE1BQ3JDMndCLEVBQWF0eEIsU0FBUzBCLGVBQWV5dkIsRUFBUXowQixJQUM3QzIwQixFQUFZcndCLGFBQWEsS0FBTSxHQUFHbXdCLEVBQVF6MEIsR0FBR3VRLFFBQVEsTUFBTyxRQUM1RG9rQixFQUFZNXdCLFlBQVk2d0IsR0FDeEJGLEVBQVczd0IsWUFBWTR3QixHQUd6QkgsRUFBV3p3QixZQUFZMndCLEdBRXZCLElBQUssSUFBSTEwQixFQUFJLEVBQUdBLEVBQUl5MEIsRUFBUTMwQixPQUFRRSxJQUNsQ3V4QixFQUFnQmtELEVBQVF6MEIsR0FHNUIsQ0NwQ0k2MEIsR0FDQXBELEVBQVUsRUFDZCxDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vb2Rpbi10by1kby8uL3NyYy9zdHlsZS5jc3MiLCJ3ZWJwYWNrOi8vb2Rpbi10by1kby8uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanMiLCJ3ZWJwYWNrOi8vb2Rpbi10by1kby8uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzIiwid2VicGFjazovL29kaW4tdG8tZG8vLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanMiLCJ3ZWJwYWNrOi8vb2Rpbi10by1kby8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanMiLCJ3ZWJwYWNrOi8vb2Rpbi10by1kby8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydFN0eWxlRWxlbWVudC5qcyIsIndlYnBhY2s6Ly9vZGluLXRvLWRvLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzLmpzIiwid2VicGFjazovL29kaW4tdG8tZG8vLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qcyIsIndlYnBhY2s6Ly9vZGluLXRvLWRvLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVUYWdUcmFuc2Zvcm0uanMiLCJ3ZWJwYWNrOi8vb2Rpbi10by1kby8uL25vZGVfbW9kdWxlcy9zd2VldGFsZXJ0Mi9kaXN0L3N3ZWV0YWxlcnQyLmFsbC5qcyIsIndlYnBhY2s6Ly9vZGluLXRvLWRvL3dlYnBhY2svYm9vdHN0cmFwIiwid2VicGFjazovL29kaW4tdG8tZG8vd2VicGFjay9ydW50aW1lL2NvbXBhdCBnZXQgZGVmYXVsdCBleHBvcnQiLCJ3ZWJwYWNrOi8vb2Rpbi10by1kby93ZWJwYWNrL3J1bnRpbWUvZGVmaW5lIHByb3BlcnR5IGdldHRlcnMiLCJ3ZWJwYWNrOi8vb2Rpbi10by1kby93ZWJwYWNrL3J1bnRpbWUvaGFzT3duUHJvcGVydHkgc2hvcnRoYW5kIiwid2VicGFjazovL29kaW4tdG8tZG8vd2VicGFjay9ydW50aW1lL25vbmNlIiwid2VicGFjazovL29kaW4tdG8tZG8vLi9zcmMvc3R5bGUuY3NzPzcxNjMiLCJ3ZWJwYWNrOi8vb2Rpbi10by1kby8uL3NyYy90YXNrTG9naWMuanMiLCJ3ZWJwYWNrOi8vb2Rpbi10by1kby8uL3NyYy9wYWdlTWFuYWdlci5qcyIsIndlYnBhY2s6Ly9vZGluLXRvLWRvLy4vc3JjL2luZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIFwiI2NvbnRlbnQge1xcbiAgICBkaXNwbGF5OiBncmlkICFpbXBvcnRhbnQ7XFxuICAgIGdyaWQtdGVtcGxhdGUtY29sdW1uczogMWZyIDNmcjtcXG4gICAgZ3JpZC10ZW1wbGF0ZS1yb3dzOiAxZnIgNGZyO1xcblxcbiAgICBwb3NpdGlvbjogZml4ZWQ7XFxuICAgIHRvcDogMDtcXG4gICAgcmlnaHQ6IDA7XFxuICAgIGJvdHRvbTogMDtcXG4gICAgbGVmdDogMDtcXG59XFxuXFxuI3NpZGUtYmFyIHtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogZ3JleTtcXG5cXG4gICAgZ3JpZC1jb2x1bW46IDEgLyAyO1xcbiAgICBncmlkLXJvdzogMSAvIC0xO1xcbiAgICBcXG4gICAgZGlzcGxheTogZ3JpZDtcXG4gICAgZ3JpZC10ZW1wbGF0ZS1yb3dzOiAxZnIgNGZyO1xcbn1cXG5cXG4jZmlsdGVyLXRhYnMge1xcbiAgICBib3JkZXItYm90dG9tOiBzb2xpZCA1cHggZGFya2dyYXk7XFxuICAgIGdyaWQtcm93OiAxIC8gMjtcXG59XFxuXFxuI2ZpbHRlci10YWJzID4gdWwge1xcbiAgICBsaXN0LXN0eWxlOiBub25lO1xcbiAgICBwYWRkaW5nOiAwO1xcbiAgICBtYXJnaW4tbGVmdDogNDBweDtcXG4gICAgZGlzcGxheTogZ3JpZDtcXG4gICAgZ2FwOiAyNHB4O1xcbn1cXG5cXG5saSB7XFxuICAgIHBhZGRpbmc6IDA7XFxuICAgIG1hcmdpbjogMDtcXG59XFxuXFxuI3Rhc2stbGlzdCB7XFxuICAgIGdyaWQtcm93OiAyIC8gLTE7XFxufVxcblxcbiN0YXNrLWluZm8ge1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB3aGl0ZTtcXG4gICAgcGFkZGluZzogMTBweDtcXG5cXG4gICAgZ3JpZC1jb2x1bW46IDI7XFxuICAgIGdyaWQtcm93OiAxIC8gLTE7XFxuXFxuICAgZGlzcGxheTogZ3JpZDtcXG4gICBncmlkLXRlbXBsYXRlLXJvd3M6IDEwMHB4IDFmcjtcXG59XFxuXFxuI3Rhc2staW5mbyA+IGgxIHtcXG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xcbiAgICB0b3A6IDIwcHg7XFxuICAgIGxlZnQ6IDIwcHg7XFxufVxcblxcbmZvcm0ge1xcbiAgICBkaXNwbGF5OiBncmlkO1xcbiAgICBncmlkLXRlbXBsYXRlLWNvbHVtbnM6IDFmciAxZnIgMWZyO1xcbiAgICBncmlkLXRlbXBsYXRlLXJvd3M6IDUwcHggMTAwcHggMTAwcHg7XFxuICAgIGJvcmRlcjogc29saWQgMnB4IGdyZXk7XFxufVxcblxcbmZvcm0gPiBkaXYge1xcbiAgICBib3JkZXI6IHNvbGlkIDFweCBncmV5O1xcbn1cXG5cXG4uZGF0YSB7XFxuICAgIGRpc3BsYXk6IGZsZXg7XFxuICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xcbiAgICBwYWRkaW5nOiAxMHB4O1xcbn1cXG5cXG4uZGF0YTpmaXJzdC1jaGlsZCB7XFxuICAgIGdyaWQtY29sdW1uOiAxIC8gMjtcXG4gICAgZ3JpZC1yb3c6IDE7XFxuICAgIHBhZGRpbmc6IDVweDtcXG4gICAgYm9yZGVyOiAwcHg7XFxufVxcblxcbi5kYXRhOm50aC1jaGlsZCgyKSB7XFxuICAgIGdyaWQtY29sdW1uOiAxIC8gMjtcXG4gICAgZ3JpZC1yb3c6IDI7XFxufVxcblxcbi5kYXRhOm50aC1jaGlsZCgzKSB7XFxuICAgIGdyaWQtY29sdW1uOiAyIC8gMztcXG4gICAgZ3JpZC1yb3c6IDI7XFxufVxcblxcbi5kYXRhOm50aC1jaGlsZCg0KSB7XFxuICAgIGdyaWQtY29sdW1uOiAzIC8gMztcXG4gICAgZ3JpZC1yb3c6IDI7XFxufVxcblxcbi5kYXRhOmxhc3QtY2hpbGQge1xcbiAgICBncmlkLWNvbHVtbjogMSAvIC0xO1xcbiAgICBncmlkLXJvdzogMztcXG59XFxuXFxubGFiZWwge1xcbiAgICBwYWRkaW5nLXJpZ2h0OiAxMHB4O1xcbn1cXG5cXG5pbnB1dCwgdGV4dGFyZWEsIHNlbGVjdCB7XFxuICAgIGFwcGVhcmFuY2U6IG5vbmU7XFxufVxcblxcbmlucHV0OmZvY3VzIHtcXG4gICAgYm9yZGVyOiBsaWdodGJsdWUgc29saWQ7XFxufVxcblxcbmlucHV0W3R5cGU9XFxcInN1Ym1pdFxcXCJdIHtcXG4gICAgYXBwZWFyYW5jZTogbm9uZTtcXG4gICAgcGFkZGluZzogNXB4IDIwcHg7XFxuICAgIGJvcmRlci1yYWRpdXM6IDEwcHg7XFxuICAgIGJhY2tncm91bmQtY29sb3I6IHJnYigzNiwgMjcsIDEzNCk7XFxuICAgIGJvcmRlcjogMXB4IHNvbGlkIHJnYigzNiwgMjcsIDEzNCk7XFxuICAgIGNvbG9yOiB3aGl0ZTtcXG59XFxuXFxuLnRhc2tzIHtcXG4gICAgZGlzcGxheTogZ3JpZDtcXG4gICAgZ3JpZC10ZW1wbGF0ZS1yb3dzOiAyNTBweCAyNTBweCAyNTBweDtcXG4gICAgZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiAxZnIgMWZyIDFmcjtcXG4gICAgZ2FwOiAzMHB4O1xcbiAgICBwYWRkaW5nOiAyMHB4O1xcbiAgICBncmlkLWNvbHVtbjogMTtcXG4gICAgZ3JpZC1yb3c6IDIgLyAtMTtcXG4gICAgY29sb3I6IGJsYWNrO1xcbiAgICBvdmVyZmxvdzogYXV0bztcXG59XFxuICAgIFxcbi5jYXJkIHtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogZ3JleTtcXG4gICAgcGFkZGluZzogMTBweDtcXG4gICAgYm9yZGVyOiA1cHggc29saWQgcmdiKDM2LCAyNywgMTM0KTtcXG4gICAgYm9yZGVyLWxlZnQ6IDE1cHggc29saWQgcmdiKDM2LCAyNywgMTM0KTtcXG4gICAgYm9yZGVyLXJhZGl1czogMTBweDtcXG5cXG4gICAgZGlzcGxheTogZ3JpZDtcXG4gICAgZ3JpZC10ZW1wbGF0ZS1yb3dzOiA1MHB4IDEwMHB4IDUwcHg7XFxuICAgIFxcbn1cXG5cXG4uY2FyZCA+IGgzIHtcXG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xcbiAgICBsZWZ0OiAxMHB4O1xcbiAgICB0b3A6IDEwcHg7XFxuICAgIGdyaWQtcm93OiAxO1xcbn1cXG5cXG4uY2FyZCA+IHAge1xcbiAgICBwb3NpdGlvbjogcmVsYXRpdmU7XFxuICAgIGxlZnQ6IDEwcHg7XFxuICAgIGdyaWQtcm93OiAyO1xcbiAgICB3aWR0aDogNzUlO1xcbn1cXG5cXG4uY2FyZCA+IGRpdiB7XFxuICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG4gICAgZ3JpZC1yb3c6IDM7XFxuICAgIGRpc3BsYXk6IGZsZXg7XFxuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxuICAgIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcXG4gICAgZ2FwOiAyMHB4O1xcbiAgICBwYWRkaW5nLXJpZ2h0OiAyMHB4O1xcbn1cXG5cXG4udGFzay1kYXRhIHtcXG4gICAgaGVpZ2h0OiAzMDBweDtcXG4gICAgd2lkdGg6IDUwMHB4O1xcbiAgICBkaXNwbGF5OiBncmlkO1xcbiAgICBncmlkLXRlbXBsYXRlLWNvbHVtbnM6IDNmciAxZnI7XFxuICAgIGdyaWQtdGVtcGxhdGUtcm93czogNTBweCAyMDBweCA1MHB4O1xcbiAgICBwb3NpdGlvbjogcmVsYXRpdmU7XFxuICAgIGxlZnQ6IDIwcHg7XFxuICAgIGJvcmRlcjogc29saWQgNXB4IGdyZXk7XFxuICAgIHBhZGRpbmc6IDEwcHg7XFxufVxcblxcbi50YXNrLWRhdGUge1xcbiAgICBncmlkLXJvdzogMTtcXG4gICAgZ3JpZC1jb2x1bW46IDE7XFxuICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG4gICAgdG9wOiAxMHB4O1xcbn1cXG5cXG4udGFzay1wcmlvcml0eSB7XFxuICAgIGdyaWQtcm93OiAxO1xcbiAgICBncmlkLWNvbHVtbjogMjtcXG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xcbiAgICB0b3A6IDEwcHg7XFxufVxcblxcbi50YXNrLWRlc2NyaXB0aW9uIHtcXG4gICAgZ3JpZC1yb3c6IDI7XFxuICAgIGdyaWQtY29sdW1uOiAxIC8gLTE7XFxuICAgIGJvcmRlcjogMnB4IHNvbGlkIGdyZXk7XFxuICAgIHBhZGRpbmc6IDEwcHg7XFxufVxcblxcbi5kZWxldGUtaWNvbiB7XFxuICAgIGdyaWQtcm93OiAzO1xcbiAgICBncmlkLWNvbHVtbjogMSAvIC0xO1xcbiAgICBwb3NpdGlvbjogcmVsYXRpdmU7XFxuICAgIHRvcDogMjBweDtcXG59XCIsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovLy4vc3JjL3N0eWxlLmNzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFBQTtJQUNJLHdCQUF3QjtJQUN4Qiw4QkFBOEI7SUFDOUIsMkJBQTJCOztJQUUzQixlQUFlO0lBQ2YsTUFBTTtJQUNOLFFBQVE7SUFDUixTQUFTO0lBQ1QsT0FBTztBQUNYOztBQUVBO0lBQ0ksc0JBQXNCOztJQUV0QixrQkFBa0I7SUFDbEIsZ0JBQWdCOztJQUVoQixhQUFhO0lBQ2IsMkJBQTJCO0FBQy9COztBQUVBO0lBQ0ksaUNBQWlDO0lBQ2pDLGVBQWU7QUFDbkI7O0FBRUE7SUFDSSxnQkFBZ0I7SUFDaEIsVUFBVTtJQUNWLGlCQUFpQjtJQUNqQixhQUFhO0lBQ2IsU0FBUztBQUNiOztBQUVBO0lBQ0ksVUFBVTtJQUNWLFNBQVM7QUFDYjs7QUFFQTtJQUNJLGdCQUFnQjtBQUNwQjs7QUFFQTtJQUNJLHVCQUF1QjtJQUN2QixhQUFhOztJQUViLGNBQWM7SUFDZCxnQkFBZ0I7O0dBRWpCLGFBQWE7R0FDYiw2QkFBNkI7QUFDaEM7O0FBRUE7SUFDSSxrQkFBa0I7SUFDbEIsU0FBUztJQUNULFVBQVU7QUFDZDs7QUFFQTtJQUNJLGFBQWE7SUFDYixrQ0FBa0M7SUFDbEMsb0NBQW9DO0lBQ3BDLHNCQUFzQjtBQUMxQjs7QUFFQTtJQUNJLHNCQUFzQjtBQUMxQjs7QUFFQTtJQUNJLGFBQWE7SUFDYix1QkFBdUI7SUFDdkIsbUJBQW1CO0lBQ25CLGFBQWE7QUFDakI7O0FBRUE7SUFDSSxrQkFBa0I7SUFDbEIsV0FBVztJQUNYLFlBQVk7SUFDWixXQUFXO0FBQ2Y7O0FBRUE7SUFDSSxrQkFBa0I7SUFDbEIsV0FBVztBQUNmOztBQUVBO0lBQ0ksa0JBQWtCO0lBQ2xCLFdBQVc7QUFDZjs7QUFFQTtJQUNJLGtCQUFrQjtJQUNsQixXQUFXO0FBQ2Y7O0FBRUE7SUFDSSxtQkFBbUI7SUFDbkIsV0FBVztBQUNmOztBQUVBO0lBQ0ksbUJBQW1CO0FBQ3ZCOztBQUVBO0lBQ0ksZ0JBQWdCO0FBQ3BCOztBQUVBO0lBQ0ksdUJBQXVCO0FBQzNCOztBQUVBO0lBQ0ksZ0JBQWdCO0lBQ2hCLGlCQUFpQjtJQUNqQixtQkFBbUI7SUFDbkIsa0NBQWtDO0lBQ2xDLGtDQUFrQztJQUNsQyxZQUFZO0FBQ2hCOztBQUVBO0lBQ0ksYUFBYTtJQUNiLHFDQUFxQztJQUNyQyxrQ0FBa0M7SUFDbEMsU0FBUztJQUNULGFBQWE7SUFDYixjQUFjO0lBQ2QsZ0JBQWdCO0lBQ2hCLFlBQVk7SUFDWixjQUFjO0FBQ2xCOztBQUVBO0lBQ0ksc0JBQXNCO0lBQ3RCLGFBQWE7SUFDYixrQ0FBa0M7SUFDbEMsd0NBQXdDO0lBQ3hDLG1CQUFtQjs7SUFFbkIsYUFBYTtJQUNiLG1DQUFtQzs7QUFFdkM7O0FBRUE7SUFDSSxrQkFBa0I7SUFDbEIsVUFBVTtJQUNWLFNBQVM7SUFDVCxXQUFXO0FBQ2Y7O0FBRUE7SUFDSSxrQkFBa0I7SUFDbEIsVUFBVTtJQUNWLFdBQVc7SUFDWCxVQUFVO0FBQ2Q7O0FBRUE7SUFDSSxrQkFBa0I7SUFDbEIsV0FBVztJQUNYLGFBQWE7SUFDYixtQkFBbUI7SUFDbkIsOEJBQThCO0lBQzlCLFNBQVM7SUFDVCxtQkFBbUI7QUFDdkI7O0FBRUE7SUFDSSxhQUFhO0lBQ2IsWUFBWTtJQUNaLGFBQWE7SUFDYiw4QkFBOEI7SUFDOUIsbUNBQW1DO0lBQ25DLGtCQUFrQjtJQUNsQixVQUFVO0lBQ1Ysc0JBQXNCO0lBQ3RCLGFBQWE7QUFDakI7O0FBRUE7SUFDSSxXQUFXO0lBQ1gsY0FBYztJQUNkLGtCQUFrQjtJQUNsQixTQUFTO0FBQ2I7O0FBRUE7SUFDSSxXQUFXO0lBQ1gsY0FBYztJQUNkLGtCQUFrQjtJQUNsQixTQUFTO0FBQ2I7O0FBRUE7SUFDSSxXQUFXO0lBQ1gsbUJBQW1CO0lBQ25CLHNCQUFzQjtJQUN0QixhQUFhO0FBQ2pCOztBQUVBO0lBQ0ksV0FBVztJQUNYLG1CQUFtQjtJQUNuQixrQkFBa0I7SUFDbEIsU0FBUztBQUNiXCIsXCJzb3VyY2VzQ29udGVudFwiOltcIiNjb250ZW50IHtcXG4gICAgZGlzcGxheTogZ3JpZCAhaW1wb3J0YW50O1xcbiAgICBncmlkLXRlbXBsYXRlLWNvbHVtbnM6IDFmciAzZnI7XFxuICAgIGdyaWQtdGVtcGxhdGUtcm93czogMWZyIDRmcjtcXG5cXG4gICAgcG9zaXRpb246IGZpeGVkO1xcbiAgICB0b3A6IDA7XFxuICAgIHJpZ2h0OiAwO1xcbiAgICBib3R0b206IDA7XFxuICAgIGxlZnQ6IDA7XFxufVxcblxcbiNzaWRlLWJhciB7XFxuICAgIGJhY2tncm91bmQtY29sb3I6IGdyZXk7XFxuXFxuICAgIGdyaWQtY29sdW1uOiAxIC8gMjtcXG4gICAgZ3JpZC1yb3c6IDEgLyAtMTtcXG4gICAgXFxuICAgIGRpc3BsYXk6IGdyaWQ7XFxuICAgIGdyaWQtdGVtcGxhdGUtcm93czogMWZyIDRmcjtcXG59XFxuXFxuI2ZpbHRlci10YWJzIHtcXG4gICAgYm9yZGVyLWJvdHRvbTogc29saWQgNXB4IGRhcmtncmF5O1xcbiAgICBncmlkLXJvdzogMSAvIDI7XFxufVxcblxcbiNmaWx0ZXItdGFicyA+IHVsIHtcXG4gICAgbGlzdC1zdHlsZTogbm9uZTtcXG4gICAgcGFkZGluZzogMDtcXG4gICAgbWFyZ2luLWxlZnQ6IDQwcHg7XFxuICAgIGRpc3BsYXk6IGdyaWQ7XFxuICAgIGdhcDogMjRweDtcXG59XFxuXFxubGkge1xcbiAgICBwYWRkaW5nOiAwO1xcbiAgICBtYXJnaW46IDA7XFxufVxcblxcbiN0YXNrLWxpc3Qge1xcbiAgICBncmlkLXJvdzogMiAvIC0xO1xcbn1cXG5cXG4jdGFzay1pbmZvIHtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogd2hpdGU7XFxuICAgIHBhZGRpbmc6IDEwcHg7XFxuXFxuICAgIGdyaWQtY29sdW1uOiAyO1xcbiAgICBncmlkLXJvdzogMSAvIC0xO1xcblxcbiAgIGRpc3BsYXk6IGdyaWQ7XFxuICAgZ3JpZC10ZW1wbGF0ZS1yb3dzOiAxMDBweCAxZnI7XFxufVxcblxcbiN0YXNrLWluZm8gPiBoMSB7XFxuICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG4gICAgdG9wOiAyMHB4O1xcbiAgICBsZWZ0OiAyMHB4O1xcbn1cXG5cXG5mb3JtIHtcXG4gICAgZGlzcGxheTogZ3JpZDtcXG4gICAgZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiAxZnIgMWZyIDFmcjtcXG4gICAgZ3JpZC10ZW1wbGF0ZS1yb3dzOiA1MHB4IDEwMHB4IDEwMHB4O1xcbiAgICBib3JkZXI6IHNvbGlkIDJweCBncmV5O1xcbn1cXG5cXG5mb3JtID4gZGl2IHtcXG4gICAgYm9yZGVyOiBzb2xpZCAxcHggZ3JleTtcXG59XFxuXFxuLmRhdGEge1xcbiAgICBkaXNwbGF5OiBmbGV4O1xcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcXG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG4gICAgcGFkZGluZzogMTBweDtcXG59XFxuXFxuLmRhdGE6Zmlyc3QtY2hpbGQge1xcbiAgICBncmlkLWNvbHVtbjogMSAvIDI7XFxuICAgIGdyaWQtcm93OiAxO1xcbiAgICBwYWRkaW5nOiA1cHg7XFxuICAgIGJvcmRlcjogMHB4O1xcbn1cXG5cXG4uZGF0YTpudGgtY2hpbGQoMikge1xcbiAgICBncmlkLWNvbHVtbjogMSAvIDI7XFxuICAgIGdyaWQtcm93OiAyO1xcbn1cXG5cXG4uZGF0YTpudGgtY2hpbGQoMykge1xcbiAgICBncmlkLWNvbHVtbjogMiAvIDM7XFxuICAgIGdyaWQtcm93OiAyO1xcbn1cXG5cXG4uZGF0YTpudGgtY2hpbGQoNCkge1xcbiAgICBncmlkLWNvbHVtbjogMyAvIDM7XFxuICAgIGdyaWQtcm93OiAyO1xcbn1cXG5cXG4uZGF0YTpsYXN0LWNoaWxkIHtcXG4gICAgZ3JpZC1jb2x1bW46IDEgLyAtMTtcXG4gICAgZ3JpZC1yb3c6IDM7XFxufVxcblxcbmxhYmVsIHtcXG4gICAgcGFkZGluZy1yaWdodDogMTBweDtcXG59XFxuXFxuaW5wdXQsIHRleHRhcmVhLCBzZWxlY3Qge1xcbiAgICBhcHBlYXJhbmNlOiBub25lO1xcbn1cXG5cXG5pbnB1dDpmb2N1cyB7XFxuICAgIGJvcmRlcjogbGlnaHRibHVlIHNvbGlkO1xcbn1cXG5cXG5pbnB1dFt0eXBlPVxcXCJzdWJtaXRcXFwiXSB7XFxuICAgIGFwcGVhcmFuY2U6IG5vbmU7XFxuICAgIHBhZGRpbmc6IDVweCAyMHB4O1xcbiAgICBib3JkZXItcmFkaXVzOiAxMHB4O1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2IoMzYsIDI3LCAxMzQpO1xcbiAgICBib3JkZXI6IDFweCBzb2xpZCByZ2IoMzYsIDI3LCAxMzQpO1xcbiAgICBjb2xvcjogd2hpdGU7XFxufVxcblxcbi50YXNrcyB7XFxuICAgIGRpc3BsYXk6IGdyaWQ7XFxuICAgIGdyaWQtdGVtcGxhdGUtcm93czogMjUwcHggMjUwcHggMjUwcHg7XFxuICAgIGdyaWQtdGVtcGxhdGUtY29sdW1uczogMWZyIDFmciAxZnI7XFxuICAgIGdhcDogMzBweDtcXG4gICAgcGFkZGluZzogMjBweDtcXG4gICAgZ3JpZC1jb2x1bW46IDE7XFxuICAgIGdyaWQtcm93OiAyIC8gLTE7XFxuICAgIGNvbG9yOiBibGFjaztcXG4gICAgb3ZlcmZsb3c6IGF1dG87XFxufVxcbiAgICBcXG4uY2FyZCB7XFxuICAgIGJhY2tncm91bmQtY29sb3I6IGdyZXk7XFxuICAgIHBhZGRpbmc6IDEwcHg7XFxuICAgIGJvcmRlcjogNXB4IHNvbGlkIHJnYigzNiwgMjcsIDEzNCk7XFxuICAgIGJvcmRlci1sZWZ0OiAxNXB4IHNvbGlkIHJnYigzNiwgMjcsIDEzNCk7XFxuICAgIGJvcmRlci1yYWRpdXM6IDEwcHg7XFxuXFxuICAgIGRpc3BsYXk6IGdyaWQ7XFxuICAgIGdyaWQtdGVtcGxhdGUtcm93czogNTBweCAxMDBweCA1MHB4O1xcbiAgICBcXG59XFxuXFxuLmNhcmQgPiBoMyB7XFxuICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG4gICAgbGVmdDogMTBweDtcXG4gICAgdG9wOiAxMHB4O1xcbiAgICBncmlkLXJvdzogMTtcXG59XFxuXFxuLmNhcmQgPiBwIHtcXG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xcbiAgICBsZWZ0OiAxMHB4O1xcbiAgICBncmlkLXJvdzogMjtcXG4gICAgd2lkdGg6IDc1JTtcXG59XFxuXFxuLmNhcmQgPiBkaXYge1xcbiAgICBwb3NpdGlvbjogcmVsYXRpdmU7XFxuICAgIGdyaWQtcm93OiAzO1xcbiAgICBkaXNwbGF5OiBmbGV4O1xcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XFxuICAgIGdhcDogMjBweDtcXG4gICAgcGFkZGluZy1yaWdodDogMjBweDtcXG59XFxuXFxuLnRhc2stZGF0YSB7XFxuICAgIGhlaWdodDogMzAwcHg7XFxuICAgIHdpZHRoOiA1MDBweDtcXG4gICAgZGlzcGxheTogZ3JpZDtcXG4gICAgZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiAzZnIgMWZyO1xcbiAgICBncmlkLXRlbXBsYXRlLXJvd3M6IDUwcHggMjAwcHggNTBweDtcXG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xcbiAgICBsZWZ0OiAyMHB4O1xcbiAgICBib3JkZXI6IHNvbGlkIDVweCBncmV5O1xcbiAgICBwYWRkaW5nOiAxMHB4O1xcbn1cXG5cXG4udGFzay1kYXRlIHtcXG4gICAgZ3JpZC1yb3c6IDE7XFxuICAgIGdyaWQtY29sdW1uOiAxO1xcbiAgICBwb3NpdGlvbjogcmVsYXRpdmU7XFxuICAgIHRvcDogMTBweDtcXG59XFxuXFxuLnRhc2stcHJpb3JpdHkge1xcbiAgICBncmlkLXJvdzogMTtcXG4gICAgZ3JpZC1jb2x1bW46IDI7XFxuICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG4gICAgdG9wOiAxMHB4O1xcbn1cXG5cXG4udGFzay1kZXNjcmlwdGlvbiB7XFxuICAgIGdyaWQtcm93OiAyO1xcbiAgICBncmlkLWNvbHVtbjogMSAvIC0xO1xcbiAgICBib3JkZXI6IDJweCBzb2xpZCBncmV5O1xcbiAgICBwYWRkaW5nOiAxMHB4O1xcbn1cXG5cXG4uZGVsZXRlLWljb24ge1xcbiAgICBncmlkLXJvdzogMztcXG4gICAgZ3JpZC1jb2x1bW46IDEgLyAtMTtcXG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xcbiAgICB0b3A6IDIwcHg7XFxufVwiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuLy8gRXhwb3J0c1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iLCJcInVzZSBzdHJpY3RcIjtcblxuLypcbiAgTUlUIExpY2Vuc2UgaHR0cDovL3d3dy5vcGVuc291cmNlLm9yZy9saWNlbnNlcy9taXQtbGljZW5zZS5waHBcbiAgQXV0aG9yIFRvYmlhcyBLb3BwZXJzIEBzb2tyYVxuKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcpIHtcbiAgdmFyIGxpc3QgPSBbXTtcblxuICAvLyByZXR1cm4gdGhlIGxpc3Qgb2YgbW9kdWxlcyBhcyBjc3Mgc3RyaW5nXG4gIGxpc3QudG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gdGhpcy5tYXAoZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgIHZhciBjb250ZW50ID0gXCJcIjtcbiAgICAgIHZhciBuZWVkTGF5ZXIgPSB0eXBlb2YgaXRlbVs1XSAhPT0gXCJ1bmRlZmluZWRcIjtcbiAgICAgIGlmIChpdGVtWzRdKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJAc3VwcG9ydHMgKFwiLmNvbmNhdChpdGVtWzRdLCBcIikge1wiKTtcbiAgICAgIH1cbiAgICAgIGlmIChpdGVtWzJdKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJAbWVkaWEgXCIuY29uY2F0KGl0ZW1bMl0sIFwiIHtcIik7XG4gICAgICB9XG4gICAgICBpZiAobmVlZExheWVyKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJAbGF5ZXJcIi5jb25jYXQoaXRlbVs1XS5sZW5ndGggPiAwID8gXCIgXCIuY29uY2F0KGl0ZW1bNV0pIDogXCJcIiwgXCIge1wiKTtcbiAgICAgIH1cbiAgICAgIGNvbnRlbnQgKz0gY3NzV2l0aE1hcHBpbmdUb1N0cmluZyhpdGVtKTtcbiAgICAgIGlmIChuZWVkTGF5ZXIpIHtcbiAgICAgICAgY29udGVudCArPSBcIn1cIjtcbiAgICAgIH1cbiAgICAgIGlmIChpdGVtWzJdKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJ9XCI7XG4gICAgICB9XG4gICAgICBpZiAoaXRlbVs0XSkge1xuICAgICAgICBjb250ZW50ICs9IFwifVwiO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGNvbnRlbnQ7XG4gICAgfSkuam9pbihcIlwiKTtcbiAgfTtcblxuICAvLyBpbXBvcnQgYSBsaXN0IG9mIG1vZHVsZXMgaW50byB0aGUgbGlzdFxuICBsaXN0LmkgPSBmdW5jdGlvbiBpKG1vZHVsZXMsIG1lZGlhLCBkZWR1cGUsIHN1cHBvcnRzLCBsYXllcikge1xuICAgIGlmICh0eXBlb2YgbW9kdWxlcyA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgbW9kdWxlcyA9IFtbbnVsbCwgbW9kdWxlcywgdW5kZWZpbmVkXV07XG4gICAgfVxuICAgIHZhciBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzID0ge307XG4gICAgaWYgKGRlZHVwZSkge1xuICAgICAgZm9yICh2YXIgayA9IDA7IGsgPCB0aGlzLmxlbmd0aDsgaysrKSB7XG4gICAgICAgIHZhciBpZCA9IHRoaXNba11bMF07XG4gICAgICAgIGlmIChpZCAhPSBudWxsKSB7XG4gICAgICAgICAgYWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpZF0gPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIGZvciAodmFyIF9rID0gMDsgX2sgPCBtb2R1bGVzLmxlbmd0aDsgX2srKykge1xuICAgICAgdmFyIGl0ZW0gPSBbXS5jb25jYXQobW9kdWxlc1tfa10pO1xuICAgICAgaWYgKGRlZHVwZSAmJiBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2l0ZW1bMF1dKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgaWYgKHR5cGVvZiBsYXllciAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICBpZiAodHlwZW9mIGl0ZW1bNV0gPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgICBpdGVtWzVdID0gbGF5ZXI7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXRlbVsxXSA9IFwiQGxheWVyXCIuY29uY2F0KGl0ZW1bNV0ubGVuZ3RoID4gMCA/IFwiIFwiLmNvbmNhdChpdGVtWzVdKSA6IFwiXCIsIFwiIHtcIikuY29uY2F0KGl0ZW1bMV0sIFwifVwiKTtcbiAgICAgICAgICBpdGVtWzVdID0gbGF5ZXI7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChtZWRpYSkge1xuICAgICAgICBpZiAoIWl0ZW1bMl0pIHtcbiAgICAgICAgICBpdGVtWzJdID0gbWVkaWE7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXRlbVsxXSA9IFwiQG1lZGlhIFwiLmNvbmNhdChpdGVtWzJdLCBcIiB7XCIpLmNvbmNhdChpdGVtWzFdLCBcIn1cIik7XG4gICAgICAgICAgaXRlbVsyXSA9IG1lZGlhO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoc3VwcG9ydHMpIHtcbiAgICAgICAgaWYgKCFpdGVtWzRdKSB7XG4gICAgICAgICAgaXRlbVs0XSA9IFwiXCIuY29uY2F0KHN1cHBvcnRzKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpdGVtWzFdID0gXCJAc3VwcG9ydHMgKFwiLmNvbmNhdChpdGVtWzRdLCBcIikge1wiKS5jb25jYXQoaXRlbVsxXSwgXCJ9XCIpO1xuICAgICAgICAgIGl0ZW1bNF0gPSBzdXBwb3J0cztcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgbGlzdC5wdXNoKGl0ZW0pO1xuICAgIH1cbiAgfTtcbiAgcmV0dXJuIGxpc3Q7XG59OyIsIlwidXNlIHN0cmljdFwiO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdGVtKSB7XG4gIHZhciBjb250ZW50ID0gaXRlbVsxXTtcbiAgdmFyIGNzc01hcHBpbmcgPSBpdGVtWzNdO1xuICBpZiAoIWNzc01hcHBpbmcpIHtcbiAgICByZXR1cm4gY29udGVudDtcbiAgfVxuICBpZiAodHlwZW9mIGJ0b2EgPT09IFwiZnVuY3Rpb25cIikge1xuICAgIHZhciBiYXNlNjQgPSBidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShjc3NNYXBwaW5nKSkpKTtcbiAgICB2YXIgZGF0YSA9IFwic291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsXCIuY29uY2F0KGJhc2U2NCk7XG4gICAgdmFyIHNvdXJjZU1hcHBpbmcgPSBcIi8qIyBcIi5jb25jYXQoZGF0YSwgXCIgKi9cIik7XG4gICAgcmV0dXJuIFtjb250ZW50XS5jb25jYXQoW3NvdXJjZU1hcHBpbmddKS5qb2luKFwiXFxuXCIpO1xuICB9XG4gIHJldHVybiBbY29udGVudF0uam9pbihcIlxcblwiKTtcbn07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBzdHlsZXNJbkRPTSA9IFtdO1xuXG5mdW5jdGlvbiBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKSB7XG4gIHZhciByZXN1bHQgPSAtMTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHN0eWxlc0luRE9NLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKHN0eWxlc0luRE9NW2ldLmlkZW50aWZpZXIgPT09IGlkZW50aWZpZXIpIHtcbiAgICAgIHJlc3VsdCA9IGk7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cblxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5mdW5jdGlvbiBtb2R1bGVzVG9Eb20obGlzdCwgb3B0aW9ucykge1xuICB2YXIgaWRDb3VudE1hcCA9IHt9O1xuICB2YXIgaWRlbnRpZmllcnMgPSBbXTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgaXRlbSA9IGxpc3RbaV07XG4gICAgdmFyIGlkID0gb3B0aW9ucy5iYXNlID8gaXRlbVswXSArIG9wdGlvbnMuYmFzZSA6IGl0ZW1bMF07XG4gICAgdmFyIGNvdW50ID0gaWRDb3VudE1hcFtpZF0gfHwgMDtcbiAgICB2YXIgaWRlbnRpZmllciA9IFwiXCIuY29uY2F0KGlkLCBcIiBcIikuY29uY2F0KGNvdW50KTtcbiAgICBpZENvdW50TWFwW2lkXSA9IGNvdW50ICsgMTtcbiAgICB2YXIgaW5kZXhCeUlkZW50aWZpZXIgPSBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKTtcbiAgICB2YXIgb2JqID0ge1xuICAgICAgY3NzOiBpdGVtWzFdLFxuICAgICAgbWVkaWE6IGl0ZW1bMl0sXG4gICAgICBzb3VyY2VNYXA6IGl0ZW1bM10sXG4gICAgICBzdXBwb3J0czogaXRlbVs0XSxcbiAgICAgIGxheWVyOiBpdGVtWzVdXG4gICAgfTtcblxuICAgIGlmIChpbmRleEJ5SWRlbnRpZmllciAhPT0gLTEpIHtcbiAgICAgIHN0eWxlc0luRE9NW2luZGV4QnlJZGVudGlmaWVyXS5yZWZlcmVuY2VzKys7XG4gICAgICBzdHlsZXNJbkRPTVtpbmRleEJ5SWRlbnRpZmllcl0udXBkYXRlcihvYmopO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgdXBkYXRlciA9IGFkZEVsZW1lbnRTdHlsZShvYmosIG9wdGlvbnMpO1xuICAgICAgb3B0aW9ucy5ieUluZGV4ID0gaTtcbiAgICAgIHN0eWxlc0luRE9NLnNwbGljZShpLCAwLCB7XG4gICAgICAgIGlkZW50aWZpZXI6IGlkZW50aWZpZXIsXG4gICAgICAgIHVwZGF0ZXI6IHVwZGF0ZXIsXG4gICAgICAgIHJlZmVyZW5jZXM6IDFcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlkZW50aWZpZXJzLnB1c2goaWRlbnRpZmllcik7XG4gIH1cblxuICByZXR1cm4gaWRlbnRpZmllcnM7XG59XG5cbmZ1bmN0aW9uIGFkZEVsZW1lbnRTdHlsZShvYmosIG9wdGlvbnMpIHtcbiAgdmFyIGFwaSA9IG9wdGlvbnMuZG9tQVBJKG9wdGlvbnMpO1xuICBhcGkudXBkYXRlKG9iaik7XG5cbiAgdmFyIHVwZGF0ZXIgPSBmdW5jdGlvbiB1cGRhdGVyKG5ld09iaikge1xuICAgIGlmIChuZXdPYmopIHtcbiAgICAgIGlmIChuZXdPYmouY3NzID09PSBvYmouY3NzICYmIG5ld09iai5tZWRpYSA9PT0gb2JqLm1lZGlhICYmIG5ld09iai5zb3VyY2VNYXAgPT09IG9iai5zb3VyY2VNYXAgJiYgbmV3T2JqLnN1cHBvcnRzID09PSBvYmouc3VwcG9ydHMgJiYgbmV3T2JqLmxheWVyID09PSBvYmoubGF5ZXIpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBhcGkudXBkYXRlKG9iaiA9IG5ld09iaik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGFwaS5yZW1vdmUoKTtcbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIHVwZGF0ZXI7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGxpc3QsIG9wdGlvbnMpIHtcbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gIGxpc3QgPSBsaXN0IHx8IFtdO1xuICB2YXIgbGFzdElkZW50aWZpZXJzID0gbW9kdWxlc1RvRG9tKGxpc3QsIG9wdGlvbnMpO1xuICByZXR1cm4gZnVuY3Rpb24gdXBkYXRlKG5ld0xpc3QpIHtcbiAgICBuZXdMaXN0ID0gbmV3TGlzdCB8fCBbXTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGFzdElkZW50aWZpZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgaWRlbnRpZmllciA9IGxhc3RJZGVudGlmaWVyc1tpXTtcbiAgICAgIHZhciBpbmRleCA9IGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpO1xuICAgICAgc3R5bGVzSW5ET01baW5kZXhdLnJlZmVyZW5jZXMtLTtcbiAgICB9XG5cbiAgICB2YXIgbmV3TGFzdElkZW50aWZpZXJzID0gbW9kdWxlc1RvRG9tKG5ld0xpc3QsIG9wdGlvbnMpO1xuXG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGxhc3RJZGVudGlmaWVycy5sZW5ndGg7IF9pKyspIHtcbiAgICAgIHZhciBfaWRlbnRpZmllciA9IGxhc3RJZGVudGlmaWVyc1tfaV07XG5cbiAgICAgIHZhciBfaW5kZXggPSBnZXRJbmRleEJ5SWRlbnRpZmllcihfaWRlbnRpZmllcik7XG5cbiAgICAgIGlmIChzdHlsZXNJbkRPTVtfaW5kZXhdLnJlZmVyZW5jZXMgPT09IDApIHtcbiAgICAgICAgc3R5bGVzSW5ET01bX2luZGV4XS51cGRhdGVyKCk7XG5cbiAgICAgICAgc3R5bGVzSW5ET00uc3BsaWNlKF9pbmRleCwgMSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgbGFzdElkZW50aWZpZXJzID0gbmV3TGFzdElkZW50aWZpZXJzO1xuICB9O1xufTsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIG1lbW8gPSB7fTtcbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuXG5mdW5jdGlvbiBnZXRUYXJnZXQodGFyZ2V0KSB7XG4gIGlmICh0eXBlb2YgbWVtb1t0YXJnZXRdID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgdmFyIHN0eWxlVGFyZ2V0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih0YXJnZXQpOyAvLyBTcGVjaWFsIGNhc2UgdG8gcmV0dXJuIGhlYWQgb2YgaWZyYW1lIGluc3RlYWQgb2YgaWZyYW1lIGl0c2VsZlxuXG4gICAgaWYgKHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCAmJiBzdHlsZVRhcmdldCBpbnN0YW5jZW9mIHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgLy8gVGhpcyB3aWxsIHRocm93IGFuIGV4Y2VwdGlvbiBpZiBhY2Nlc3MgdG8gaWZyYW1lIGlzIGJsb2NrZWRcbiAgICAgICAgLy8gZHVlIHRvIGNyb3NzLW9yaWdpbiByZXN0cmljdGlvbnNcbiAgICAgICAgc3R5bGVUYXJnZXQgPSBzdHlsZVRhcmdldC5jb250ZW50RG9jdW1lbnQuaGVhZDtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgLy8gaXN0YW5idWwgaWdub3JlIG5leHRcbiAgICAgICAgc3R5bGVUYXJnZXQgPSBudWxsO1xuICAgICAgfVxuICAgIH1cblxuICAgIG1lbW9bdGFyZ2V0XSA9IHN0eWxlVGFyZ2V0O1xuICB9XG5cbiAgcmV0dXJuIG1lbW9bdGFyZ2V0XTtcbn1cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuXG5cbmZ1bmN0aW9uIGluc2VydEJ5U2VsZWN0b3IoaW5zZXJ0LCBzdHlsZSkge1xuICB2YXIgdGFyZ2V0ID0gZ2V0VGFyZ2V0KGluc2VydCk7XG5cbiAgaWYgKCF0YXJnZXQpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJDb3VsZG4ndCBmaW5kIGEgc3R5bGUgdGFyZ2V0LiBUaGlzIHByb2JhYmx5IG1lYW5zIHRoYXQgdGhlIHZhbHVlIGZvciB0aGUgJ2luc2VydCcgcGFyYW1ldGVyIGlzIGludmFsaWQuXCIpO1xuICB9XG5cbiAgdGFyZ2V0LmFwcGVuZENoaWxkKHN0eWxlKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpbnNlcnRCeVNlbGVjdG9yOyIsIlwidXNlIHN0cmljdFwiO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIGluc2VydFN0eWxlRWxlbWVudChvcHRpb25zKSB7XG4gIHZhciBlbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInN0eWxlXCIpO1xuICBvcHRpb25zLnNldEF0dHJpYnV0ZXMoZWxlbWVudCwgb3B0aW9ucy5hdHRyaWJ1dGVzKTtcbiAgb3B0aW9ucy5pbnNlcnQoZWxlbWVudCwgb3B0aW9ucy5vcHRpb25zKTtcbiAgcmV0dXJuIGVsZW1lbnQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaW5zZXJ0U3R5bGVFbGVtZW50OyIsIlwidXNlIHN0cmljdFwiO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIHNldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcyhzdHlsZUVsZW1lbnQpIHtcbiAgdmFyIG5vbmNlID0gdHlwZW9mIF9fd2VicGFja19ub25jZV9fICE9PSBcInVuZGVmaW5lZFwiID8gX193ZWJwYWNrX25vbmNlX18gOiBudWxsO1xuXG4gIGlmIChub25jZSkge1xuICAgIHN0eWxlRWxlbWVudC5zZXRBdHRyaWJ1dGUoXCJub25jZVwiLCBub25jZSk7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXM7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gYXBwbHkoc3R5bGVFbGVtZW50LCBvcHRpb25zLCBvYmopIHtcbiAgdmFyIGNzcyA9IFwiXCI7XG5cbiAgaWYgKG9iai5zdXBwb3J0cykge1xuICAgIGNzcyArPSBcIkBzdXBwb3J0cyAoXCIuY29uY2F0KG9iai5zdXBwb3J0cywgXCIpIHtcIik7XG4gIH1cblxuICBpZiAob2JqLm1lZGlhKSB7XG4gICAgY3NzICs9IFwiQG1lZGlhIFwiLmNvbmNhdChvYmoubWVkaWEsIFwiIHtcIik7XG4gIH1cblxuICB2YXIgbmVlZExheWVyID0gdHlwZW9mIG9iai5sYXllciAhPT0gXCJ1bmRlZmluZWRcIjtcblxuICBpZiAobmVlZExheWVyKSB7XG4gICAgY3NzICs9IFwiQGxheWVyXCIuY29uY2F0KG9iai5sYXllci5sZW5ndGggPiAwID8gXCIgXCIuY29uY2F0KG9iai5sYXllcikgOiBcIlwiLCBcIiB7XCIpO1xuICB9XG5cbiAgY3NzICs9IG9iai5jc3M7XG5cbiAgaWYgKG5lZWRMYXllcikge1xuICAgIGNzcyArPSBcIn1cIjtcbiAgfVxuXG4gIGlmIChvYmoubWVkaWEpIHtcbiAgICBjc3MgKz0gXCJ9XCI7XG4gIH1cblxuICBpZiAob2JqLnN1cHBvcnRzKSB7XG4gICAgY3NzICs9IFwifVwiO1xuICB9XG5cbiAgdmFyIHNvdXJjZU1hcCA9IG9iai5zb3VyY2VNYXA7XG5cbiAgaWYgKHNvdXJjZU1hcCAmJiB0eXBlb2YgYnRvYSAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgIGNzcyArPSBcIlxcbi8qIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsXCIuY29uY2F0KGJ0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KHNvdXJjZU1hcCkpKSksIFwiICovXCIpO1xuICB9IC8vIEZvciBvbGQgSUVcblxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgICovXG5cblxuICBvcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtKGNzcywgc3R5bGVFbGVtZW50LCBvcHRpb25zLm9wdGlvbnMpO1xufVxuXG5mdW5jdGlvbiByZW1vdmVTdHlsZUVsZW1lbnQoc3R5bGVFbGVtZW50KSB7XG4gIC8vIGlzdGFuYnVsIGlnbm9yZSBpZlxuICBpZiAoc3R5bGVFbGVtZW50LnBhcmVudE5vZGUgPT09IG51bGwpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBzdHlsZUVsZW1lbnQucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChzdHlsZUVsZW1lbnQpO1xufVxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5cblxuZnVuY3Rpb24gZG9tQVBJKG9wdGlvbnMpIHtcbiAgdmFyIHN0eWxlRWxlbWVudCA9IG9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMpO1xuICByZXR1cm4ge1xuICAgIHVwZGF0ZTogZnVuY3Rpb24gdXBkYXRlKG9iaikge1xuICAgICAgYXBwbHkoc3R5bGVFbGVtZW50LCBvcHRpb25zLCBvYmopO1xuICAgIH0sXG4gICAgcmVtb3ZlOiBmdW5jdGlvbiByZW1vdmUoKSB7XG4gICAgICByZW1vdmVTdHlsZUVsZW1lbnQoc3R5bGVFbGVtZW50KTtcbiAgICB9XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZG9tQVBJOyIsIlwidXNlIHN0cmljdFwiO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIHN0eWxlVGFnVHJhbnNmb3JtKGNzcywgc3R5bGVFbGVtZW50KSB7XG4gIGlmIChzdHlsZUVsZW1lbnQuc3R5bGVTaGVldCkge1xuICAgIHN0eWxlRWxlbWVudC5zdHlsZVNoZWV0LmNzc1RleHQgPSBjc3M7XG4gIH0gZWxzZSB7XG4gICAgd2hpbGUgKHN0eWxlRWxlbWVudC5maXJzdENoaWxkKSB7XG4gICAgICBzdHlsZUVsZW1lbnQucmVtb3ZlQ2hpbGQoc3R5bGVFbGVtZW50LmZpcnN0Q2hpbGQpO1xuICAgIH1cblxuICAgIHN0eWxlRWxlbWVudC5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShjc3MpKTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHN0eWxlVGFnVHJhbnNmb3JtOyIsIi8qIVxuKiBzd2VldGFsZXJ0MiB2MTEuNy4xXG4qIFJlbGVhc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cbiovXG4oZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcgPyBtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoKSA6XG4gIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShmYWN0b3J5KSA6XG4gIChnbG9iYWwgPSB0eXBlb2YgZ2xvYmFsVGhpcyAhPT0gJ3VuZGVmaW5lZCcgPyBnbG9iYWxUaGlzIDogZ2xvYmFsIHx8IHNlbGYsIGdsb2JhbC5Td2VldGFsZXJ0MiA9IGZhY3RvcnkoKSk7XG59KSh0aGlzLCAoZnVuY3Rpb24gKCkgeyAndXNlIHN0cmljdCc7XG5cbiAgLyoqXG4gICAqIFRoaXMgbW9kdWxlIGNvbnRhaW5zIGBXZWFrTWFwYHMgZm9yIGVhY2ggZWZmZWN0aXZlbHktXCJwcml2YXRlICBwcm9wZXJ0eVwiIHRoYXQgYSBgU3dhbGAgaGFzLlxuICAgKiBGb3IgZXhhbXBsZSwgdG8gc2V0IHRoZSBwcml2YXRlIHByb3BlcnR5IFwiZm9vXCIgb2YgYHRoaXNgIHRvIFwiYmFyXCIsIHlvdSBjYW4gYHByaXZhdGVQcm9wcy5mb28uc2V0KHRoaXMsICdiYXInKWBcbiAgICogVGhpcyBpcyB0aGUgYXBwcm9hY2ggdGhhdCBCYWJlbCB3aWxsIHByb2JhYmx5IHRha2UgdG8gaW1wbGVtZW50IHByaXZhdGUgbWV0aG9kcy9maWVsZHNcbiAgICogICBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1wcml2YXRlLW1ldGhvZHNcbiAgICogICBodHRwczovL2dpdGh1Yi5jb20vYmFiZWwvYmFiZWwvcHVsbC83NTU1XG4gICAqIE9uY2Ugd2UgaGF2ZSB0aGUgY2hhbmdlcyBmcm9tIHRoYXQgUFIgaW4gQmFiZWwsIGFuZCBvdXIgY29yZSBjbGFzcyBmaXRzIHJlYXNvbmFibGUgaW4gKm9uZSBtb2R1bGUqXG4gICAqICAgdGhlbiB3ZSBjYW4gdXNlIHRoYXQgbGFuZ3VhZ2UgZmVhdHVyZS5cbiAgICovXG5cbiAgdmFyIHByaXZhdGVQcm9wcyA9IHtcbiAgICBhd2FpdGluZ1Byb21pc2U6IG5ldyBXZWFrTWFwKCksXG4gICAgcHJvbWlzZTogbmV3IFdlYWtNYXAoKSxcbiAgICBpbm5lclBhcmFtczogbmV3IFdlYWtNYXAoKSxcbiAgICBkb21DYWNoZTogbmV3IFdlYWtNYXAoKVxuICB9O1xuXG4gIGNvbnN0IHN3YWxQcmVmaXggPSAnc3dhbDItJztcblxuICAvKipcbiAgICogQHBhcmFtIHtzdHJpbmdbXX0gaXRlbXNcbiAgICogQHJldHVybnMge29iamVjdH1cbiAgICovXG4gIGNvbnN0IHByZWZpeCA9IGl0ZW1zID0+IHtcbiAgICBjb25zdCByZXN1bHQgPSB7fTtcbiAgICBmb3IgKGNvbnN0IGkgaW4gaXRlbXMpIHtcbiAgICAgIHJlc3VsdFtpdGVtc1tpXV0gPSBzd2FsUHJlZml4ICsgaXRlbXNbaV07XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG4gIGNvbnN0IHN3YWxDbGFzc2VzID0gcHJlZml4KFsnY29udGFpbmVyJywgJ3Nob3duJywgJ2hlaWdodC1hdXRvJywgJ2lvc2ZpeCcsICdwb3B1cCcsICdtb2RhbCcsICduby1iYWNrZHJvcCcsICduby10cmFuc2l0aW9uJywgJ3RvYXN0JywgJ3RvYXN0LXNob3duJywgJ3Nob3cnLCAnaGlkZScsICdjbG9zZScsICd0aXRsZScsICdodG1sLWNvbnRhaW5lcicsICdhY3Rpb25zJywgJ2NvbmZpcm0nLCAnZGVueScsICdjYW5jZWwnLCAnZGVmYXVsdC1vdXRsaW5lJywgJ2Zvb3RlcicsICdpY29uJywgJ2ljb24tY29udGVudCcsICdpbWFnZScsICdpbnB1dCcsICdmaWxlJywgJ3JhbmdlJywgJ3NlbGVjdCcsICdyYWRpbycsICdjaGVja2JveCcsICdsYWJlbCcsICd0ZXh0YXJlYScsICdpbnB1dGVycm9yJywgJ2lucHV0LWxhYmVsJywgJ3ZhbGlkYXRpb24tbWVzc2FnZScsICdwcm9ncmVzcy1zdGVwcycsICdhY3RpdmUtcHJvZ3Jlc3Mtc3RlcCcsICdwcm9ncmVzcy1zdGVwJywgJ3Byb2dyZXNzLXN0ZXAtbGluZScsICdsb2FkZXInLCAnbG9hZGluZycsICdzdHlsZWQnLCAndG9wJywgJ3RvcC1zdGFydCcsICd0b3AtZW5kJywgJ3RvcC1sZWZ0JywgJ3RvcC1yaWdodCcsICdjZW50ZXInLCAnY2VudGVyLXN0YXJ0JywgJ2NlbnRlci1lbmQnLCAnY2VudGVyLWxlZnQnLCAnY2VudGVyLXJpZ2h0JywgJ2JvdHRvbScsICdib3R0b20tc3RhcnQnLCAnYm90dG9tLWVuZCcsICdib3R0b20tbGVmdCcsICdib3R0b20tcmlnaHQnLCAnZ3Jvdy1yb3cnLCAnZ3Jvdy1jb2x1bW4nLCAnZ3Jvdy1mdWxsc2NyZWVuJywgJ3J0bCcsICd0aW1lci1wcm9ncmVzcy1iYXInLCAndGltZXItcHJvZ3Jlc3MtYmFyLWNvbnRhaW5lcicsICdzY3JvbGxiYXItbWVhc3VyZScsICdpY29uLXN1Y2Nlc3MnLCAnaWNvbi13YXJuaW5nJywgJ2ljb24taW5mbycsICdpY29uLXF1ZXN0aW9uJywgJ2ljb24tZXJyb3InXSk7XG4gIGNvbnN0IGljb25UeXBlcyA9IHByZWZpeChbJ3N1Y2Nlc3MnLCAnd2FybmluZycsICdpbmZvJywgJ3F1ZXN0aW9uJywgJ2Vycm9yJ10pO1xuXG4gIGNvbnN0IGNvbnNvbGVQcmVmaXggPSAnU3dlZXRBbGVydDI6JztcblxuICAvKipcbiAgICogRmlsdGVyIHRoZSB1bmlxdWUgdmFsdWVzIGludG8gYSBuZXcgYXJyYXlcbiAgICpcbiAgICogQHBhcmFtIHtBcnJheX0gYXJyXG4gICAqIEByZXR1cm5zIHtBcnJheX1cbiAgICovXG4gIGNvbnN0IHVuaXF1ZUFycmF5ID0gYXJyID0+IHtcbiAgICBjb25zdCByZXN1bHQgPSBbXTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGFyci5sZW5ndGg7IGkrKykge1xuICAgICAgaWYgKHJlc3VsdC5pbmRleE9mKGFycltpXSkgPT09IC0xKSB7XG4gICAgICAgIHJlc3VsdC5wdXNoKGFycltpXSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG5cbiAgLyoqXG4gICAqIENhcGl0YWxpemUgdGhlIGZpcnN0IGxldHRlciBvZiBhIHN0cmluZ1xuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gc3RyXG4gICAqIEByZXR1cm5zIHtzdHJpbmd9XG4gICAqL1xuICBjb25zdCBjYXBpdGFsaXplRmlyc3RMZXR0ZXIgPSBzdHIgPT4gc3RyLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgc3RyLnNsaWNlKDEpO1xuXG4gIC8qKlxuICAgKiBTdGFuZGFyZGl6ZSBjb25zb2xlIHdhcm5pbmdzXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nIHwgQXJyYXl9IG1lc3NhZ2VcbiAgICovXG4gIGNvbnN0IHdhcm4gPSBtZXNzYWdlID0+IHtcbiAgICBjb25zb2xlLndhcm4oYCR7Y29uc29sZVByZWZpeH0gJHt0eXBlb2YgbWVzc2FnZSA9PT0gJ29iamVjdCcgPyBtZXNzYWdlLmpvaW4oJyAnKSA6IG1lc3NhZ2V9YCk7XG4gIH07XG5cbiAgLyoqXG4gICAqIFN0YW5kYXJkaXplIGNvbnNvbGUgZXJyb3JzXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBtZXNzYWdlXG4gICAqL1xuICBjb25zdCBlcnJvciA9IG1lc3NhZ2UgPT4ge1xuICAgIGNvbnNvbGUuZXJyb3IoYCR7Y29uc29sZVByZWZpeH0gJHttZXNzYWdlfWApO1xuICB9O1xuXG4gIC8qKlxuICAgKiBQcml2YXRlIGdsb2JhbCBzdGF0ZSBmb3IgYHdhcm5PbmNlYFxuICAgKlxuICAgKiBAdHlwZSB7QXJyYXl9XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBjb25zdCBwcmV2aW91c1dhcm5PbmNlTWVzc2FnZXMgPSBbXTtcblxuICAvKipcbiAgICogU2hvdyBhIGNvbnNvbGUgd2FybmluZywgYnV0IG9ubHkgaWYgaXQgaGFzbid0IGFscmVhZHkgYmVlbiBzaG93blxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gbWVzc2FnZVxuICAgKi9cbiAgY29uc3Qgd2Fybk9uY2UgPSBtZXNzYWdlID0+IHtcbiAgICBpZiAoIXByZXZpb3VzV2Fybk9uY2VNZXNzYWdlcy5pbmNsdWRlcyhtZXNzYWdlKSkge1xuICAgICAgcHJldmlvdXNXYXJuT25jZU1lc3NhZ2VzLnB1c2gobWVzc2FnZSk7XG4gICAgICB3YXJuKG1lc3NhZ2UpO1xuICAgIH1cbiAgfTtcblxuICAvKipcbiAgICogU2hvdyBhIG9uZS10aW1lIGNvbnNvbGUgd2FybmluZyBhYm91dCBkZXByZWNhdGVkIHBhcmFtcy9tZXRob2RzXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBkZXByZWNhdGVkUGFyYW1cbiAgICogQHBhcmFtIHtzdHJpbmd9IHVzZUluc3RlYWRcbiAgICovXG4gIGNvbnN0IHdhcm5BYm91dERlcHJlY2F0aW9uID0gKGRlcHJlY2F0ZWRQYXJhbSwgdXNlSW5zdGVhZCkgPT4ge1xuICAgIHdhcm5PbmNlKGBcIiR7ZGVwcmVjYXRlZFBhcmFtfVwiIGlzIGRlcHJlY2F0ZWQgYW5kIHdpbGwgYmUgcmVtb3ZlZCBpbiB0aGUgbmV4dCBtYWpvciByZWxlYXNlLiBQbGVhc2UgdXNlIFwiJHt1c2VJbnN0ZWFkfVwiIGluc3RlYWQuYCk7XG4gIH07XG5cbiAgLyoqXG4gICAqIElmIGBhcmdgIGlzIGEgZnVuY3Rpb24sIGNhbGwgaXQgKHdpdGggbm8gYXJndW1lbnRzIG9yIGNvbnRleHQpIGFuZCByZXR1cm4gdGhlIHJlc3VsdC5cbiAgICogT3RoZXJ3aXNlLCBqdXN0IHBhc3MgdGhlIHZhbHVlIHRocm91Z2hcbiAgICpcbiAgICogQHBhcmFtIHtGdW5jdGlvbiB8IGFueX0gYXJnXG4gICAqIEByZXR1cm5zIHthbnl9XG4gICAqL1xuICBjb25zdCBjYWxsSWZGdW5jdGlvbiA9IGFyZyA9PiB0eXBlb2YgYXJnID09PSAnZnVuY3Rpb24nID8gYXJnKCkgOiBhcmc7XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7YW55fSBhcmdcbiAgICogQHJldHVybnMge2Jvb2xlYW59XG4gICAqL1xuICBjb25zdCBoYXNUb1Byb21pc2VGbiA9IGFyZyA9PiBhcmcgJiYgdHlwZW9mIGFyZy50b1Byb21pc2UgPT09ICdmdW5jdGlvbic7XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7YW55fSBhcmdcbiAgICogQHJldHVybnMge1Byb21pc2V9XG4gICAqL1xuICBjb25zdCBhc1Byb21pc2UgPSBhcmcgPT4gaGFzVG9Qcm9taXNlRm4oYXJnKSA/IGFyZy50b1Byb21pc2UoKSA6IFByb21pc2UucmVzb2x2ZShhcmcpO1xuXG4gIC8qKlxuICAgKiBAcGFyYW0ge2FueX0gYXJnXG4gICAqIEByZXR1cm5zIHtib29sZWFufVxuICAgKi9cbiAgY29uc3QgaXNQcm9taXNlID0gYXJnID0+IGFyZyAmJiBQcm9taXNlLnJlc29sdmUoYXJnKSA9PT0gYXJnO1xuXG4gIC8qKlxuICAgKiBHZXRzIHRoZSBwb3B1cCBjb250YWluZXIgd2hpY2ggY29udGFpbnMgdGhlIGJhY2tkcm9wIGFuZCB0aGUgcG9wdXAgaXRzZWxmLlxuICAgKlxuICAgKiBAcmV0dXJucyB7SFRNTEVsZW1lbnQgfCBudWxsfVxuICAgKi9cbiAgY29uc3QgZ2V0Q29udGFpbmVyID0gKCkgPT4gZG9jdW1lbnQuYm9keS5xdWVyeVNlbGVjdG9yKGAuJHtzd2FsQ2xhc3Nlcy5jb250YWluZXJ9YCk7XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBzZWxlY3RvclN0cmluZ1xuICAgKiBAcmV0dXJucyB7SFRNTEVsZW1lbnQgfCBudWxsfVxuICAgKi9cbiAgY29uc3QgZWxlbWVudEJ5U2VsZWN0b3IgPSBzZWxlY3RvclN0cmluZyA9PiB7XG4gICAgY29uc3QgY29udGFpbmVyID0gZ2V0Q29udGFpbmVyKCk7XG4gICAgcmV0dXJuIGNvbnRhaW5lciA/IGNvbnRhaW5lci5xdWVyeVNlbGVjdG9yKHNlbGVjdG9yU3RyaW5nKSA6IG51bGw7XG4gIH07XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBjbGFzc05hbWVcbiAgICogQHJldHVybnMge0hUTUxFbGVtZW50IHwgbnVsbH1cbiAgICovXG4gIGNvbnN0IGVsZW1lbnRCeUNsYXNzID0gY2xhc3NOYW1lID0+IHtcbiAgICByZXR1cm4gZWxlbWVudEJ5U2VsZWN0b3IoYC4ke2NsYXNzTmFtZX1gKTtcbiAgfTtcblxuICAvKipcbiAgICogQHJldHVybnMge0hUTUxFbGVtZW50IHwgbnVsbH1cbiAgICovXG4gIGNvbnN0IGdldFBvcHVwID0gKCkgPT4gZWxlbWVudEJ5Q2xhc3Moc3dhbENsYXNzZXMucG9wdXApO1xuXG4gIC8qKlxuICAgKiBAcmV0dXJucyB7SFRNTEVsZW1lbnQgfCBudWxsfVxuICAgKi9cbiAgY29uc3QgZ2V0SWNvbiA9ICgpID0+IGVsZW1lbnRCeUNsYXNzKHN3YWxDbGFzc2VzLmljb24pO1xuXG4gIC8qKlxuICAgKiBAcmV0dXJucyB7SFRNTEVsZW1lbnQgfCBudWxsfVxuICAgKi9cbiAgY29uc3QgZ2V0SWNvbkNvbnRlbnQgPSAoKSA9PiBlbGVtZW50QnlDbGFzcyhzd2FsQ2xhc3Nlc1snaWNvbi1jb250ZW50J10pO1xuXG4gIC8qKlxuICAgKiBAcmV0dXJucyB7SFRNTEVsZW1lbnQgfCBudWxsfVxuICAgKi9cbiAgY29uc3QgZ2V0VGl0bGUgPSAoKSA9PiBlbGVtZW50QnlDbGFzcyhzd2FsQ2xhc3Nlcy50aXRsZSk7XG5cbiAgLyoqXG4gICAqIEByZXR1cm5zIHtIVE1MRWxlbWVudCB8IG51bGx9XG4gICAqL1xuICBjb25zdCBnZXRIdG1sQ29udGFpbmVyID0gKCkgPT4gZWxlbWVudEJ5Q2xhc3Moc3dhbENsYXNzZXNbJ2h0bWwtY29udGFpbmVyJ10pO1xuXG4gIC8qKlxuICAgKiBAcmV0dXJucyB7SFRNTEVsZW1lbnQgfCBudWxsfVxuICAgKi9cbiAgY29uc3QgZ2V0SW1hZ2UgPSAoKSA9PiBlbGVtZW50QnlDbGFzcyhzd2FsQ2xhc3Nlcy5pbWFnZSk7XG5cbiAgLyoqXG4gICAqIEByZXR1cm5zIHtIVE1MRWxlbWVudCB8IG51bGx9XG4gICAqL1xuICBjb25zdCBnZXRQcm9ncmVzc1N0ZXBzID0gKCkgPT4gZWxlbWVudEJ5Q2xhc3Moc3dhbENsYXNzZXNbJ3Byb2dyZXNzLXN0ZXBzJ10pO1xuXG4gIC8qKlxuICAgKiBAcmV0dXJucyB7SFRNTEVsZW1lbnQgfCBudWxsfVxuICAgKi9cbiAgY29uc3QgZ2V0VmFsaWRhdGlvbk1lc3NhZ2UgPSAoKSA9PiBlbGVtZW50QnlDbGFzcyhzd2FsQ2xhc3Nlc1sndmFsaWRhdGlvbi1tZXNzYWdlJ10pO1xuXG4gIC8qKlxuICAgKiBAcmV0dXJucyB7SFRNTEJ1dHRvbkVsZW1lbnQgfCBudWxsfVxuICAgKi9cbiAgY29uc3QgZ2V0Q29uZmlybUJ1dHRvbiA9ICgpID0+IC8qKiBAdHlwZSB7SFRNTEJ1dHRvbkVsZW1lbnR9ICovZWxlbWVudEJ5U2VsZWN0b3IoYC4ke3N3YWxDbGFzc2VzLmFjdGlvbnN9IC4ke3N3YWxDbGFzc2VzLmNvbmZpcm19YCk7XG5cbiAgLyoqXG4gICAqIEByZXR1cm5zIHtIVE1MQnV0dG9uRWxlbWVudCB8IG51bGx9XG4gICAqL1xuICBjb25zdCBnZXRDYW5jZWxCdXR0b24gPSAoKSA9PiAvKiogQHR5cGUge0hUTUxCdXR0b25FbGVtZW50fSAqL2VsZW1lbnRCeVNlbGVjdG9yKGAuJHtzd2FsQ2xhc3Nlcy5hY3Rpb25zfSAuJHtzd2FsQ2xhc3Nlcy5jYW5jZWx9YCk7XG5cbiAgLyoqXG4gICAqIEByZXR1cm5zIHtIVE1MQnV0dG9uRWxlbWVudCB8IG51bGx9XG4gICAqL1xuICBjb25zdCBnZXREZW55QnV0dG9uID0gKCkgPT4gLyoqIEB0eXBlIHtIVE1MQnV0dG9uRWxlbWVudH0gKi9lbGVtZW50QnlTZWxlY3RvcihgLiR7c3dhbENsYXNzZXMuYWN0aW9uc30gLiR7c3dhbENsYXNzZXMuZGVueX1gKTtcblxuICAvKipcbiAgICogQHJldHVybnMge0hUTUxFbGVtZW50IHwgbnVsbH1cbiAgICovXG4gIGNvbnN0IGdldElucHV0TGFiZWwgPSAoKSA9PiBlbGVtZW50QnlDbGFzcyhzd2FsQ2xhc3Nlc1snaW5wdXQtbGFiZWwnXSk7XG5cbiAgLyoqXG4gICAqIEByZXR1cm5zIHtIVE1MRWxlbWVudCB8IG51bGx9XG4gICAqL1xuICBjb25zdCBnZXRMb2FkZXIgPSAoKSA9PiBlbGVtZW50QnlTZWxlY3RvcihgLiR7c3dhbENsYXNzZXMubG9hZGVyfWApO1xuXG4gIC8qKlxuICAgKiBAcmV0dXJucyB7SFRNTEVsZW1lbnQgfCBudWxsfVxuICAgKi9cbiAgY29uc3QgZ2V0QWN0aW9ucyA9ICgpID0+IGVsZW1lbnRCeUNsYXNzKHN3YWxDbGFzc2VzLmFjdGlvbnMpO1xuXG4gIC8qKlxuICAgKiBAcmV0dXJucyB7SFRNTEVsZW1lbnQgfCBudWxsfVxuICAgKi9cbiAgY29uc3QgZ2V0Rm9vdGVyID0gKCkgPT4gZWxlbWVudEJ5Q2xhc3Moc3dhbENsYXNzZXMuZm9vdGVyKTtcblxuICAvKipcbiAgICogQHJldHVybnMge0hUTUxFbGVtZW50IHwgbnVsbH1cbiAgICovXG4gIGNvbnN0IGdldFRpbWVyUHJvZ3Jlc3NCYXIgPSAoKSA9PiBlbGVtZW50QnlDbGFzcyhzd2FsQ2xhc3Nlc1sndGltZXItcHJvZ3Jlc3MtYmFyJ10pO1xuXG4gIC8qKlxuICAgKiBAcmV0dXJucyB7SFRNTEVsZW1lbnQgfCBudWxsfVxuICAgKi9cbiAgY29uc3QgZ2V0Q2xvc2VCdXR0b24gPSAoKSA9PiBlbGVtZW50QnlDbGFzcyhzd2FsQ2xhc3Nlcy5jbG9zZSk7XG5cbiAgLy8gaHR0cHM6Ly9naXRodWIuY29tL2prdXAvZm9jdXNhYmxlL2Jsb2IvbWFzdGVyL2luZGV4LmpzXG4gIGNvbnN0IGZvY3VzYWJsZSA9IGBcbiAgYVtocmVmXSxcbiAgYXJlYVtocmVmXSxcbiAgaW5wdXQ6bm90KFtkaXNhYmxlZF0pLFxuICBzZWxlY3Q6bm90KFtkaXNhYmxlZF0pLFxuICB0ZXh0YXJlYTpub3QoW2Rpc2FibGVkXSksXG4gIGJ1dHRvbjpub3QoW2Rpc2FibGVkXSksXG4gIGlmcmFtZSxcbiAgb2JqZWN0LFxuICBlbWJlZCxcbiAgW3RhYmluZGV4PVwiMFwiXSxcbiAgW2NvbnRlbnRlZGl0YWJsZV0sXG4gIGF1ZGlvW2NvbnRyb2xzXSxcbiAgdmlkZW9bY29udHJvbHNdLFxuICBzdW1tYXJ5XG5gO1xuICAvKipcbiAgICogQHJldHVybnMge0hUTUxFbGVtZW50W119XG4gICAqL1xuICBjb25zdCBnZXRGb2N1c2FibGVFbGVtZW50cyA9ICgpID0+IHtcbiAgICBjb25zdCBmb2N1c2FibGVFbGVtZW50c1dpdGhUYWJpbmRleCA9IEFycmF5LmZyb20oZ2V0UG9wdXAoKS5xdWVyeVNlbGVjdG9yQWxsKCdbdGFiaW5kZXhdOm5vdChbdGFiaW5kZXg9XCItMVwiXSk6bm90KFt0YWJpbmRleD1cIjBcIl0pJykpXG4gICAgLy8gc29ydCBhY2NvcmRpbmcgdG8gdGFiaW5kZXhcbiAgICAuc29ydCgoYSwgYikgPT4ge1xuICAgICAgY29uc3QgdGFiaW5kZXhBID0gcGFyc2VJbnQoYS5nZXRBdHRyaWJ1dGUoJ3RhYmluZGV4JykpO1xuICAgICAgY29uc3QgdGFiaW5kZXhCID0gcGFyc2VJbnQoYi5nZXRBdHRyaWJ1dGUoJ3RhYmluZGV4JykpO1xuICAgICAgaWYgKHRhYmluZGV4QSA+IHRhYmluZGV4Qikge1xuICAgICAgICByZXR1cm4gMTtcbiAgICAgIH0gZWxzZSBpZiAodGFiaW5kZXhBIDwgdGFiaW5kZXhCKSB7XG4gICAgICAgIHJldHVybiAtMTtcbiAgICAgIH1cbiAgICAgIHJldHVybiAwO1xuICAgIH0pO1xuICAgIGNvbnN0IG90aGVyRm9jdXNhYmxlRWxlbWVudHMgPSBBcnJheS5mcm9tKGdldFBvcHVwKCkucXVlcnlTZWxlY3RvckFsbChmb2N1c2FibGUpKS5maWx0ZXIoZWwgPT4gZWwuZ2V0QXR0cmlidXRlKCd0YWJpbmRleCcpICE9PSAnLTEnKTtcbiAgICByZXR1cm4gdW5pcXVlQXJyYXkoZm9jdXNhYmxlRWxlbWVudHNXaXRoVGFiaW5kZXguY29uY2F0KG90aGVyRm9jdXNhYmxlRWxlbWVudHMpKS5maWx0ZXIoZWwgPT4gaXNWaXNpYmxlJDEoZWwpKTtcbiAgfTtcblxuICAvKipcbiAgICogQHJldHVybnMge2Jvb2xlYW59XG4gICAqL1xuICBjb25zdCBpc01vZGFsID0gKCkgPT4ge1xuICAgIHJldHVybiBoYXNDbGFzcyhkb2N1bWVudC5ib2R5LCBzd2FsQ2xhc3Nlcy5zaG93bikgJiYgIWhhc0NsYXNzKGRvY3VtZW50LmJvZHksIHN3YWxDbGFzc2VzWyd0b2FzdC1zaG93biddKSAmJiAhaGFzQ2xhc3MoZG9jdW1lbnQuYm9keSwgc3dhbENsYXNzZXNbJ25vLWJhY2tkcm9wJ10pO1xuICB9O1xuXG4gIC8qKlxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAgICovXG4gIGNvbnN0IGlzVG9hc3QgPSAoKSA9PiB7XG4gICAgcmV0dXJuIGdldFBvcHVwKCkgJiYgaGFzQ2xhc3MoZ2V0UG9wdXAoKSwgc3dhbENsYXNzZXMudG9hc3QpO1xuICB9O1xuXG4gIC8qKlxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAgICovXG4gIGNvbnN0IGlzTG9hZGluZyA9ICgpID0+IHtcbiAgICByZXR1cm4gZ2V0UG9wdXAoKS5oYXNBdHRyaWJ1dGUoJ2RhdGEtbG9hZGluZycpO1xuICB9O1xuXG4gIC8vIFJlbWVtYmVyIHN0YXRlIGluIGNhc2VzIHdoZXJlIG9wZW5pbmcgYW5kIGhhbmRsaW5nIGEgbW9kYWwgd2lsbCBmaWRkbGUgd2l0aCBpdC5cbiAgY29uc3Qgc3RhdGVzID0ge1xuICAgIHByZXZpb3VzQm9keVBhZGRpbmc6IG51bGxcbiAgfTtcblxuICAvKipcbiAgICogU2VjdXJlbHkgc2V0IGlubmVySFRNTCBvZiBhbiBlbGVtZW50XG4gICAqIGh0dHBzOi8vZ2l0aHViLmNvbS9zd2VldGFsZXJ0Mi9zd2VldGFsZXJ0Mi9pc3N1ZXMvMTkyNlxuICAgKlxuICAgKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBlbGVtXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBodG1sXG4gICAqL1xuICBjb25zdCBzZXRJbm5lckh0bWwgPSAoZWxlbSwgaHRtbCkgPT4ge1xuICAgIGVsZW0udGV4dENvbnRlbnQgPSAnJztcbiAgICBpZiAoaHRtbCkge1xuICAgICAgY29uc3QgcGFyc2VyID0gbmV3IERPTVBhcnNlcigpO1xuICAgICAgY29uc3QgcGFyc2VkID0gcGFyc2VyLnBhcnNlRnJvbVN0cmluZyhodG1sLCBgdGV4dC9odG1sYCk7XG4gICAgICBBcnJheS5mcm9tKHBhcnNlZC5xdWVyeVNlbGVjdG9yKCdoZWFkJykuY2hpbGROb2RlcykuZm9yRWFjaChjaGlsZCA9PiB7XG4gICAgICAgIGVsZW0uYXBwZW5kQ2hpbGQoY2hpbGQpO1xuICAgICAgfSk7XG4gICAgICBBcnJheS5mcm9tKHBhcnNlZC5xdWVyeVNlbGVjdG9yKCdib2R5JykuY2hpbGROb2RlcykuZm9yRWFjaChjaGlsZCA9PiB7XG4gICAgICAgIGlmIChjaGlsZCBpbnN0YW5jZW9mIEhUTUxWaWRlb0VsZW1lbnQgfHwgY2hpbGQgaW5zdGFuY2VvZiBIVE1MQXVkaW9FbGVtZW50KSB7XG4gICAgICAgICAgZWxlbS5hcHBlbmRDaGlsZChjaGlsZC5jbG9uZU5vZGUodHJ1ZSkpOyAvLyBodHRwczovL2dpdGh1Yi5jb20vc3dlZXRhbGVydDIvc3dlZXRhbGVydDIvaXNzdWVzLzI1MDdcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBlbGVtLmFwcGVuZENoaWxkKGNoaWxkKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICB9O1xuXG4gIC8qKlxuICAgKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBlbGVtXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBjbGFzc05hbWVcbiAgICogQHJldHVybnMge2Jvb2xlYW59XG4gICAqL1xuICBjb25zdCBoYXNDbGFzcyA9IChlbGVtLCBjbGFzc05hbWUpID0+IHtcbiAgICBpZiAoIWNsYXNzTmFtZSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBjb25zdCBjbGFzc0xpc3QgPSBjbGFzc05hbWUuc3BsaXQoL1xccysvKTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNsYXNzTGlzdC5sZW5ndGg7IGkrKykge1xuICAgICAgaWYgKCFlbGVtLmNsYXNzTGlzdC5jb250YWlucyhjbGFzc0xpc3RbaV0pKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG4gIH07XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IGVsZW1cbiAgICogQHBhcmFtIHtTd2VldEFsZXJ0T3B0aW9uc30gcGFyYW1zXG4gICAqL1xuICBjb25zdCByZW1vdmVDdXN0b21DbGFzc2VzID0gKGVsZW0sIHBhcmFtcykgPT4ge1xuICAgIEFycmF5LmZyb20oZWxlbS5jbGFzc0xpc3QpLmZvckVhY2goY2xhc3NOYW1lID0+IHtcbiAgICAgIGlmICghT2JqZWN0LnZhbHVlcyhzd2FsQ2xhc3NlcykuaW5jbHVkZXMoY2xhc3NOYW1lKSAmJiAhT2JqZWN0LnZhbHVlcyhpY29uVHlwZXMpLmluY2x1ZGVzKGNsYXNzTmFtZSkgJiYgIU9iamVjdC52YWx1ZXMocGFyYW1zLnNob3dDbGFzcykuaW5jbHVkZXMoY2xhc3NOYW1lKSkge1xuICAgICAgICBlbGVtLmNsYXNzTGlzdC5yZW1vdmUoY2xhc3NOYW1lKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfTtcblxuICAvKipcbiAgICogQHBhcmFtIHtIVE1MRWxlbWVudH0gZWxlbVxuICAgKiBAcGFyYW0ge1N3ZWV0QWxlcnRPcHRpb25zfSBwYXJhbXNcbiAgICogQHBhcmFtIHtzdHJpbmd9IGNsYXNzTmFtZVxuICAgKi9cbiAgY29uc3QgYXBwbHlDdXN0b21DbGFzcyA9IChlbGVtLCBwYXJhbXMsIGNsYXNzTmFtZSkgPT4ge1xuICAgIHJlbW92ZUN1c3RvbUNsYXNzZXMoZWxlbSwgcGFyYW1zKTtcbiAgICBpZiAocGFyYW1zLmN1c3RvbUNsYXNzICYmIHBhcmFtcy5jdXN0b21DbGFzc1tjbGFzc05hbWVdKSB7XG4gICAgICBpZiAodHlwZW9mIHBhcmFtcy5jdXN0b21DbGFzc1tjbGFzc05hbWVdICE9PSAnc3RyaW5nJyAmJiAhcGFyYW1zLmN1c3RvbUNsYXNzW2NsYXNzTmFtZV0uZm9yRWFjaCkge1xuICAgICAgICB3YXJuKGBJbnZhbGlkIHR5cGUgb2YgY3VzdG9tQ2xhc3MuJHtjbGFzc05hbWV9ISBFeHBlY3RlZCBzdHJpbmcgb3IgaXRlcmFibGUgb2JqZWN0LCBnb3QgXCIke3R5cGVvZiBwYXJhbXMuY3VzdG9tQ2xhc3NbY2xhc3NOYW1lXX1cImApO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBhZGRDbGFzcyhlbGVtLCBwYXJhbXMuY3VzdG9tQ2xhc3NbY2xhc3NOYW1lXSk7XG4gICAgfVxuICB9O1xuXG4gIC8qKlxuICAgKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBwb3B1cFxuICAgKiBAcGFyYW0ge2ltcG9ydCgnLi9yZW5kZXJlcnMvcmVuZGVySW5wdXQnKS5JbnB1dENsYXNzfSBpbnB1dENsYXNzXG4gICAqIEByZXR1cm5zIHtIVE1MSW5wdXRFbGVtZW50IHwgbnVsbH1cbiAgICovXG4gIGNvbnN0IGdldElucHV0JDEgPSAocG9wdXAsIGlucHV0Q2xhc3MpID0+IHtcbiAgICBpZiAoIWlucHV0Q2xhc3MpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICBzd2l0Y2ggKGlucHV0Q2xhc3MpIHtcbiAgICAgIGNhc2UgJ3NlbGVjdCc6XG4gICAgICBjYXNlICd0ZXh0YXJlYSc6XG4gICAgICBjYXNlICdmaWxlJzpcbiAgICAgICAgcmV0dXJuIHBvcHVwLnF1ZXJ5U2VsZWN0b3IoYC4ke3N3YWxDbGFzc2VzLnBvcHVwfSA+IC4ke3N3YWxDbGFzc2VzW2lucHV0Q2xhc3NdfWApO1xuICAgICAgY2FzZSAnY2hlY2tib3gnOlxuICAgICAgICByZXR1cm4gcG9wdXAucXVlcnlTZWxlY3RvcihgLiR7c3dhbENsYXNzZXMucG9wdXB9ID4gLiR7c3dhbENsYXNzZXMuY2hlY2tib3h9IGlucHV0YCk7XG4gICAgICBjYXNlICdyYWRpbyc6XG4gICAgICAgIHJldHVybiBwb3B1cC5xdWVyeVNlbGVjdG9yKGAuJHtzd2FsQ2xhc3Nlcy5wb3B1cH0gPiAuJHtzd2FsQ2xhc3Nlcy5yYWRpb30gaW5wdXQ6Y2hlY2tlZGApIHx8IHBvcHVwLnF1ZXJ5U2VsZWN0b3IoYC4ke3N3YWxDbGFzc2VzLnBvcHVwfSA+IC4ke3N3YWxDbGFzc2VzLnJhZGlvfSBpbnB1dDpmaXJzdC1jaGlsZGApO1xuICAgICAgY2FzZSAncmFuZ2UnOlxuICAgICAgICByZXR1cm4gcG9wdXAucXVlcnlTZWxlY3RvcihgLiR7c3dhbENsYXNzZXMucG9wdXB9ID4gLiR7c3dhbENsYXNzZXMucmFuZ2V9IGlucHV0YCk7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gcG9wdXAucXVlcnlTZWxlY3RvcihgLiR7c3dhbENsYXNzZXMucG9wdXB9ID4gLiR7c3dhbENsYXNzZXMuaW5wdXR9YCk7XG4gICAgfVxuICB9O1xuXG4gIC8qKlxuICAgKiBAcGFyYW0ge0hUTUxJbnB1dEVsZW1lbnQgfCBIVE1MVGV4dEFyZWFFbGVtZW50IHwgSFRNTFNlbGVjdEVsZW1lbnR9IGlucHV0XG4gICAqL1xuICBjb25zdCBmb2N1c0lucHV0ID0gaW5wdXQgPT4ge1xuICAgIGlucHV0LmZvY3VzKCk7XG5cbiAgICAvLyBwbGFjZSBjdXJzb3IgYXQgZW5kIG9mIHRleHQgaW4gdGV4dCBpbnB1dFxuICAgIGlmIChpbnB1dC50eXBlICE9PSAnZmlsZScpIHtcbiAgICAgIC8vIGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9hLzIzNDU5MTVcbiAgICAgIGNvbnN0IHZhbCA9IGlucHV0LnZhbHVlO1xuICAgICAgaW5wdXQudmFsdWUgPSAnJztcbiAgICAgIGlucHV0LnZhbHVlID0gdmFsO1xuICAgIH1cbiAgfTtcblxuICAvKipcbiAgICogQHBhcmFtIHtIVE1MRWxlbWVudCB8IEhUTUxFbGVtZW50W10gfCBudWxsfSB0YXJnZXRcbiAgICogQHBhcmFtIHtzdHJpbmcgfCBzdHJpbmdbXSB8IHJlYWRvbmx5IHN0cmluZ1tdfSBjbGFzc0xpc3RcbiAgICogQHBhcmFtIHtib29sZWFufSBjb25kaXRpb25cbiAgICovXG4gIGNvbnN0IHRvZ2dsZUNsYXNzID0gKHRhcmdldCwgY2xhc3NMaXN0LCBjb25kaXRpb24pID0+IHtcbiAgICBpZiAoIXRhcmdldCB8fCAhY2xhc3NMaXN0KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmICh0eXBlb2YgY2xhc3NMaXN0ID09PSAnc3RyaW5nJykge1xuICAgICAgY2xhc3NMaXN0ID0gY2xhc3NMaXN0LnNwbGl0KC9cXHMrLykuZmlsdGVyKEJvb2xlYW4pO1xuICAgIH1cbiAgICBjbGFzc0xpc3QuZm9yRWFjaChjbGFzc05hbWUgPT4ge1xuICAgICAgaWYgKEFycmF5LmlzQXJyYXkodGFyZ2V0KSkge1xuICAgICAgICB0YXJnZXQuZm9yRWFjaChlbGVtID0+IHtcbiAgICAgICAgICBjb25kaXRpb24gPyBlbGVtLmNsYXNzTGlzdC5hZGQoY2xhc3NOYW1lKSA6IGVsZW0uY2xhc3NMaXN0LnJlbW92ZShjbGFzc05hbWUpO1xuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbmRpdGlvbiA/IHRhcmdldC5jbGFzc0xpc3QuYWRkKGNsYXNzTmFtZSkgOiB0YXJnZXQuY2xhc3NMaXN0LnJlbW92ZShjbGFzc05hbWUpO1xuICAgICAgfVxuICAgIH0pO1xuICB9O1xuXG4gIC8qKlxuICAgKiBAcGFyYW0ge0hUTUxFbGVtZW50IHwgSFRNTEVsZW1lbnRbXSB8IG51bGx9IHRhcmdldFxuICAgKiBAcGFyYW0ge3N0cmluZyB8IHN0cmluZ1tdIHwgcmVhZG9ubHkgc3RyaW5nW119IGNsYXNzTGlzdFxuICAgKi9cbiAgY29uc3QgYWRkQ2xhc3MgPSAodGFyZ2V0LCBjbGFzc0xpc3QpID0+IHtcbiAgICB0b2dnbGVDbGFzcyh0YXJnZXQsIGNsYXNzTGlzdCwgdHJ1ZSk7XG4gIH07XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7SFRNTEVsZW1lbnQgfCBIVE1MRWxlbWVudFtdIHwgbnVsbH0gdGFyZ2V0XG4gICAqIEBwYXJhbSB7c3RyaW5nIHwgc3RyaW5nW10gfCByZWFkb25seSBzdHJpbmdbXX0gY2xhc3NMaXN0XG4gICAqL1xuICBjb25zdCByZW1vdmVDbGFzcyA9ICh0YXJnZXQsIGNsYXNzTGlzdCkgPT4ge1xuICAgIHRvZ2dsZUNsYXNzKHRhcmdldCwgY2xhc3NMaXN0LCBmYWxzZSk7XG4gIH07XG5cbiAgLyoqXG4gICAqIEdldCBkaXJlY3QgY2hpbGQgb2YgYW4gZWxlbWVudCBieSBjbGFzcyBuYW1lXG4gICAqXG4gICAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IGVsZW1cbiAgICogQHBhcmFtIHtzdHJpbmd9IGNsYXNzTmFtZVxuICAgKiBAcmV0dXJucyB7SFRNTEVsZW1lbnQgfCB1bmRlZmluZWR9XG4gICAqL1xuICBjb25zdCBnZXREaXJlY3RDaGlsZEJ5Q2xhc3MgPSAoZWxlbSwgY2xhc3NOYW1lKSA9PiB7XG4gICAgY29uc3QgY2hpbGRyZW4gPSBBcnJheS5mcm9tKGVsZW0uY2hpbGRyZW4pO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcbiAgICAgIGNvbnN0IGNoaWxkID0gY2hpbGRyZW5baV07XG4gICAgICBpZiAoY2hpbGQgaW5zdGFuY2VvZiBIVE1MRWxlbWVudCAmJiBoYXNDbGFzcyhjaGlsZCwgY2xhc3NOYW1lKSkge1xuICAgICAgICByZXR1cm4gY2hpbGQ7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIC8qKlxuICAgKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBlbGVtXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBwcm9wZXJ0eVxuICAgKiBAcGFyYW0geyp9IHZhbHVlXG4gICAqL1xuICBjb25zdCBhcHBseU51bWVyaWNhbFN0eWxlID0gKGVsZW0sIHByb3BlcnR5LCB2YWx1ZSkgPT4ge1xuICAgIGlmICh2YWx1ZSA9PT0gYCR7cGFyc2VJbnQodmFsdWUpfWApIHtcbiAgICAgIHZhbHVlID0gcGFyc2VJbnQodmFsdWUpO1xuICAgIH1cbiAgICBpZiAodmFsdWUgfHwgcGFyc2VJbnQodmFsdWUpID09PSAwKSB7XG4gICAgICBlbGVtLnN0eWxlW3Byb3BlcnR5XSA9IHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicgPyBgJHt2YWx1ZX1weGAgOiB2YWx1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgZWxlbS5zdHlsZS5yZW1vdmVQcm9wZXJ0eShwcm9wZXJ0eSk7XG4gICAgfVxuICB9O1xuXG4gIC8qKlxuICAgKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBlbGVtXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBkaXNwbGF5XG4gICAqL1xuICBjb25zdCBzaG93ID0gZnVuY3Rpb24gKGVsZW0pIHtcbiAgICBsZXQgZGlzcGxheSA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogJ2ZsZXgnO1xuICAgIGVsZW0uc3R5bGUuZGlzcGxheSA9IGRpc3BsYXk7XG4gIH07XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IGVsZW1cbiAgICovXG4gIGNvbnN0IGhpZGUgPSBlbGVtID0+IHtcbiAgICBlbGVtLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG4gIH07XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IHBhcmVudFxuICAgKiBAcGFyYW0ge3N0cmluZ30gc2VsZWN0b3JcbiAgICogQHBhcmFtIHtzdHJpbmd9IHByb3BlcnR5XG4gICAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZVxuICAgKi9cbiAgY29uc3Qgc2V0U3R5bGUgPSAocGFyZW50LCBzZWxlY3RvciwgcHJvcGVydHksIHZhbHVlKSA9PiB7XG4gICAgLyoqIEB0eXBlIHtIVE1MRWxlbWVudH0gKi9cbiAgICBjb25zdCBlbCA9IHBhcmVudC5xdWVyeVNlbGVjdG9yKHNlbGVjdG9yKTtcbiAgICBpZiAoZWwpIHtcbiAgICAgIGVsLnN0eWxlW3Byb3BlcnR5XSA9IHZhbHVlO1xuICAgIH1cbiAgfTtcblxuICAvKipcbiAgICogQHBhcmFtIHtIVE1MRWxlbWVudH0gZWxlbVxuICAgKiBAcGFyYW0ge2FueX0gY29uZGl0aW9uXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBkaXNwbGF5XG4gICAqL1xuICBjb25zdCB0b2dnbGUgPSBmdW5jdGlvbiAoZWxlbSwgY29uZGl0aW9uKSB7XG4gICAgbGV0IGRpc3BsYXkgPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6ICdmbGV4JztcbiAgICBjb25kaXRpb24gPyBzaG93KGVsZW0sIGRpc3BsYXkpIDogaGlkZShlbGVtKTtcbiAgfTtcblxuICAvKipcbiAgICogYm9ycm93ZWQgZnJvbSBqcXVlcnkgJChlbGVtKS5pcygnOnZpc2libGUnKSBpbXBsZW1lbnRhdGlvblxuICAgKlxuICAgKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBlbGVtXG4gICAqIEByZXR1cm5zIHtib29sZWFufVxuICAgKi9cbiAgY29uc3QgaXNWaXNpYmxlJDEgPSBlbGVtID0+ICEhKGVsZW0gJiYgKGVsZW0ub2Zmc2V0V2lkdGggfHwgZWxlbS5vZmZzZXRIZWlnaHQgfHwgZWxlbS5nZXRDbGllbnRSZWN0cygpLmxlbmd0aCkpO1xuXG4gIC8qKlxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAgICovXG4gIGNvbnN0IGFsbEJ1dHRvbnNBcmVIaWRkZW4gPSAoKSA9PiAhaXNWaXNpYmxlJDEoZ2V0Q29uZmlybUJ1dHRvbigpKSAmJiAhaXNWaXNpYmxlJDEoZ2V0RGVueUJ1dHRvbigpKSAmJiAhaXNWaXNpYmxlJDEoZ2V0Q2FuY2VsQnV0dG9uKCkpO1xuXG4gIC8qKlxuICAgKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBlbGVtXG4gICAqIEByZXR1cm5zIHtib29sZWFufVxuICAgKi9cbiAgY29uc3QgaXNTY3JvbGxhYmxlID0gZWxlbSA9PiAhIShlbGVtLnNjcm9sbEhlaWdodCA+IGVsZW0uY2xpZW50SGVpZ2h0KTtcblxuICAvKipcbiAgICogYm9ycm93ZWQgZnJvbSBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL2EvNDYzNTIxMTlcbiAgICpcbiAgICogQHBhcmFtIHtIVE1MRWxlbWVudH0gZWxlbVxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAgICovXG4gIGNvbnN0IGhhc0Nzc0FuaW1hdGlvbiA9IGVsZW0gPT4ge1xuICAgIGNvbnN0IHN0eWxlID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUoZWxlbSk7XG4gICAgY29uc3QgYW5pbUR1cmF0aW9uID0gcGFyc2VGbG9hdChzdHlsZS5nZXRQcm9wZXJ0eVZhbHVlKCdhbmltYXRpb24tZHVyYXRpb24nKSB8fCAnMCcpO1xuICAgIGNvbnN0IHRyYW5zRHVyYXRpb24gPSBwYXJzZUZsb2F0KHN0eWxlLmdldFByb3BlcnR5VmFsdWUoJ3RyYW5zaXRpb24tZHVyYXRpb24nKSB8fCAnMCcpO1xuICAgIHJldHVybiBhbmltRHVyYXRpb24gPiAwIHx8IHRyYW5zRHVyYXRpb24gPiAwO1xuICB9O1xuXG4gIC8qKlxuICAgKiBAcGFyYW0ge251bWJlcn0gdGltZXJcbiAgICogQHBhcmFtIHtib29sZWFufSByZXNldFxuICAgKi9cbiAgY29uc3QgYW5pbWF0ZVRpbWVyUHJvZ3Jlc3NCYXIgPSBmdW5jdGlvbiAodGltZXIpIHtcbiAgICBsZXQgcmVzZXQgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IGZhbHNlO1xuICAgIGNvbnN0IHRpbWVyUHJvZ3Jlc3NCYXIgPSBnZXRUaW1lclByb2dyZXNzQmFyKCk7XG4gICAgaWYgKGlzVmlzaWJsZSQxKHRpbWVyUHJvZ3Jlc3NCYXIpKSB7XG4gICAgICBpZiAocmVzZXQpIHtcbiAgICAgICAgdGltZXJQcm9ncmVzc0Jhci5zdHlsZS50cmFuc2l0aW9uID0gJ25vbmUnO1xuICAgICAgICB0aW1lclByb2dyZXNzQmFyLnN0eWxlLndpZHRoID0gJzEwMCUnO1xuICAgICAgfVxuICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgIHRpbWVyUHJvZ3Jlc3NCYXIuc3R5bGUudHJhbnNpdGlvbiA9IGB3aWR0aCAke3RpbWVyIC8gMTAwMH1zIGxpbmVhcmA7XG4gICAgICAgIHRpbWVyUHJvZ3Jlc3NCYXIuc3R5bGUud2lkdGggPSAnMCUnO1xuICAgICAgfSwgMTApO1xuICAgIH1cbiAgfTtcbiAgY29uc3Qgc3RvcFRpbWVyUHJvZ3Jlc3NCYXIgPSAoKSA9PiB7XG4gICAgY29uc3QgdGltZXJQcm9ncmVzc0JhciA9IGdldFRpbWVyUHJvZ3Jlc3NCYXIoKTtcbiAgICBjb25zdCB0aW1lclByb2dyZXNzQmFyV2lkdGggPSBwYXJzZUludCh3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZSh0aW1lclByb2dyZXNzQmFyKS53aWR0aCk7XG4gICAgdGltZXJQcm9ncmVzc0Jhci5zdHlsZS5yZW1vdmVQcm9wZXJ0eSgndHJhbnNpdGlvbicpO1xuICAgIHRpbWVyUHJvZ3Jlc3NCYXIuc3R5bGUud2lkdGggPSAnMTAwJSc7XG4gICAgY29uc3QgdGltZXJQcm9ncmVzc0JhckZ1bGxXaWR0aCA9IHBhcnNlSW50KHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKHRpbWVyUHJvZ3Jlc3NCYXIpLndpZHRoKTtcbiAgICBjb25zdCB0aW1lclByb2dyZXNzQmFyUGVyY2VudCA9IHRpbWVyUHJvZ3Jlc3NCYXJXaWR0aCAvIHRpbWVyUHJvZ3Jlc3NCYXJGdWxsV2lkdGggKiAxMDA7XG4gICAgdGltZXJQcm9ncmVzc0Jhci5zdHlsZS53aWR0aCA9IGAke3RpbWVyUHJvZ3Jlc3NCYXJQZXJjZW50fSVgO1xuICB9O1xuXG4gIGNvbnN0IFJFU1RPUkVfRk9DVVNfVElNRU9VVCA9IDEwMDtcblxuICAvKiogQHR5cGUge0dsb2JhbFN0YXRlfSAqL1xuICBjb25zdCBnbG9iYWxTdGF0ZSA9IHt9O1xuICBjb25zdCBmb2N1c1ByZXZpb3VzQWN0aXZlRWxlbWVudCA9ICgpID0+IHtcbiAgICBpZiAoZ2xvYmFsU3RhdGUucHJldmlvdXNBY3RpdmVFbGVtZW50IGluc3RhbmNlb2YgSFRNTEVsZW1lbnQpIHtcbiAgICAgIGdsb2JhbFN0YXRlLnByZXZpb3VzQWN0aXZlRWxlbWVudC5mb2N1cygpO1xuICAgICAgZ2xvYmFsU3RhdGUucHJldmlvdXNBY3RpdmVFbGVtZW50ID0gbnVsbDtcbiAgICB9IGVsc2UgaWYgKGRvY3VtZW50LmJvZHkpIHtcbiAgICAgIGRvY3VtZW50LmJvZHkuZm9jdXMoKTtcbiAgICB9XG4gIH07XG5cbiAgLyoqXG4gICAqIFJlc3RvcmUgcHJldmlvdXMgYWN0aXZlIChmb2N1c2VkKSBlbGVtZW50XG4gICAqXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gcmV0dXJuRm9jdXNcbiAgICogQHJldHVybnMge1Byb21pc2V9XG4gICAqL1xuICBjb25zdCByZXN0b3JlQWN0aXZlRWxlbWVudCA9IHJldHVybkZvY3VzID0+IHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UocmVzb2x2ZSA9PiB7XG4gICAgICBpZiAoIXJldHVybkZvY3VzKSB7XG4gICAgICAgIHJldHVybiByZXNvbHZlKCk7XG4gICAgICB9XG4gICAgICBjb25zdCB4ID0gd2luZG93LnNjcm9sbFg7XG4gICAgICBjb25zdCB5ID0gd2luZG93LnNjcm9sbFk7XG4gICAgICBnbG9iYWxTdGF0ZS5yZXN0b3JlRm9jdXNUaW1lb3V0ID0gc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgIGZvY3VzUHJldmlvdXNBY3RpdmVFbGVtZW50KCk7XG4gICAgICAgIHJlc29sdmUoKTtcbiAgICAgIH0sIFJFU1RPUkVfRk9DVVNfVElNRU9VVCk7IC8vIGlzc3Vlcy85MDBcblxuICAgICAgd2luZG93LnNjcm9sbFRvKHgsIHkpO1xuICAgIH0pO1xuICB9O1xuXG4gIC8qKlxuICAgKiBEZXRlY3QgTm9kZSBlbnZcbiAgICpcbiAgICogQHJldHVybnMge2Jvb2xlYW59XG4gICAqL1xuICBjb25zdCBpc05vZGVFbnYgPSAoKSA9PiB0eXBlb2Ygd2luZG93ID09PSAndW5kZWZpbmVkJyB8fCB0eXBlb2YgZG9jdW1lbnQgPT09ICd1bmRlZmluZWQnO1xuXG4gIGNvbnN0IHN3ZWV0SFRNTCA9IGBcbiA8ZGl2IGFyaWEtbGFiZWxsZWRieT1cIiR7c3dhbENsYXNzZXMudGl0bGV9XCIgYXJpYS1kZXNjcmliZWRieT1cIiR7c3dhbENsYXNzZXNbJ2h0bWwtY29udGFpbmVyJ119XCIgY2xhc3M9XCIke3N3YWxDbGFzc2VzLnBvcHVwfVwiIHRhYmluZGV4PVwiLTFcIj5cbiAgIDxidXR0b24gdHlwZT1cImJ1dHRvblwiIGNsYXNzPVwiJHtzd2FsQ2xhc3Nlcy5jbG9zZX1cIj48L2J1dHRvbj5cbiAgIDx1bCBjbGFzcz1cIiR7c3dhbENsYXNzZXNbJ3Byb2dyZXNzLXN0ZXBzJ119XCI+PC91bD5cbiAgIDxkaXYgY2xhc3M9XCIke3N3YWxDbGFzc2VzLmljb259XCI+PC9kaXY+XG4gICA8aW1nIGNsYXNzPVwiJHtzd2FsQ2xhc3Nlcy5pbWFnZX1cIiAvPlxuICAgPGgyIGNsYXNzPVwiJHtzd2FsQ2xhc3Nlcy50aXRsZX1cIiBpZD1cIiR7c3dhbENsYXNzZXMudGl0bGV9XCI+PC9oMj5cbiAgIDxkaXYgY2xhc3M9XCIke3N3YWxDbGFzc2VzWydodG1sLWNvbnRhaW5lciddfVwiIGlkPVwiJHtzd2FsQ2xhc3Nlc1snaHRtbC1jb250YWluZXInXX1cIj48L2Rpdj5cbiAgIDxpbnB1dCBjbGFzcz1cIiR7c3dhbENsYXNzZXMuaW5wdXR9XCIgLz5cbiAgIDxpbnB1dCB0eXBlPVwiZmlsZVwiIGNsYXNzPVwiJHtzd2FsQ2xhc3Nlcy5maWxlfVwiIC8+XG4gICA8ZGl2IGNsYXNzPVwiJHtzd2FsQ2xhc3Nlcy5yYW5nZX1cIj5cbiAgICAgPGlucHV0IHR5cGU9XCJyYW5nZVwiIC8+XG4gICAgIDxvdXRwdXQ+PC9vdXRwdXQ+XG4gICA8L2Rpdj5cbiAgIDxzZWxlY3QgY2xhc3M9XCIke3N3YWxDbGFzc2VzLnNlbGVjdH1cIj48L3NlbGVjdD5cbiAgIDxkaXYgY2xhc3M9XCIke3N3YWxDbGFzc2VzLnJhZGlvfVwiPjwvZGl2PlxuICAgPGxhYmVsIGZvcj1cIiR7c3dhbENsYXNzZXMuY2hlY2tib3h9XCIgY2xhc3M9XCIke3N3YWxDbGFzc2VzLmNoZWNrYm94fVwiPlxuICAgICA8aW5wdXQgdHlwZT1cImNoZWNrYm94XCIgLz5cbiAgICAgPHNwYW4gY2xhc3M9XCIke3N3YWxDbGFzc2VzLmxhYmVsfVwiPjwvc3Bhbj5cbiAgIDwvbGFiZWw+XG4gICA8dGV4dGFyZWEgY2xhc3M9XCIke3N3YWxDbGFzc2VzLnRleHRhcmVhfVwiPjwvdGV4dGFyZWE+XG4gICA8ZGl2IGNsYXNzPVwiJHtzd2FsQ2xhc3Nlc1sndmFsaWRhdGlvbi1tZXNzYWdlJ119XCIgaWQ9XCIke3N3YWxDbGFzc2VzWyd2YWxpZGF0aW9uLW1lc3NhZ2UnXX1cIj48L2Rpdj5cbiAgIDxkaXYgY2xhc3M9XCIke3N3YWxDbGFzc2VzLmFjdGlvbnN9XCI+XG4gICAgIDxkaXYgY2xhc3M9XCIke3N3YWxDbGFzc2VzLmxvYWRlcn1cIj48L2Rpdj5cbiAgICAgPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgY2xhc3M9XCIke3N3YWxDbGFzc2VzLmNvbmZpcm19XCI+PC9idXR0b24+XG4gICAgIDxidXR0b24gdHlwZT1cImJ1dHRvblwiIGNsYXNzPVwiJHtzd2FsQ2xhc3Nlcy5kZW55fVwiPjwvYnV0dG9uPlxuICAgICA8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBjbGFzcz1cIiR7c3dhbENsYXNzZXMuY2FuY2VsfVwiPjwvYnV0dG9uPlxuICAgPC9kaXY+XG4gICA8ZGl2IGNsYXNzPVwiJHtzd2FsQ2xhc3Nlcy5mb290ZXJ9XCI+PC9kaXY+XG4gICA8ZGl2IGNsYXNzPVwiJHtzd2FsQ2xhc3Nlc1sndGltZXItcHJvZ3Jlc3MtYmFyLWNvbnRhaW5lciddfVwiPlxuICAgICA8ZGl2IGNsYXNzPVwiJHtzd2FsQ2xhc3Nlc1sndGltZXItcHJvZ3Jlc3MtYmFyJ119XCI+PC9kaXY+XG4gICA8L2Rpdj5cbiA8L2Rpdj5cbmAucmVwbGFjZSgvKF58XFxuKVxccyovZywgJycpO1xuXG4gIC8qKlxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAgICovXG4gIGNvbnN0IHJlc2V0T2xkQ29udGFpbmVyID0gKCkgPT4ge1xuICAgIGNvbnN0IG9sZENvbnRhaW5lciA9IGdldENvbnRhaW5lcigpO1xuICAgIGlmICghb2xkQ29udGFpbmVyKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIG9sZENvbnRhaW5lci5yZW1vdmUoKTtcbiAgICByZW1vdmVDbGFzcyhbZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LCBkb2N1bWVudC5ib2R5XSwgW3N3YWxDbGFzc2VzWyduby1iYWNrZHJvcCddLCBzd2FsQ2xhc3Nlc1sndG9hc3Qtc2hvd24nXSwgc3dhbENsYXNzZXNbJ2hhcy1jb2x1bW4nXV0pO1xuICAgIHJldHVybiB0cnVlO1xuICB9O1xuICBjb25zdCByZXNldFZhbGlkYXRpb25NZXNzYWdlJDEgPSAoKSA9PiB7XG4gICAgZ2xvYmFsU3RhdGUuY3VycmVudEluc3RhbmNlLnJlc2V0VmFsaWRhdGlvbk1lc3NhZ2UoKTtcbiAgfTtcbiAgY29uc3QgYWRkSW5wdXRDaGFuZ2VMaXN0ZW5lcnMgPSAoKSA9PiB7XG4gICAgY29uc3QgcG9wdXAgPSBnZXRQb3B1cCgpO1xuICAgIGNvbnN0IGlucHV0ID0gZ2V0RGlyZWN0Q2hpbGRCeUNsYXNzKHBvcHVwLCBzd2FsQ2xhc3Nlcy5pbnB1dCk7XG4gICAgY29uc3QgZmlsZSA9IGdldERpcmVjdENoaWxkQnlDbGFzcyhwb3B1cCwgc3dhbENsYXNzZXMuZmlsZSk7XG4gICAgLyoqIEB0eXBlIHtIVE1MSW5wdXRFbGVtZW50fSAqL1xuICAgIGNvbnN0IHJhbmdlID0gcG9wdXAucXVlcnlTZWxlY3RvcihgLiR7c3dhbENsYXNzZXMucmFuZ2V9IGlucHV0YCk7XG4gICAgLyoqIEB0eXBlIHtIVE1MT3V0cHV0RWxlbWVudH0gKi9cbiAgICBjb25zdCByYW5nZU91dHB1dCA9IHBvcHVwLnF1ZXJ5U2VsZWN0b3IoYC4ke3N3YWxDbGFzc2VzLnJhbmdlfSBvdXRwdXRgKTtcbiAgICBjb25zdCBzZWxlY3QgPSBnZXREaXJlY3RDaGlsZEJ5Q2xhc3MocG9wdXAsIHN3YWxDbGFzc2VzLnNlbGVjdCk7XG4gICAgLyoqIEB0eXBlIHtIVE1MSW5wdXRFbGVtZW50fSAqL1xuICAgIGNvbnN0IGNoZWNrYm94ID0gcG9wdXAucXVlcnlTZWxlY3RvcihgLiR7c3dhbENsYXNzZXMuY2hlY2tib3h9IGlucHV0YCk7XG4gICAgY29uc3QgdGV4dGFyZWEgPSBnZXREaXJlY3RDaGlsZEJ5Q2xhc3MocG9wdXAsIHN3YWxDbGFzc2VzLnRleHRhcmVhKTtcbiAgICBpbnB1dC5vbmlucHV0ID0gcmVzZXRWYWxpZGF0aW9uTWVzc2FnZSQxO1xuICAgIGZpbGUub25jaGFuZ2UgPSByZXNldFZhbGlkYXRpb25NZXNzYWdlJDE7XG4gICAgc2VsZWN0Lm9uY2hhbmdlID0gcmVzZXRWYWxpZGF0aW9uTWVzc2FnZSQxO1xuICAgIGNoZWNrYm94Lm9uY2hhbmdlID0gcmVzZXRWYWxpZGF0aW9uTWVzc2FnZSQxO1xuICAgIHRleHRhcmVhLm9uaW5wdXQgPSByZXNldFZhbGlkYXRpb25NZXNzYWdlJDE7XG4gICAgcmFuZ2Uub25pbnB1dCA9ICgpID0+IHtcbiAgICAgIHJlc2V0VmFsaWRhdGlvbk1lc3NhZ2UkMSgpO1xuICAgICAgcmFuZ2VPdXRwdXQudmFsdWUgPSByYW5nZS52YWx1ZTtcbiAgICB9O1xuICAgIHJhbmdlLm9uY2hhbmdlID0gKCkgPT4ge1xuICAgICAgcmVzZXRWYWxpZGF0aW9uTWVzc2FnZSQxKCk7XG4gICAgICByYW5nZU91dHB1dC52YWx1ZSA9IHJhbmdlLnZhbHVlO1xuICAgIH07XG4gIH07XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7c3RyaW5nIHwgSFRNTEVsZW1lbnR9IHRhcmdldFxuICAgKiBAcmV0dXJucyB7SFRNTEVsZW1lbnR9XG4gICAqL1xuICBjb25zdCBnZXRUYXJnZXQgPSB0YXJnZXQgPT4gdHlwZW9mIHRhcmdldCA9PT0gJ3N0cmluZycgPyBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHRhcmdldCkgOiB0YXJnZXQ7XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7U3dlZXRBbGVydE9wdGlvbnN9IHBhcmFtc1xuICAgKi9cbiAgY29uc3Qgc2V0dXBBY2Nlc3NpYmlsaXR5ID0gcGFyYW1zID0+IHtcbiAgICBjb25zdCBwb3B1cCA9IGdldFBvcHVwKCk7XG4gICAgcG9wdXAuc2V0QXR0cmlidXRlKCdyb2xlJywgcGFyYW1zLnRvYXN0ID8gJ2FsZXJ0JyA6ICdkaWFsb2cnKTtcbiAgICBwb3B1cC5zZXRBdHRyaWJ1dGUoJ2FyaWEtbGl2ZScsIHBhcmFtcy50b2FzdCA/ICdwb2xpdGUnIDogJ2Fzc2VydGl2ZScpO1xuICAgIGlmICghcGFyYW1zLnRvYXN0KSB7XG4gICAgICBwb3B1cC5zZXRBdHRyaWJ1dGUoJ2FyaWEtbW9kYWwnLCAndHJ1ZScpO1xuICAgIH1cbiAgfTtcblxuICAvKipcbiAgICogQHBhcmFtIHtIVE1MRWxlbWVudH0gdGFyZ2V0RWxlbWVudFxuICAgKi9cbiAgY29uc3Qgc2V0dXBSVEwgPSB0YXJnZXRFbGVtZW50ID0+IHtcbiAgICBpZiAod2luZG93LmdldENvbXB1dGVkU3R5bGUodGFyZ2V0RWxlbWVudCkuZGlyZWN0aW9uID09PSAncnRsJykge1xuICAgICAgYWRkQ2xhc3MoZ2V0Q29udGFpbmVyKCksIHN3YWxDbGFzc2VzLnJ0bCk7XG4gICAgfVxuICB9O1xuXG4gIC8qKlxuICAgKiBBZGQgbW9kYWwgKyBiYWNrZHJvcCArIG5vLXdhciBtZXNzYWdlIGZvciBSdXNzaWFucyB0byBET01cbiAgICpcbiAgICogQHBhcmFtIHtTd2VldEFsZXJ0T3B0aW9uc30gcGFyYW1zXG4gICAqL1xuICBjb25zdCBpbml0ID0gcGFyYW1zID0+IHtcbiAgICAvLyBDbGVhbiB1cCB0aGUgb2xkIHBvcHVwIGNvbnRhaW5lciBpZiBpdCBleGlzdHNcbiAgICBjb25zdCBvbGRDb250YWluZXJFeGlzdGVkID0gcmVzZXRPbGRDb250YWluZXIoKTtcblxuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgIGlmIChpc05vZGVFbnYoKSkge1xuICAgICAgZXJyb3IoJ1N3ZWV0QWxlcnQyIHJlcXVpcmVzIGRvY3VtZW50IHRvIGluaXRpYWxpemUnKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3QgY29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgY29udGFpbmVyLmNsYXNzTmFtZSA9IHN3YWxDbGFzc2VzLmNvbnRhaW5lcjtcbiAgICBpZiAob2xkQ29udGFpbmVyRXhpc3RlZCkge1xuICAgICAgYWRkQ2xhc3MoY29udGFpbmVyLCBzd2FsQ2xhc3Nlc1snbm8tdHJhbnNpdGlvbiddKTtcbiAgICB9XG4gICAgc2V0SW5uZXJIdG1sKGNvbnRhaW5lciwgc3dlZXRIVE1MKTtcbiAgICBjb25zdCB0YXJnZXRFbGVtZW50ID0gZ2V0VGFyZ2V0KHBhcmFtcy50YXJnZXQpO1xuICAgIHRhcmdldEVsZW1lbnQuYXBwZW5kQ2hpbGQoY29udGFpbmVyKTtcbiAgICBzZXR1cEFjY2Vzc2liaWxpdHkocGFyYW1zKTtcbiAgICBzZXR1cFJUTCh0YXJnZXRFbGVtZW50KTtcbiAgICBhZGRJbnB1dENoYW5nZUxpc3RlbmVycygpO1xuICB9O1xuXG4gIC8qKlxuICAgKiBAcGFyYW0ge0hUTUxFbGVtZW50IHwgb2JqZWN0IHwgc3RyaW5nfSBwYXJhbVxuICAgKiBAcGFyYW0ge0hUTUxFbGVtZW50fSB0YXJnZXRcbiAgICovXG4gIGNvbnN0IHBhcnNlSHRtbFRvQ29udGFpbmVyID0gKHBhcmFtLCB0YXJnZXQpID0+IHtcbiAgICAvLyBET00gZWxlbWVudFxuICAgIGlmIChwYXJhbSBpbnN0YW5jZW9mIEhUTUxFbGVtZW50KSB7XG4gICAgICB0YXJnZXQuYXBwZW5kQ2hpbGQocGFyYW0pO1xuICAgIH1cblxuICAgIC8vIE9iamVjdFxuICAgIGVsc2UgaWYgKHR5cGVvZiBwYXJhbSA9PT0gJ29iamVjdCcpIHtcbiAgICAgIGhhbmRsZU9iamVjdChwYXJhbSwgdGFyZ2V0KTtcbiAgICB9XG5cbiAgICAvLyBQbGFpbiBzdHJpbmdcbiAgICBlbHNlIGlmIChwYXJhbSkge1xuICAgICAgc2V0SW5uZXJIdG1sKHRhcmdldCwgcGFyYW0pO1xuICAgIH1cbiAgfTtcblxuICAvKipcbiAgICogQHBhcmFtIHtvYmplY3R9IHBhcmFtXG4gICAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IHRhcmdldFxuICAgKi9cbiAgY29uc3QgaGFuZGxlT2JqZWN0ID0gKHBhcmFtLCB0YXJnZXQpID0+IHtcbiAgICAvLyBKUXVlcnkgZWxlbWVudChzKVxuICAgIGlmIChwYXJhbS5qcXVlcnkpIHtcbiAgICAgIGhhbmRsZUpxdWVyeUVsZW0odGFyZ2V0LCBwYXJhbSk7XG4gICAgfVxuXG4gICAgLy8gRm9yIG90aGVyIG9iamVjdHMgdXNlIHRoZWlyIHN0cmluZyByZXByZXNlbnRhdGlvblxuICAgIGVsc2Uge1xuICAgICAgc2V0SW5uZXJIdG1sKHRhcmdldCwgcGFyYW0udG9TdHJpbmcoKSk7XG4gICAgfVxuICB9O1xuXG4gIC8qKlxuICAgKiBAcGFyYW0ge0hUTUxFbGVtZW50fSB0YXJnZXRcbiAgICogQHBhcmFtIHtIVE1MRWxlbWVudH0gZWxlbVxuICAgKi9cbiAgY29uc3QgaGFuZGxlSnF1ZXJ5RWxlbSA9ICh0YXJnZXQsIGVsZW0pID0+IHtcbiAgICB0YXJnZXQudGV4dENvbnRlbnQgPSAnJztcbiAgICBpZiAoMCBpbiBlbGVtKSB7XG4gICAgICBmb3IgKGxldCBpID0gMDsgKGkgaW4gZWxlbSk7IGkrKykge1xuICAgICAgICB0YXJnZXQuYXBwZW5kQ2hpbGQoZWxlbVtpXS5jbG9uZU5vZGUodHJ1ZSkpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB0YXJnZXQuYXBwZW5kQ2hpbGQoZWxlbS5jbG9uZU5vZGUodHJ1ZSkpO1xuICAgIH1cbiAgfTtcblxuICAvKipcbiAgICogQHJldHVybnMgeyd3ZWJraXRBbmltYXRpb25FbmQnIHwgJ2FuaW1hdGlvbmVuZCcgfCBmYWxzZX1cbiAgICovXG4gIGNvbnN0IGFuaW1hdGlvbkVuZEV2ZW50ID0gKCgpID0+IHtcbiAgICAvLyBQcmV2ZW50IHJ1biBpbiBOb2RlIGVudlxuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgIGlmIChpc05vZGVFbnYoKSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBjb25zdCB0ZXN0RWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICBjb25zdCB0cmFuc0VuZEV2ZW50TmFtZXMgPSB7XG4gICAgICBXZWJraXRBbmltYXRpb246ICd3ZWJraXRBbmltYXRpb25FbmQnLFxuICAgICAgLy8gQ2hyb21lLCBTYWZhcmkgYW5kIE9wZXJhXG4gICAgICBhbmltYXRpb246ICdhbmltYXRpb25lbmQnIC8vIFN0YW5kYXJkIHN5bnRheFxuICAgIH07XG5cbiAgICBmb3IgKGNvbnN0IGkgaW4gdHJhbnNFbmRFdmVudE5hbWVzKSB7XG4gICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHRyYW5zRW5kRXZlbnROYW1lcywgaSkgJiYgdHlwZW9mIHRlc3RFbC5zdHlsZVtpXSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgcmV0dXJuIHRyYW5zRW5kRXZlbnROYW1lc1tpXTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9KSgpO1xuXG4gIC8qKlxuICAgKiBNZWFzdXJlIHNjcm9sbGJhciB3aWR0aCBmb3IgcGFkZGluZyBib2R5IGR1cmluZyBtb2RhbCBzaG93L2hpZGVcbiAgICogaHR0cHM6Ly9naXRodWIuY29tL3R3YnMvYm9vdHN0cmFwL2Jsb2IvbWFzdGVyL2pzL3NyYy9tb2RhbC5qc1xuICAgKlxuICAgKiBAcmV0dXJucyB7bnVtYmVyfVxuICAgKi9cbiAgY29uc3QgbWVhc3VyZVNjcm9sbGJhciA9ICgpID0+IHtcbiAgICBjb25zdCBzY3JvbGxEaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICBzY3JvbGxEaXYuY2xhc3NOYW1lID0gc3dhbENsYXNzZXNbJ3Njcm9sbGJhci1tZWFzdXJlJ107XG4gICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChzY3JvbGxEaXYpO1xuICAgIGNvbnN0IHNjcm9sbGJhcldpZHRoID0gc2Nyb2xsRGl2LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLndpZHRoIC0gc2Nyb2xsRGl2LmNsaWVudFdpZHRoO1xuICAgIGRvY3VtZW50LmJvZHkucmVtb3ZlQ2hpbGQoc2Nyb2xsRGl2KTtcbiAgICByZXR1cm4gc2Nyb2xsYmFyV2lkdGg7XG4gIH07XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7U3dlZXRBbGVydDJ9IGluc3RhbmNlXG4gICAqIEBwYXJhbSB7U3dlZXRBbGVydE9wdGlvbnN9IHBhcmFtc1xuICAgKi9cbiAgY29uc3QgcmVuZGVyQWN0aW9ucyA9IChpbnN0YW5jZSwgcGFyYW1zKSA9PiB7XG4gICAgY29uc3QgYWN0aW9ucyA9IGdldEFjdGlvbnMoKTtcbiAgICBjb25zdCBsb2FkZXIgPSBnZXRMb2FkZXIoKTtcblxuICAgIC8vIEFjdGlvbnMgKGJ1dHRvbnMpIHdyYXBwZXJcbiAgICBpZiAoIXBhcmFtcy5zaG93Q29uZmlybUJ1dHRvbiAmJiAhcGFyYW1zLnNob3dEZW55QnV0dG9uICYmICFwYXJhbXMuc2hvd0NhbmNlbEJ1dHRvbikge1xuICAgICAgaGlkZShhY3Rpb25zKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc2hvdyhhY3Rpb25zKTtcbiAgICB9XG5cbiAgICAvLyBDdXN0b20gY2xhc3NcbiAgICBhcHBseUN1c3RvbUNsYXNzKGFjdGlvbnMsIHBhcmFtcywgJ2FjdGlvbnMnKTtcblxuICAgIC8vIFJlbmRlciBhbGwgdGhlIGJ1dHRvbnNcbiAgICByZW5kZXJCdXR0b25zKGFjdGlvbnMsIGxvYWRlciwgcGFyYW1zKTtcblxuICAgIC8vIExvYWRlclxuICAgIHNldElubmVySHRtbChsb2FkZXIsIHBhcmFtcy5sb2FkZXJIdG1sKTtcbiAgICBhcHBseUN1c3RvbUNsYXNzKGxvYWRlciwgcGFyYW1zLCAnbG9hZGVyJyk7XG4gIH07XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IGFjdGlvbnNcbiAgICogQHBhcmFtIHtIVE1MRWxlbWVudH0gbG9hZGVyXG4gICAqIEBwYXJhbSB7U3dlZXRBbGVydE9wdGlvbnN9IHBhcmFtc1xuICAgKi9cbiAgZnVuY3Rpb24gcmVuZGVyQnV0dG9ucyhhY3Rpb25zLCBsb2FkZXIsIHBhcmFtcykge1xuICAgIGNvbnN0IGNvbmZpcm1CdXR0b24gPSBnZXRDb25maXJtQnV0dG9uKCk7XG4gICAgY29uc3QgZGVueUJ1dHRvbiA9IGdldERlbnlCdXR0b24oKTtcbiAgICBjb25zdCBjYW5jZWxCdXR0b24gPSBnZXRDYW5jZWxCdXR0b24oKTtcblxuICAgIC8vIFJlbmRlciBidXR0b25zXG4gICAgcmVuZGVyQnV0dG9uKGNvbmZpcm1CdXR0b24sICdjb25maXJtJywgcGFyYW1zKTtcbiAgICByZW5kZXJCdXR0b24oZGVueUJ1dHRvbiwgJ2RlbnknLCBwYXJhbXMpO1xuICAgIHJlbmRlckJ1dHRvbihjYW5jZWxCdXR0b24sICdjYW5jZWwnLCBwYXJhbXMpO1xuICAgIGhhbmRsZUJ1dHRvbnNTdHlsaW5nKGNvbmZpcm1CdXR0b24sIGRlbnlCdXR0b24sIGNhbmNlbEJ1dHRvbiwgcGFyYW1zKTtcbiAgICBpZiAocGFyYW1zLnJldmVyc2VCdXR0b25zKSB7XG4gICAgICBpZiAocGFyYW1zLnRvYXN0KSB7XG4gICAgICAgIGFjdGlvbnMuaW5zZXJ0QmVmb3JlKGNhbmNlbEJ1dHRvbiwgY29uZmlybUJ1dHRvbik7XG4gICAgICAgIGFjdGlvbnMuaW5zZXJ0QmVmb3JlKGRlbnlCdXR0b24sIGNvbmZpcm1CdXR0b24pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYWN0aW9ucy5pbnNlcnRCZWZvcmUoY2FuY2VsQnV0dG9uLCBsb2FkZXIpO1xuICAgICAgICBhY3Rpb25zLmluc2VydEJlZm9yZShkZW55QnV0dG9uLCBsb2FkZXIpO1xuICAgICAgICBhY3Rpb25zLmluc2VydEJlZm9yZShjb25maXJtQnV0dG9uLCBsb2FkZXIpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBjb25maXJtQnV0dG9uXG4gICAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IGRlbnlCdXR0b25cbiAgICogQHBhcmFtIHtIVE1MRWxlbWVudH0gY2FuY2VsQnV0dG9uXG4gICAqIEBwYXJhbSB7U3dlZXRBbGVydE9wdGlvbnN9IHBhcmFtc1xuICAgKi9cbiAgZnVuY3Rpb24gaGFuZGxlQnV0dG9uc1N0eWxpbmcoY29uZmlybUJ1dHRvbiwgZGVueUJ1dHRvbiwgY2FuY2VsQnV0dG9uLCBwYXJhbXMpIHtcbiAgICBpZiAoIXBhcmFtcy5idXR0b25zU3R5bGluZykge1xuICAgICAgcmVtb3ZlQ2xhc3MoW2NvbmZpcm1CdXR0b24sIGRlbnlCdXR0b24sIGNhbmNlbEJ1dHRvbl0sIHN3YWxDbGFzc2VzLnN0eWxlZCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGFkZENsYXNzKFtjb25maXJtQnV0dG9uLCBkZW55QnV0dG9uLCBjYW5jZWxCdXR0b25dLCBzd2FsQ2xhc3Nlcy5zdHlsZWQpO1xuXG4gICAgLy8gQnV0dG9ucyBiYWNrZ3JvdW5kIGNvbG9yc1xuICAgIGlmIChwYXJhbXMuY29uZmlybUJ1dHRvbkNvbG9yKSB7XG4gICAgICBjb25maXJtQnV0dG9uLnN0eWxlLmJhY2tncm91bmRDb2xvciA9IHBhcmFtcy5jb25maXJtQnV0dG9uQ29sb3I7XG4gICAgICBhZGRDbGFzcyhjb25maXJtQnV0dG9uLCBzd2FsQ2xhc3Nlc1snZGVmYXVsdC1vdXRsaW5lJ10pO1xuICAgIH1cbiAgICBpZiAocGFyYW1zLmRlbnlCdXR0b25Db2xvcikge1xuICAgICAgZGVueUJ1dHRvbi5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSBwYXJhbXMuZGVueUJ1dHRvbkNvbG9yO1xuICAgICAgYWRkQ2xhc3MoZGVueUJ1dHRvbiwgc3dhbENsYXNzZXNbJ2RlZmF1bHQtb3V0bGluZSddKTtcbiAgICB9XG4gICAgaWYgKHBhcmFtcy5jYW5jZWxCdXR0b25Db2xvcikge1xuICAgICAgY2FuY2VsQnV0dG9uLnN0eWxlLmJhY2tncm91bmRDb2xvciA9IHBhcmFtcy5jYW5jZWxCdXR0b25Db2xvcjtcbiAgICAgIGFkZENsYXNzKGNhbmNlbEJ1dHRvbiwgc3dhbENsYXNzZXNbJ2RlZmF1bHQtb3V0bGluZSddKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtIVE1MRWxlbWVudH0gYnV0dG9uXG4gICAqIEBwYXJhbSB7J2NvbmZpcm0nIHwgJ2RlbnknIHwgJ2NhbmNlbCd9IGJ1dHRvblR5cGVcbiAgICogQHBhcmFtIHtTd2VldEFsZXJ0T3B0aW9uc30gcGFyYW1zXG4gICAqL1xuICBmdW5jdGlvbiByZW5kZXJCdXR0b24oYnV0dG9uLCBidXR0b25UeXBlLCBwYXJhbXMpIHtcbiAgICB0b2dnbGUoYnV0dG9uLCBwYXJhbXNbYHNob3cke2NhcGl0YWxpemVGaXJzdExldHRlcihidXR0b25UeXBlKX1CdXR0b25gXSwgJ2lubGluZS1ibG9jaycpO1xuICAgIHNldElubmVySHRtbChidXR0b24sIHBhcmFtc1tgJHtidXR0b25UeXBlfUJ1dHRvblRleHRgXSk7IC8vIFNldCBjYXB0aW9uIHRleHRcbiAgICBidXR0b24uc2V0QXR0cmlidXRlKCdhcmlhLWxhYmVsJywgcGFyYW1zW2Ake2J1dHRvblR5cGV9QnV0dG9uQXJpYUxhYmVsYF0pOyAvLyBBUklBIGxhYmVsXG5cbiAgICAvLyBBZGQgYnV0dG9ucyBjdXN0b20gY2xhc3Nlc1xuICAgIGJ1dHRvbi5jbGFzc05hbWUgPSBzd2FsQ2xhc3Nlc1tidXR0b25UeXBlXTtcbiAgICBhcHBseUN1c3RvbUNsYXNzKGJ1dHRvbiwgcGFyYW1zLCBgJHtidXR0b25UeXBlfUJ1dHRvbmApO1xuICAgIGFkZENsYXNzKGJ1dHRvbiwgcGFyYW1zW2Ake2J1dHRvblR5cGV9QnV0dG9uQ2xhc3NgXSk7XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtTd2VldEFsZXJ0Mn0gaW5zdGFuY2VcbiAgICogQHBhcmFtIHtTd2VldEFsZXJ0T3B0aW9uc30gcGFyYW1zXG4gICAqL1xuICBjb25zdCByZW5kZXJDbG9zZUJ1dHRvbiA9IChpbnN0YW5jZSwgcGFyYW1zKSA9PiB7XG4gICAgY29uc3QgY2xvc2VCdXR0b24gPSBnZXRDbG9zZUJ1dHRvbigpO1xuICAgIHNldElubmVySHRtbChjbG9zZUJ1dHRvbiwgcGFyYW1zLmNsb3NlQnV0dG9uSHRtbCk7XG5cbiAgICAvLyBDdXN0b20gY2xhc3NcbiAgICBhcHBseUN1c3RvbUNsYXNzKGNsb3NlQnV0dG9uLCBwYXJhbXMsICdjbG9zZUJ1dHRvbicpO1xuICAgIHRvZ2dsZShjbG9zZUJ1dHRvbiwgcGFyYW1zLnNob3dDbG9zZUJ1dHRvbik7XG4gICAgY2xvc2VCdXR0b24uc2V0QXR0cmlidXRlKCdhcmlhLWxhYmVsJywgcGFyYW1zLmNsb3NlQnV0dG9uQXJpYUxhYmVsKTtcbiAgfTtcblxuICAvKipcbiAgICogQHBhcmFtIHtTd2VldEFsZXJ0Mn0gaW5zdGFuY2VcbiAgICogQHBhcmFtIHtTd2VldEFsZXJ0T3B0aW9uc30gcGFyYW1zXG4gICAqL1xuICBjb25zdCByZW5kZXJDb250YWluZXIgPSAoaW5zdGFuY2UsIHBhcmFtcykgPT4ge1xuICAgIGNvbnN0IGNvbnRhaW5lciA9IGdldENvbnRhaW5lcigpO1xuICAgIGlmICghY29udGFpbmVyKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGhhbmRsZUJhY2tkcm9wUGFyYW0oY29udGFpbmVyLCBwYXJhbXMuYmFja2Ryb3ApO1xuICAgIGhhbmRsZVBvc2l0aW9uUGFyYW0oY29udGFpbmVyLCBwYXJhbXMucG9zaXRpb24pO1xuICAgIGhhbmRsZUdyb3dQYXJhbShjb250YWluZXIsIHBhcmFtcy5ncm93KTtcblxuICAgIC8vIEN1c3RvbSBjbGFzc1xuICAgIGFwcGx5Q3VzdG9tQ2xhc3MoY29udGFpbmVyLCBwYXJhbXMsICdjb250YWluZXInKTtcbiAgfTtcblxuICAvKipcbiAgICogQHBhcmFtIHtIVE1MRWxlbWVudH0gY29udGFpbmVyXG4gICAqIEBwYXJhbSB7U3dlZXRBbGVydE9wdGlvbnNbJ2JhY2tkcm9wJ119IGJhY2tkcm9wXG4gICAqL1xuICBmdW5jdGlvbiBoYW5kbGVCYWNrZHJvcFBhcmFtKGNvbnRhaW5lciwgYmFja2Ryb3ApIHtcbiAgICBpZiAodHlwZW9mIGJhY2tkcm9wID09PSAnc3RyaW5nJykge1xuICAgICAgY29udGFpbmVyLnN0eWxlLmJhY2tncm91bmQgPSBiYWNrZHJvcDtcbiAgICB9IGVsc2UgaWYgKCFiYWNrZHJvcCkge1xuICAgICAgYWRkQ2xhc3MoW2RvY3VtZW50LmRvY3VtZW50RWxlbWVudCwgZG9jdW1lbnQuYm9keV0sIHN3YWxDbGFzc2VzWyduby1iYWNrZHJvcCddKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtIVE1MRWxlbWVudH0gY29udGFpbmVyXG4gICAqIEBwYXJhbSB7U3dlZXRBbGVydE9wdGlvbnNbJ3Bvc2l0aW9uJ119IHBvc2l0aW9uXG4gICAqL1xuICBmdW5jdGlvbiBoYW5kbGVQb3NpdGlvblBhcmFtKGNvbnRhaW5lciwgcG9zaXRpb24pIHtcbiAgICBpZiAocG9zaXRpb24gaW4gc3dhbENsYXNzZXMpIHtcbiAgICAgIGFkZENsYXNzKGNvbnRhaW5lciwgc3dhbENsYXNzZXNbcG9zaXRpb25dKTtcbiAgICB9IGVsc2Uge1xuICAgICAgd2FybignVGhlIFwicG9zaXRpb25cIiBwYXJhbWV0ZXIgaXMgbm90IHZhbGlkLCBkZWZhdWx0aW5nIHRvIFwiY2VudGVyXCInKTtcbiAgICAgIGFkZENsYXNzKGNvbnRhaW5lciwgc3dhbENsYXNzZXMuY2VudGVyKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtIVE1MRWxlbWVudH0gY29udGFpbmVyXG4gICAqIEBwYXJhbSB7U3dlZXRBbGVydE9wdGlvbnNbJ2dyb3cnXX0gZ3Jvd1xuICAgKi9cbiAgZnVuY3Rpb24gaGFuZGxlR3Jvd1BhcmFtKGNvbnRhaW5lciwgZ3Jvdykge1xuICAgIGlmIChncm93ICYmIHR5cGVvZiBncm93ID09PSAnc3RyaW5nJykge1xuICAgICAgY29uc3QgZ3Jvd0NsYXNzID0gYGdyb3ctJHtncm93fWA7XG4gICAgICBpZiAoZ3Jvd0NsYXNzIGluIHN3YWxDbGFzc2VzKSB7XG4gICAgICAgIGFkZENsYXNzKGNvbnRhaW5lciwgc3dhbENsYXNzZXNbZ3Jvd0NsYXNzXSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4uLy4uLy4uLy4uL3N3ZWV0YWxlcnQyLmQudHNcIi8+XG5cbiAgLyoqIEB0eXBlIHtJbnB1dENsYXNzW119ICovXG4gIGNvbnN0IGlucHV0Q2xhc3NlcyA9IFsnaW5wdXQnLCAnZmlsZScsICdyYW5nZScsICdzZWxlY3QnLCAncmFkaW8nLCAnY2hlY2tib3gnLCAndGV4dGFyZWEnXTtcblxuICAvKipcbiAgICogQHBhcmFtIHtTd2VldEFsZXJ0Mn0gaW5zdGFuY2VcbiAgICogQHBhcmFtIHtTd2VldEFsZXJ0T3B0aW9uc30gcGFyYW1zXG4gICAqL1xuICBjb25zdCByZW5kZXJJbnB1dCA9IChpbnN0YW5jZSwgcGFyYW1zKSA9PiB7XG4gICAgY29uc3QgcG9wdXAgPSBnZXRQb3B1cCgpO1xuICAgIGNvbnN0IGlubmVyUGFyYW1zID0gcHJpdmF0ZVByb3BzLmlubmVyUGFyYW1zLmdldChpbnN0YW5jZSk7XG4gICAgY29uc3QgcmVyZW5kZXIgPSAhaW5uZXJQYXJhbXMgfHwgcGFyYW1zLmlucHV0ICE9PSBpbm5lclBhcmFtcy5pbnB1dDtcbiAgICBpbnB1dENsYXNzZXMuZm9yRWFjaChpbnB1dENsYXNzID0+IHtcbiAgICAgIGNvbnN0IGlucHV0Q29udGFpbmVyID0gZ2V0RGlyZWN0Q2hpbGRCeUNsYXNzKHBvcHVwLCBzd2FsQ2xhc3Nlc1tpbnB1dENsYXNzXSk7XG5cbiAgICAgIC8vIHNldCBhdHRyaWJ1dGVzXG4gICAgICBzZXRBdHRyaWJ1dGVzKGlucHV0Q2xhc3MsIHBhcmFtcy5pbnB1dEF0dHJpYnV0ZXMpO1xuXG4gICAgICAvLyBzZXQgY2xhc3NcbiAgICAgIGlucHV0Q29udGFpbmVyLmNsYXNzTmFtZSA9IHN3YWxDbGFzc2VzW2lucHV0Q2xhc3NdO1xuICAgICAgaWYgKHJlcmVuZGVyKSB7XG4gICAgICAgIGhpZGUoaW5wdXRDb250YWluZXIpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIGlmIChwYXJhbXMuaW5wdXQpIHtcbiAgICAgIGlmIChyZXJlbmRlcikge1xuICAgICAgICBzaG93SW5wdXQocGFyYW1zKTtcbiAgICAgIH1cbiAgICAgIC8vIHNldCBjdXN0b20gY2xhc3NcbiAgICAgIHNldEN1c3RvbUNsYXNzKHBhcmFtcyk7XG4gICAgfVxuICB9O1xuXG4gIC8qKlxuICAgKiBAcGFyYW0ge1N3ZWV0QWxlcnRPcHRpb25zfSBwYXJhbXNcbiAgICovXG4gIGNvbnN0IHNob3dJbnB1dCA9IHBhcmFtcyA9PiB7XG4gICAgaWYgKCFyZW5kZXJJbnB1dFR5cGVbcGFyYW1zLmlucHV0XSkge1xuICAgICAgZXJyb3IoYFVuZXhwZWN0ZWQgdHlwZSBvZiBpbnB1dCEgRXhwZWN0ZWQgXCJ0ZXh0XCIsIFwiZW1haWxcIiwgXCJwYXNzd29yZFwiLCBcIm51bWJlclwiLCBcInRlbFwiLCBcInNlbGVjdFwiLCBcInJhZGlvXCIsIFwiY2hlY2tib3hcIiwgXCJ0ZXh0YXJlYVwiLCBcImZpbGVcIiBvciBcInVybFwiLCBnb3QgXCIke3BhcmFtcy5pbnB1dH1cImApO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCBpbnB1dENvbnRhaW5lciA9IGdldElucHV0Q29udGFpbmVyKHBhcmFtcy5pbnB1dCk7XG4gICAgY29uc3QgaW5wdXQgPSByZW5kZXJJbnB1dFR5cGVbcGFyYW1zLmlucHV0XShpbnB1dENvbnRhaW5lciwgcGFyYW1zKTtcbiAgICBzaG93KGlucHV0Q29udGFpbmVyKTtcblxuICAgIC8vIGlucHV0IGF1dG9mb2N1c1xuICAgIGlmIChwYXJhbXMuaW5wdXRBdXRvRm9jdXMpIHtcbiAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICBmb2N1c0lucHV0KGlucHV0KTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcblxuICAvKipcbiAgICogQHBhcmFtIHtIVE1MSW5wdXRFbGVtZW50fSBpbnB1dFxuICAgKi9cbiAgY29uc3QgcmVtb3ZlQXR0cmlidXRlcyA9IGlucHV0ID0+IHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGlucHV0LmF0dHJpYnV0ZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGNvbnN0IGF0dHJOYW1lID0gaW5wdXQuYXR0cmlidXRlc1tpXS5uYW1lO1xuICAgICAgaWYgKCFbJ3R5cGUnLCAndmFsdWUnLCAnc3R5bGUnXS5pbmNsdWRlcyhhdHRyTmFtZSkpIHtcbiAgICAgICAgaW5wdXQucmVtb3ZlQXR0cmlidXRlKGF0dHJOYW1lKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7SW5wdXRDbGFzc30gaW5wdXRDbGFzc1xuICAgKiBAcGFyYW0ge1N3ZWV0QWxlcnRPcHRpb25zWydpbnB1dEF0dHJpYnV0ZXMnXX0gaW5wdXRBdHRyaWJ1dGVzXG4gICAqL1xuICBjb25zdCBzZXRBdHRyaWJ1dGVzID0gKGlucHV0Q2xhc3MsIGlucHV0QXR0cmlidXRlcykgPT4ge1xuICAgIGNvbnN0IGlucHV0ID0gZ2V0SW5wdXQkMShnZXRQb3B1cCgpLCBpbnB1dENsYXNzKTtcbiAgICBpZiAoIWlucHV0KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHJlbW92ZUF0dHJpYnV0ZXMoaW5wdXQpO1xuICAgIGZvciAoY29uc3QgYXR0ciBpbiBpbnB1dEF0dHJpYnV0ZXMpIHtcbiAgICAgIGlucHV0LnNldEF0dHJpYnV0ZShhdHRyLCBpbnB1dEF0dHJpYnV0ZXNbYXR0cl0pO1xuICAgIH1cbiAgfTtcblxuICAvKipcbiAgICogQHBhcmFtIHtTd2VldEFsZXJ0T3B0aW9uc30gcGFyYW1zXG4gICAqL1xuICBjb25zdCBzZXRDdXN0b21DbGFzcyA9IHBhcmFtcyA9PiB7XG4gICAgY29uc3QgaW5wdXRDb250YWluZXIgPSBnZXRJbnB1dENvbnRhaW5lcihwYXJhbXMuaW5wdXQpO1xuICAgIGlmICh0eXBlb2YgcGFyYW1zLmN1c3RvbUNsYXNzID09PSAnb2JqZWN0Jykge1xuICAgICAgYWRkQ2xhc3MoaW5wdXRDb250YWluZXIsIHBhcmFtcy5jdXN0b21DbGFzcy5pbnB1dCk7XG4gICAgfVxuICB9O1xuXG4gIC8qKlxuICAgKiBAcGFyYW0ge0hUTUxJbnB1dEVsZW1lbnQgfCBIVE1MVGV4dEFyZWFFbGVtZW50fSBpbnB1dFxuICAgKiBAcGFyYW0ge1N3ZWV0QWxlcnRPcHRpb25zfSBwYXJhbXNcbiAgICovXG4gIGNvbnN0IHNldElucHV0UGxhY2Vob2xkZXIgPSAoaW5wdXQsIHBhcmFtcykgPT4ge1xuICAgIGlmICghaW5wdXQucGxhY2Vob2xkZXIgfHwgcGFyYW1zLmlucHV0UGxhY2Vob2xkZXIpIHtcbiAgICAgIGlucHV0LnBsYWNlaG9sZGVyID0gcGFyYW1zLmlucHV0UGxhY2Vob2xkZXI7XG4gICAgfVxuICB9O1xuXG4gIC8qKlxuICAgKiBAcGFyYW0ge0lucHV0fSBpbnB1dFxuICAgKiBAcGFyYW0ge0lucHV0fSBwcmVwZW5kVG9cbiAgICogQHBhcmFtIHtTd2VldEFsZXJ0T3B0aW9uc30gcGFyYW1zXG4gICAqL1xuICBjb25zdCBzZXRJbnB1dExhYmVsID0gKGlucHV0LCBwcmVwZW5kVG8sIHBhcmFtcykgPT4ge1xuICAgIGlmIChwYXJhbXMuaW5wdXRMYWJlbCkge1xuICAgICAgaW5wdXQuaWQgPSBzd2FsQ2xhc3Nlcy5pbnB1dDtcbiAgICAgIGNvbnN0IGxhYmVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnbGFiZWwnKTtcbiAgICAgIGNvbnN0IGxhYmVsQ2xhc3MgPSBzd2FsQ2xhc3Nlc1snaW5wdXQtbGFiZWwnXTtcbiAgICAgIGxhYmVsLnNldEF0dHJpYnV0ZSgnZm9yJywgaW5wdXQuaWQpO1xuICAgICAgbGFiZWwuY2xhc3NOYW1lID0gbGFiZWxDbGFzcztcbiAgICAgIGlmICh0eXBlb2YgcGFyYW1zLmN1c3RvbUNsYXNzID09PSAnb2JqZWN0Jykge1xuICAgICAgICBhZGRDbGFzcyhsYWJlbCwgcGFyYW1zLmN1c3RvbUNsYXNzLmlucHV0TGFiZWwpO1xuICAgICAgfVxuICAgICAgbGFiZWwuaW5uZXJUZXh0ID0gcGFyYW1zLmlucHV0TGFiZWw7XG4gICAgICBwcmVwZW5kVG8uaW5zZXJ0QWRqYWNlbnRFbGVtZW50KCdiZWZvcmViZWdpbicsIGxhYmVsKTtcbiAgICB9XG4gIH07XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7U3dlZXRBbGVydE9wdGlvbnNbJ2lucHV0J119IGlucHV0VHlwZVxuICAgKiBAcmV0dXJucyB7SFRNTEVsZW1lbnR9XG4gICAqL1xuICBjb25zdCBnZXRJbnB1dENvbnRhaW5lciA9IGlucHV0VHlwZSA9PiB7XG4gICAgcmV0dXJuIGdldERpcmVjdENoaWxkQnlDbGFzcyhnZXRQb3B1cCgpLCBzd2FsQ2xhc3Nlc1tpbnB1dFR5cGVdIHx8IHN3YWxDbGFzc2VzLmlucHV0KTtcbiAgfTtcblxuICAvKipcbiAgICogQHBhcmFtIHtIVE1MSW5wdXRFbGVtZW50IHwgSFRNTE91dHB1dEVsZW1lbnQgfCBIVE1MVGV4dEFyZWFFbGVtZW50fSBpbnB1dFxuICAgKiBAcGFyYW0ge1N3ZWV0QWxlcnRPcHRpb25zWydpbnB1dFZhbHVlJ119IGlucHV0VmFsdWVcbiAgICovXG4gIGNvbnN0IGNoZWNrQW5kU2V0SW5wdXRWYWx1ZSA9IChpbnB1dCwgaW5wdXRWYWx1ZSkgPT4ge1xuICAgIGlmIChbJ3N0cmluZycsICdudW1iZXInXS5pbmNsdWRlcyh0eXBlb2YgaW5wdXRWYWx1ZSkpIHtcbiAgICAgIGlucHV0LnZhbHVlID0gYCR7aW5wdXRWYWx1ZX1gO1xuICAgIH0gZWxzZSBpZiAoIWlzUHJvbWlzZShpbnB1dFZhbHVlKSkge1xuICAgICAgd2FybihgVW5leHBlY3RlZCB0eXBlIG9mIGlucHV0VmFsdWUhIEV4cGVjdGVkIFwic3RyaW5nXCIsIFwibnVtYmVyXCIgb3IgXCJQcm9taXNlXCIsIGdvdCBcIiR7dHlwZW9mIGlucHV0VmFsdWV9XCJgKTtcbiAgICB9XG4gIH07XG5cbiAgLyoqIEB0eXBlIHtSZWNvcmQ8c3RyaW5nLCAoaW5wdXQ6IElucHV0IHwgSFRNTEVsZW1lbnQsIHBhcmFtczogU3dlZXRBbGVydE9wdGlvbnMpID0+IElucHV0Pn0gKi9cbiAgY29uc3QgcmVuZGVySW5wdXRUeXBlID0ge307XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7SFRNTElucHV0RWxlbWVudH0gaW5wdXRcbiAgICogQHBhcmFtIHtTd2VldEFsZXJ0T3B0aW9uc30gcGFyYW1zXG4gICAqIEByZXR1cm5zIHtIVE1MSW5wdXRFbGVtZW50fVxuICAgKi9cbiAgcmVuZGVySW5wdXRUeXBlLnRleHQgPSByZW5kZXJJbnB1dFR5cGUuZW1haWwgPSByZW5kZXJJbnB1dFR5cGUucGFzc3dvcmQgPSByZW5kZXJJbnB1dFR5cGUubnVtYmVyID0gcmVuZGVySW5wdXRUeXBlLnRlbCA9IHJlbmRlcklucHV0VHlwZS51cmwgPSAoaW5wdXQsIHBhcmFtcykgPT4ge1xuICAgIGNoZWNrQW5kU2V0SW5wdXRWYWx1ZShpbnB1dCwgcGFyYW1zLmlucHV0VmFsdWUpO1xuICAgIHNldElucHV0TGFiZWwoaW5wdXQsIGlucHV0LCBwYXJhbXMpO1xuICAgIHNldElucHV0UGxhY2Vob2xkZXIoaW5wdXQsIHBhcmFtcyk7XG4gICAgaW5wdXQudHlwZSA9IHBhcmFtcy5pbnB1dDtcbiAgICByZXR1cm4gaW5wdXQ7XG4gIH07XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7SFRNTElucHV0RWxlbWVudH0gaW5wdXRcbiAgICogQHBhcmFtIHtTd2VldEFsZXJ0T3B0aW9uc30gcGFyYW1zXG4gICAqIEByZXR1cm5zIHtIVE1MSW5wdXRFbGVtZW50fVxuICAgKi9cbiAgcmVuZGVySW5wdXRUeXBlLmZpbGUgPSAoaW5wdXQsIHBhcmFtcykgPT4ge1xuICAgIHNldElucHV0TGFiZWwoaW5wdXQsIGlucHV0LCBwYXJhbXMpO1xuICAgIHNldElucHV0UGxhY2Vob2xkZXIoaW5wdXQsIHBhcmFtcyk7XG4gICAgcmV0dXJuIGlucHV0O1xuICB9O1xuXG4gIC8qKlxuICAgKiBAcGFyYW0ge0hUTUxJbnB1dEVsZW1lbnR9IHJhbmdlXG4gICAqIEBwYXJhbSB7U3dlZXRBbGVydE9wdGlvbnN9IHBhcmFtc1xuICAgKiBAcmV0dXJucyB7SFRNTElucHV0RWxlbWVudH1cbiAgICovXG4gIHJlbmRlcklucHV0VHlwZS5yYW5nZSA9IChyYW5nZSwgcGFyYW1zKSA9PiB7XG4gICAgY29uc3QgcmFuZ2VJbnB1dCA9IHJhbmdlLnF1ZXJ5U2VsZWN0b3IoJ2lucHV0Jyk7XG4gICAgY29uc3QgcmFuZ2VPdXRwdXQgPSByYW5nZS5xdWVyeVNlbGVjdG9yKCdvdXRwdXQnKTtcbiAgICBjaGVja0FuZFNldElucHV0VmFsdWUocmFuZ2VJbnB1dCwgcGFyYW1zLmlucHV0VmFsdWUpO1xuICAgIHJhbmdlSW5wdXQudHlwZSA9IHBhcmFtcy5pbnB1dDtcbiAgICBjaGVja0FuZFNldElucHV0VmFsdWUocmFuZ2VPdXRwdXQsIHBhcmFtcy5pbnB1dFZhbHVlKTtcbiAgICBzZXRJbnB1dExhYmVsKHJhbmdlSW5wdXQsIHJhbmdlLCBwYXJhbXMpO1xuICAgIHJldHVybiByYW5nZTtcbiAgfTtcblxuICAvKipcbiAgICogQHBhcmFtIHtIVE1MU2VsZWN0RWxlbWVudH0gc2VsZWN0XG4gICAqIEBwYXJhbSB7U3dlZXRBbGVydE9wdGlvbnN9IHBhcmFtc1xuICAgKiBAcmV0dXJucyB7SFRNTFNlbGVjdEVsZW1lbnR9XG4gICAqL1xuICByZW5kZXJJbnB1dFR5cGUuc2VsZWN0ID0gKHNlbGVjdCwgcGFyYW1zKSA9PiB7XG4gICAgc2VsZWN0LnRleHRDb250ZW50ID0gJyc7XG4gICAgaWYgKHBhcmFtcy5pbnB1dFBsYWNlaG9sZGVyKSB7XG4gICAgICBjb25zdCBwbGFjZWhvbGRlciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ29wdGlvbicpO1xuICAgICAgc2V0SW5uZXJIdG1sKHBsYWNlaG9sZGVyLCBwYXJhbXMuaW5wdXRQbGFjZWhvbGRlcik7XG4gICAgICBwbGFjZWhvbGRlci52YWx1ZSA9ICcnO1xuICAgICAgcGxhY2Vob2xkZXIuZGlzYWJsZWQgPSB0cnVlO1xuICAgICAgcGxhY2Vob2xkZXIuc2VsZWN0ZWQgPSB0cnVlO1xuICAgICAgc2VsZWN0LmFwcGVuZENoaWxkKHBsYWNlaG9sZGVyKTtcbiAgICB9XG4gICAgc2V0SW5wdXRMYWJlbChzZWxlY3QsIHNlbGVjdCwgcGFyYW1zKTtcbiAgICByZXR1cm4gc2VsZWN0O1xuICB9O1xuXG4gIC8qKlxuICAgKiBAcGFyYW0ge0hUTUxJbnB1dEVsZW1lbnR9IHJhZGlvXG4gICAqIEByZXR1cm5zIHtIVE1MSW5wdXRFbGVtZW50fVxuICAgKi9cbiAgcmVuZGVySW5wdXRUeXBlLnJhZGlvID0gcmFkaW8gPT4ge1xuICAgIHJhZGlvLnRleHRDb250ZW50ID0gJyc7XG4gICAgcmV0dXJuIHJhZGlvO1xuICB9O1xuXG4gIC8qKlxuICAgKiBAcGFyYW0ge0hUTUxMYWJlbEVsZW1lbnR9IGNoZWNrYm94Q29udGFpbmVyXG4gICAqIEBwYXJhbSB7U3dlZXRBbGVydE9wdGlvbnN9IHBhcmFtc1xuICAgKiBAcmV0dXJucyB7SFRNTElucHV0RWxlbWVudH1cbiAgICovXG4gIHJlbmRlcklucHV0VHlwZS5jaGVja2JveCA9IChjaGVja2JveENvbnRhaW5lciwgcGFyYW1zKSA9PiB7XG4gICAgY29uc3QgY2hlY2tib3ggPSBnZXRJbnB1dCQxKGdldFBvcHVwKCksICdjaGVja2JveCcpO1xuICAgIGNoZWNrYm94LnZhbHVlID0gJzEnO1xuICAgIGNoZWNrYm94LmlkID0gc3dhbENsYXNzZXMuY2hlY2tib3g7XG4gICAgY2hlY2tib3guY2hlY2tlZCA9IEJvb2xlYW4ocGFyYW1zLmlucHV0VmFsdWUpO1xuICAgIGNvbnN0IGxhYmVsID0gY2hlY2tib3hDb250YWluZXIucXVlcnlTZWxlY3Rvcignc3BhbicpO1xuICAgIHNldElubmVySHRtbChsYWJlbCwgcGFyYW1zLmlucHV0UGxhY2Vob2xkZXIpO1xuICAgIHJldHVybiBjaGVja2JveDtcbiAgfTtcblxuICAvKipcbiAgICogQHBhcmFtIHtIVE1MVGV4dEFyZWFFbGVtZW50fSB0ZXh0YXJlYVxuICAgKiBAcGFyYW0ge1N3ZWV0QWxlcnRPcHRpb25zfSBwYXJhbXNcbiAgICogQHJldHVybnMge0hUTUxUZXh0QXJlYUVsZW1lbnR9XG4gICAqL1xuICByZW5kZXJJbnB1dFR5cGUudGV4dGFyZWEgPSAodGV4dGFyZWEsIHBhcmFtcykgPT4ge1xuICAgIGNoZWNrQW5kU2V0SW5wdXRWYWx1ZSh0ZXh0YXJlYSwgcGFyYW1zLmlucHV0VmFsdWUpO1xuICAgIHNldElucHV0UGxhY2Vob2xkZXIodGV4dGFyZWEsIHBhcmFtcyk7XG4gICAgc2V0SW5wdXRMYWJlbCh0ZXh0YXJlYSwgdGV4dGFyZWEsIHBhcmFtcyk7XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBlbFxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9XG4gICAgICovXG4gICAgY29uc3QgZ2V0TWFyZ2luID0gZWwgPT4gcGFyc2VJbnQod2luZG93LmdldENvbXB1dGVkU3R5bGUoZWwpLm1hcmdpbkxlZnQpICsgcGFyc2VJbnQod2luZG93LmdldENvbXB1dGVkU3R5bGUoZWwpLm1hcmdpblJpZ2h0KTtcblxuICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9zd2VldGFsZXJ0Mi9zd2VldGFsZXJ0Mi9pc3N1ZXMvMjI5MVxuICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL3N3ZWV0YWxlcnQyL3N3ZWV0YWxlcnQyL2lzc3Vlcy8xNjk5XG4gICAgICBpZiAoJ011dGF0aW9uT2JzZXJ2ZXInIGluIHdpbmRvdykge1xuICAgICAgICBjb25zdCBpbml0aWFsUG9wdXBXaWR0aCA9IHBhcnNlSW50KHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKGdldFBvcHVwKCkpLndpZHRoKTtcbiAgICAgICAgY29uc3QgdGV4dGFyZWFSZXNpemVIYW5kbGVyID0gKCkgPT4ge1xuICAgICAgICAgIGNvbnN0IHRleHRhcmVhV2lkdGggPSB0ZXh0YXJlYS5vZmZzZXRXaWR0aCArIGdldE1hcmdpbih0ZXh0YXJlYSk7XG4gICAgICAgICAgaWYgKHRleHRhcmVhV2lkdGggPiBpbml0aWFsUG9wdXBXaWR0aCkge1xuICAgICAgICAgICAgZ2V0UG9wdXAoKS5zdHlsZS53aWR0aCA9IGAke3RleHRhcmVhV2lkdGh9cHhgO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBnZXRQb3B1cCgpLnN0eWxlLndpZHRoID0gbnVsbDtcbiAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIG5ldyBNdXRhdGlvbk9ic2VydmVyKHRleHRhcmVhUmVzaXplSGFuZGxlcikub2JzZXJ2ZSh0ZXh0YXJlYSwge1xuICAgICAgICAgIGF0dHJpYnV0ZXM6IHRydWUsXG4gICAgICAgICAgYXR0cmlidXRlRmlsdGVyOiBbJ3N0eWxlJ11cbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIHRleHRhcmVhO1xuICB9O1xuXG4gIC8qKlxuICAgKiBAcGFyYW0ge1N3ZWV0QWxlcnQyfSBpbnN0YW5jZVxuICAgKiBAcGFyYW0ge1N3ZWV0QWxlcnRPcHRpb25zfSBwYXJhbXNcbiAgICovXG4gIGNvbnN0IHJlbmRlckNvbnRlbnQgPSAoaW5zdGFuY2UsIHBhcmFtcykgPT4ge1xuICAgIGNvbnN0IGh0bWxDb250YWluZXIgPSBnZXRIdG1sQ29udGFpbmVyKCk7XG4gICAgYXBwbHlDdXN0b21DbGFzcyhodG1sQ29udGFpbmVyLCBwYXJhbXMsICdodG1sQ29udGFpbmVyJyk7XG5cbiAgICAvLyBDb250ZW50IGFzIEhUTUxcbiAgICBpZiAocGFyYW1zLmh0bWwpIHtcbiAgICAgIHBhcnNlSHRtbFRvQ29udGFpbmVyKHBhcmFtcy5odG1sLCBodG1sQ29udGFpbmVyKTtcbiAgICAgIHNob3coaHRtbENvbnRhaW5lciwgJ2Jsb2NrJyk7XG4gICAgfVxuXG4gICAgLy8gQ29udGVudCBhcyBwbGFpbiB0ZXh0XG4gICAgZWxzZSBpZiAocGFyYW1zLnRleHQpIHtcbiAgICAgIGh0bWxDb250YWluZXIudGV4dENvbnRlbnQgPSBwYXJhbXMudGV4dDtcbiAgICAgIHNob3coaHRtbENvbnRhaW5lciwgJ2Jsb2NrJyk7XG4gICAgfVxuXG4gICAgLy8gTm8gY29udGVudFxuICAgIGVsc2Uge1xuICAgICAgaGlkZShodG1sQ29udGFpbmVyKTtcbiAgICB9XG4gICAgcmVuZGVySW5wdXQoaW5zdGFuY2UsIHBhcmFtcyk7XG4gIH07XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7U3dlZXRBbGVydDJ9IGluc3RhbmNlXG4gICAqIEBwYXJhbSB7U3dlZXRBbGVydE9wdGlvbnN9IHBhcmFtc1xuICAgKi9cbiAgY29uc3QgcmVuZGVyRm9vdGVyID0gKGluc3RhbmNlLCBwYXJhbXMpID0+IHtcbiAgICBjb25zdCBmb290ZXIgPSBnZXRGb290ZXIoKTtcbiAgICB0b2dnbGUoZm9vdGVyLCBwYXJhbXMuZm9vdGVyKTtcbiAgICBpZiAocGFyYW1zLmZvb3Rlcikge1xuICAgICAgcGFyc2VIdG1sVG9Db250YWluZXIocGFyYW1zLmZvb3RlciwgZm9vdGVyKTtcbiAgICB9XG5cbiAgICAvLyBDdXN0b20gY2xhc3NcbiAgICBhcHBseUN1c3RvbUNsYXNzKGZvb3RlciwgcGFyYW1zLCAnZm9vdGVyJyk7XG4gIH07XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7U3dlZXRBbGVydDJ9IGluc3RhbmNlXG4gICAqIEBwYXJhbSB7U3dlZXRBbGVydE9wdGlvbnN9IHBhcmFtc1xuICAgKi9cbiAgY29uc3QgcmVuZGVySWNvbiA9IChpbnN0YW5jZSwgcGFyYW1zKSA9PiB7XG4gICAgY29uc3QgaW5uZXJQYXJhbXMgPSBwcml2YXRlUHJvcHMuaW5uZXJQYXJhbXMuZ2V0KGluc3RhbmNlKTtcbiAgICBjb25zdCBpY29uID0gZ2V0SWNvbigpO1xuXG4gICAgLy8gaWYgdGhlIGdpdmVuIGljb24gYWxyZWFkeSByZW5kZXJlZCwgYXBwbHkgdGhlIHN0eWxpbmcgd2l0aG91dCByZS1yZW5kZXJpbmcgdGhlIGljb25cbiAgICBpZiAoaW5uZXJQYXJhbXMgJiYgcGFyYW1zLmljb24gPT09IGlubmVyUGFyYW1zLmljb24pIHtcbiAgICAgIC8vIEN1c3RvbSBvciBkZWZhdWx0IGNvbnRlbnRcbiAgICAgIHNldENvbnRlbnQoaWNvbiwgcGFyYW1zKTtcbiAgICAgIGFwcGx5U3R5bGVzKGljb24sIHBhcmFtcyk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmICghcGFyYW1zLmljb24gJiYgIXBhcmFtcy5pY29uSHRtbCkge1xuICAgICAgaGlkZShpY29uKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKHBhcmFtcy5pY29uICYmIE9iamVjdC5rZXlzKGljb25UeXBlcykuaW5kZXhPZihwYXJhbXMuaWNvbikgPT09IC0xKSB7XG4gICAgICBlcnJvcihgVW5rbm93biBpY29uISBFeHBlY3RlZCBcInN1Y2Nlc3NcIiwgXCJlcnJvclwiLCBcIndhcm5pbmdcIiwgXCJpbmZvXCIgb3IgXCJxdWVzdGlvblwiLCBnb3QgXCIke3BhcmFtcy5pY29ufVwiYCk7XG4gICAgICBoaWRlKGljb24pO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBzaG93KGljb24pO1xuXG4gICAgLy8gQ3VzdG9tIG9yIGRlZmF1bHQgY29udGVudFxuICAgIHNldENvbnRlbnQoaWNvbiwgcGFyYW1zKTtcbiAgICBhcHBseVN0eWxlcyhpY29uLCBwYXJhbXMpO1xuXG4gICAgLy8gQW5pbWF0ZSBpY29uXG4gICAgYWRkQ2xhc3MoaWNvbiwgcGFyYW1zLnNob3dDbGFzcy5pY29uKTtcbiAgfTtcblxuICAvKipcbiAgICogQHBhcmFtIHtIVE1MRWxlbWVudH0gaWNvblxuICAgKiBAcGFyYW0ge1N3ZWV0QWxlcnRPcHRpb25zfSBwYXJhbXNcbiAgICovXG4gIGNvbnN0IGFwcGx5U3R5bGVzID0gKGljb24sIHBhcmFtcykgPT4ge1xuICAgIGZvciAoY29uc3QgaWNvblR5cGUgaW4gaWNvblR5cGVzKSB7XG4gICAgICBpZiAocGFyYW1zLmljb24gIT09IGljb25UeXBlKSB7XG4gICAgICAgIHJlbW92ZUNsYXNzKGljb24sIGljb25UeXBlc1tpY29uVHlwZV0pO1xuICAgICAgfVxuICAgIH1cbiAgICBhZGRDbGFzcyhpY29uLCBpY29uVHlwZXNbcGFyYW1zLmljb25dKTtcblxuICAgIC8vIEljb24gY29sb3JcbiAgICBzZXRDb2xvcihpY29uLCBwYXJhbXMpO1xuXG4gICAgLy8gU3VjY2VzcyBpY29uIGJhY2tncm91bmQgY29sb3JcbiAgICBhZGp1c3RTdWNjZXNzSWNvbkJhY2tncm91bmRDb2xvcigpO1xuXG4gICAgLy8gQ3VzdG9tIGNsYXNzXG4gICAgYXBwbHlDdXN0b21DbGFzcyhpY29uLCBwYXJhbXMsICdpY29uJyk7XG4gIH07XG5cbiAgLy8gQWRqdXN0IHN1Y2Nlc3MgaWNvbiBiYWNrZ3JvdW5kIGNvbG9yIHRvIG1hdGNoIHRoZSBwb3B1cCBiYWNrZ3JvdW5kIGNvbG9yXG4gIGNvbnN0IGFkanVzdFN1Y2Nlc3NJY29uQmFja2dyb3VuZENvbG9yID0gKCkgPT4ge1xuICAgIGNvbnN0IHBvcHVwID0gZ2V0UG9wdXAoKTtcbiAgICBjb25zdCBwb3B1cEJhY2tncm91bmRDb2xvciA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKHBvcHVwKS5nZXRQcm9wZXJ0eVZhbHVlKCdiYWNrZ3JvdW5kLWNvbG9yJyk7XG4gICAgLyoqIEB0eXBlIHtOb2RlTGlzdE9mPEhUTUxFbGVtZW50Pn0gKi9cbiAgICBjb25zdCBzdWNjZXNzSWNvblBhcnRzID0gcG9wdXAucXVlcnlTZWxlY3RvckFsbCgnW2NsYXNzXj1zd2FsMi1zdWNjZXNzLWNpcmN1bGFyLWxpbmVdLCAuc3dhbDItc3VjY2Vzcy1maXgnKTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHN1Y2Nlc3NJY29uUGFydHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHN1Y2Nlc3NJY29uUGFydHNbaV0uc3R5bGUuYmFja2dyb3VuZENvbG9yID0gcG9wdXBCYWNrZ3JvdW5kQ29sb3I7XG4gICAgfVxuICB9O1xuICBjb25zdCBzdWNjZXNzSWNvbkh0bWwgPSBgXG4gIDxkaXYgY2xhc3M9XCJzd2FsMi1zdWNjZXNzLWNpcmN1bGFyLWxpbmUtbGVmdFwiPjwvZGl2PlxuICA8c3BhbiBjbGFzcz1cInN3YWwyLXN1Y2Nlc3MtbGluZS10aXBcIj48L3NwYW4+IDxzcGFuIGNsYXNzPVwic3dhbDItc3VjY2Vzcy1saW5lLWxvbmdcIj48L3NwYW4+XG4gIDxkaXYgY2xhc3M9XCJzd2FsMi1zdWNjZXNzLXJpbmdcIj48L2Rpdj4gPGRpdiBjbGFzcz1cInN3YWwyLXN1Y2Nlc3MtZml4XCI+PC9kaXY+XG4gIDxkaXYgY2xhc3M9XCJzd2FsMi1zdWNjZXNzLWNpcmN1bGFyLWxpbmUtcmlnaHRcIj48L2Rpdj5cbmA7XG4gIGNvbnN0IGVycm9ySWNvbkh0bWwgPSBgXG4gIDxzcGFuIGNsYXNzPVwic3dhbDIteC1tYXJrXCI+XG4gICAgPHNwYW4gY2xhc3M9XCJzd2FsMi14LW1hcmstbGluZS1sZWZ0XCI+PC9zcGFuPlxuICAgIDxzcGFuIGNsYXNzPVwic3dhbDIteC1tYXJrLWxpbmUtcmlnaHRcIj48L3NwYW4+XG4gIDwvc3Bhbj5cbmA7XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IGljb25cbiAgICogQHBhcmFtIHtTd2VldEFsZXJ0T3B0aW9uc30gcGFyYW1zXG4gICAqL1xuICBjb25zdCBzZXRDb250ZW50ID0gKGljb24sIHBhcmFtcykgPT4ge1xuICAgIGxldCBvbGRDb250ZW50ID0gaWNvbi5pbm5lckhUTUw7XG4gICAgbGV0IG5ld0NvbnRlbnQ7XG4gICAgaWYgKHBhcmFtcy5pY29uSHRtbCkge1xuICAgICAgbmV3Q29udGVudCA9IGljb25Db250ZW50KHBhcmFtcy5pY29uSHRtbCk7XG4gICAgfSBlbHNlIGlmIChwYXJhbXMuaWNvbiA9PT0gJ3N1Y2Nlc3MnKSB7XG4gICAgICBuZXdDb250ZW50ID0gc3VjY2Vzc0ljb25IdG1sO1xuICAgICAgb2xkQ29udGVudCA9IG9sZENvbnRlbnQucmVwbGFjZSgvIHN0eWxlPVwiLio/XCIvZywgJycpOyAvLyB1bmRvIGFkanVzdFN1Y2Nlc3NJY29uQmFja2dyb3VuZENvbG9yKClcbiAgICB9IGVsc2UgaWYgKHBhcmFtcy5pY29uID09PSAnZXJyb3InKSB7XG4gICAgICBuZXdDb250ZW50ID0gZXJyb3JJY29uSHRtbDtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3QgZGVmYXVsdEljb25IdG1sID0ge1xuICAgICAgICBxdWVzdGlvbjogJz8nLFxuICAgICAgICB3YXJuaW5nOiAnIScsXG4gICAgICAgIGluZm86ICdpJ1xuICAgICAgfTtcbiAgICAgIG5ld0NvbnRlbnQgPSBpY29uQ29udGVudChkZWZhdWx0SWNvbkh0bWxbcGFyYW1zLmljb25dKTtcbiAgICB9XG4gICAgaWYgKG9sZENvbnRlbnQudHJpbSgpICE9PSBuZXdDb250ZW50LnRyaW0oKSkge1xuICAgICAgc2V0SW5uZXJIdG1sKGljb24sIG5ld0NvbnRlbnQpO1xuICAgIH1cbiAgfTtcblxuICAvKipcbiAgICogQHBhcmFtIHtIVE1MRWxlbWVudH0gaWNvblxuICAgKiBAcGFyYW0ge1N3ZWV0QWxlcnRPcHRpb25zfSBwYXJhbXNcbiAgICovXG4gIGNvbnN0IHNldENvbG9yID0gKGljb24sIHBhcmFtcykgPT4ge1xuICAgIGlmICghcGFyYW1zLmljb25Db2xvcikge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpY29uLnN0eWxlLmNvbG9yID0gcGFyYW1zLmljb25Db2xvcjtcbiAgICBpY29uLnN0eWxlLmJvcmRlckNvbG9yID0gcGFyYW1zLmljb25Db2xvcjtcbiAgICBmb3IgKGNvbnN0IHNlbCBvZiBbJy5zd2FsMi1zdWNjZXNzLWxpbmUtdGlwJywgJy5zd2FsMi1zdWNjZXNzLWxpbmUtbG9uZycsICcuc3dhbDIteC1tYXJrLWxpbmUtbGVmdCcsICcuc3dhbDIteC1tYXJrLWxpbmUtcmlnaHQnXSkge1xuICAgICAgc2V0U3R5bGUoaWNvbiwgc2VsLCAnYmFja2dyb3VuZENvbG9yJywgcGFyYW1zLmljb25Db2xvcik7XG4gICAgfVxuICAgIHNldFN0eWxlKGljb24sICcuc3dhbDItc3VjY2Vzcy1yaW5nJywgJ2JvcmRlckNvbG9yJywgcGFyYW1zLmljb25Db2xvcik7XG4gIH07XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBjb250ZW50XG4gICAqIEByZXR1cm5zIHtzdHJpbmd9XG4gICAqL1xuICBjb25zdCBpY29uQ29udGVudCA9IGNvbnRlbnQgPT4gYDxkaXYgY2xhc3M9XCIke3N3YWxDbGFzc2VzWydpY29uLWNvbnRlbnQnXX1cIj4ke2NvbnRlbnR9PC9kaXY+YDtcblxuICAvKipcbiAgICogQHBhcmFtIHtTd2VldEFsZXJ0Mn0gaW5zdGFuY2VcbiAgICogQHBhcmFtIHtTd2VldEFsZXJ0T3B0aW9uc30gcGFyYW1zXG4gICAqL1xuICBjb25zdCByZW5kZXJJbWFnZSA9IChpbnN0YW5jZSwgcGFyYW1zKSA9PiB7XG4gICAgY29uc3QgaW1hZ2UgPSBnZXRJbWFnZSgpO1xuICAgIGlmICghcGFyYW1zLmltYWdlVXJsKSB7XG4gICAgICBoaWRlKGltYWdlKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgc2hvdyhpbWFnZSwgJycpO1xuXG4gICAgLy8gU3JjLCBhbHRcbiAgICBpbWFnZS5zZXRBdHRyaWJ1dGUoJ3NyYycsIHBhcmFtcy5pbWFnZVVybCk7XG4gICAgaW1hZ2Uuc2V0QXR0cmlidXRlKCdhbHQnLCBwYXJhbXMuaW1hZ2VBbHQpO1xuXG4gICAgLy8gV2lkdGgsIGhlaWdodFxuICAgIGFwcGx5TnVtZXJpY2FsU3R5bGUoaW1hZ2UsICd3aWR0aCcsIHBhcmFtcy5pbWFnZVdpZHRoKTtcbiAgICBhcHBseU51bWVyaWNhbFN0eWxlKGltYWdlLCAnaGVpZ2h0JywgcGFyYW1zLmltYWdlSGVpZ2h0KTtcblxuICAgIC8vIENsYXNzXG4gICAgaW1hZ2UuY2xhc3NOYW1lID0gc3dhbENsYXNzZXMuaW1hZ2U7XG4gICAgYXBwbHlDdXN0b21DbGFzcyhpbWFnZSwgcGFyYW1zLCAnaW1hZ2UnKTtcbiAgfTtcblxuICAvKipcbiAgICogQHBhcmFtIHtTd2VldEFsZXJ0Mn0gaW5zdGFuY2VcbiAgICogQHBhcmFtIHtTd2VldEFsZXJ0T3B0aW9uc30gcGFyYW1zXG4gICAqL1xuICBjb25zdCByZW5kZXJQb3B1cCA9IChpbnN0YW5jZSwgcGFyYW1zKSA9PiB7XG4gICAgY29uc3QgY29udGFpbmVyID0gZ2V0Q29udGFpbmVyKCk7XG4gICAgY29uc3QgcG9wdXAgPSBnZXRQb3B1cCgpO1xuXG4gICAgLy8gV2lkdGhcbiAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vc3dlZXRhbGVydDIvc3dlZXRhbGVydDIvaXNzdWVzLzIxNzBcbiAgICBpZiAocGFyYW1zLnRvYXN0KSB7XG4gICAgICBhcHBseU51bWVyaWNhbFN0eWxlKGNvbnRhaW5lciwgJ3dpZHRoJywgcGFyYW1zLndpZHRoKTtcbiAgICAgIHBvcHVwLnN0eWxlLndpZHRoID0gJzEwMCUnO1xuICAgICAgcG9wdXAuaW5zZXJ0QmVmb3JlKGdldExvYWRlcigpLCBnZXRJY29uKCkpO1xuICAgIH0gZWxzZSB7XG4gICAgICBhcHBseU51bWVyaWNhbFN0eWxlKHBvcHVwLCAnd2lkdGgnLCBwYXJhbXMud2lkdGgpO1xuICAgIH1cblxuICAgIC8vIFBhZGRpbmdcbiAgICBhcHBseU51bWVyaWNhbFN0eWxlKHBvcHVwLCAncGFkZGluZycsIHBhcmFtcy5wYWRkaW5nKTtcblxuICAgIC8vIENvbG9yXG4gICAgaWYgKHBhcmFtcy5jb2xvcikge1xuICAgICAgcG9wdXAuc3R5bGUuY29sb3IgPSBwYXJhbXMuY29sb3I7XG4gICAgfVxuXG4gICAgLy8gQmFja2dyb3VuZFxuICAgIGlmIChwYXJhbXMuYmFja2dyb3VuZCkge1xuICAgICAgcG9wdXAuc3R5bGUuYmFja2dyb3VuZCA9IHBhcmFtcy5iYWNrZ3JvdW5kO1xuICAgIH1cbiAgICBoaWRlKGdldFZhbGlkYXRpb25NZXNzYWdlKCkpO1xuXG4gICAgLy8gQ2xhc3Nlc1xuICAgIGFkZENsYXNzZXMkMShwb3B1cCwgcGFyYW1zKTtcbiAgfTtcblxuICAvKipcbiAgICogQHBhcmFtIHtIVE1MRWxlbWVudH0gcG9wdXBcbiAgICogQHBhcmFtIHtTd2VldEFsZXJ0T3B0aW9uc30gcGFyYW1zXG4gICAqL1xuICBjb25zdCBhZGRDbGFzc2VzJDEgPSAocG9wdXAsIHBhcmFtcykgPT4ge1xuICAgIC8vIERlZmF1bHQgQ2xhc3MgKyBzaG93Q2xhc3Mgd2hlbiB1cGRhdGluZyBTd2FsLnVwZGF0ZSh7fSlcbiAgICBwb3B1cC5jbGFzc05hbWUgPSBgJHtzd2FsQ2xhc3Nlcy5wb3B1cH0gJHtpc1Zpc2libGUkMShwb3B1cCkgPyBwYXJhbXMuc2hvd0NsYXNzLnBvcHVwIDogJyd9YDtcbiAgICBpZiAocGFyYW1zLnRvYXN0KSB7XG4gICAgICBhZGRDbGFzcyhbZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LCBkb2N1bWVudC5ib2R5XSwgc3dhbENsYXNzZXNbJ3RvYXN0LXNob3duJ10pO1xuICAgICAgYWRkQ2xhc3MocG9wdXAsIHN3YWxDbGFzc2VzLnRvYXN0KTtcbiAgICB9IGVsc2Uge1xuICAgICAgYWRkQ2xhc3MocG9wdXAsIHN3YWxDbGFzc2VzLm1vZGFsKTtcbiAgICB9XG5cbiAgICAvLyBDdXN0b20gY2xhc3NcbiAgICBhcHBseUN1c3RvbUNsYXNzKHBvcHVwLCBwYXJhbXMsICdwb3B1cCcpO1xuICAgIGlmICh0eXBlb2YgcGFyYW1zLmN1c3RvbUNsYXNzID09PSAnc3RyaW5nJykge1xuICAgICAgYWRkQ2xhc3MocG9wdXAsIHBhcmFtcy5jdXN0b21DbGFzcyk7XG4gICAgfVxuXG4gICAgLy8gSWNvbiBjbGFzcyAoIzE4NDIpXG4gICAgaWYgKHBhcmFtcy5pY29uKSB7XG4gICAgICBhZGRDbGFzcyhwb3B1cCwgc3dhbENsYXNzZXNbYGljb24tJHtwYXJhbXMuaWNvbn1gXSk7XG4gICAgfVxuICB9O1xuXG4gIC8qKlxuICAgKiBAcGFyYW0ge1N3ZWV0QWxlcnQyfSBpbnN0YW5jZVxuICAgKiBAcGFyYW0ge1N3ZWV0QWxlcnRPcHRpb25zfSBwYXJhbXNcbiAgICovXG4gIGNvbnN0IHJlbmRlclByb2dyZXNzU3RlcHMgPSAoaW5zdGFuY2UsIHBhcmFtcykgPT4ge1xuICAgIGNvbnN0IHByb2dyZXNzU3RlcHNDb250YWluZXIgPSBnZXRQcm9ncmVzc1N0ZXBzKCk7XG4gICAgaWYgKCFwYXJhbXMucHJvZ3Jlc3NTdGVwcyB8fCBwYXJhbXMucHJvZ3Jlc3NTdGVwcy5sZW5ndGggPT09IDApIHtcbiAgICAgIGhpZGUocHJvZ3Jlc3NTdGVwc0NvbnRhaW5lcik7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHNob3cocHJvZ3Jlc3NTdGVwc0NvbnRhaW5lcik7XG4gICAgcHJvZ3Jlc3NTdGVwc0NvbnRhaW5lci50ZXh0Q29udGVudCA9ICcnO1xuICAgIGlmIChwYXJhbXMuY3VycmVudFByb2dyZXNzU3RlcCA+PSBwYXJhbXMucHJvZ3Jlc3NTdGVwcy5sZW5ndGgpIHtcbiAgICAgIHdhcm4oJ0ludmFsaWQgY3VycmVudFByb2dyZXNzU3RlcCBwYXJhbWV0ZXIsIGl0IHNob3VsZCBiZSBsZXNzIHRoYW4gcHJvZ3Jlc3NTdGVwcy5sZW5ndGggJyArICcoY3VycmVudFByb2dyZXNzU3RlcCBsaWtlIEpTIGFycmF5cyBzdGFydHMgZnJvbSAwKScpO1xuICAgIH1cbiAgICBwYXJhbXMucHJvZ3Jlc3NTdGVwcy5mb3JFYWNoKChzdGVwLCBpbmRleCkgPT4ge1xuICAgICAgY29uc3Qgc3RlcEVsID0gY3JlYXRlU3RlcEVsZW1lbnQoc3RlcCk7XG4gICAgICBwcm9ncmVzc1N0ZXBzQ29udGFpbmVyLmFwcGVuZENoaWxkKHN0ZXBFbCk7XG4gICAgICBpZiAoaW5kZXggPT09IHBhcmFtcy5jdXJyZW50UHJvZ3Jlc3NTdGVwKSB7XG4gICAgICAgIGFkZENsYXNzKHN0ZXBFbCwgc3dhbENsYXNzZXNbJ2FjdGl2ZS1wcm9ncmVzcy1zdGVwJ10pO1xuICAgICAgfVxuICAgICAgaWYgKGluZGV4ICE9PSBwYXJhbXMucHJvZ3Jlc3NTdGVwcy5sZW5ndGggLSAxKSB7XG4gICAgICAgIGNvbnN0IGxpbmVFbCA9IGNyZWF0ZUxpbmVFbGVtZW50KHBhcmFtcyk7XG4gICAgICAgIHByb2dyZXNzU3RlcHNDb250YWluZXIuYXBwZW5kQ2hpbGQobGluZUVsKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfTtcblxuICAvKipcbiAgICogQHBhcmFtIHtzdHJpbmd9IHN0ZXBcbiAgICogQHJldHVybnMge0hUTUxMSUVsZW1lbnR9XG4gICAqL1xuICBjb25zdCBjcmVhdGVTdGVwRWxlbWVudCA9IHN0ZXAgPT4ge1xuICAgIGNvbnN0IHN0ZXBFbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2xpJyk7XG4gICAgYWRkQ2xhc3Moc3RlcEVsLCBzd2FsQ2xhc3Nlc1sncHJvZ3Jlc3Mtc3RlcCddKTtcbiAgICBzZXRJbm5lckh0bWwoc3RlcEVsLCBzdGVwKTtcbiAgICByZXR1cm4gc3RlcEVsO1xuICB9O1xuXG4gIC8qKlxuICAgKiBAcGFyYW0ge1N3ZWV0QWxlcnRPcHRpb25zfSBwYXJhbXNcbiAgICogQHJldHVybnMge0hUTUxMSUVsZW1lbnR9XG4gICAqL1xuICBjb25zdCBjcmVhdGVMaW5lRWxlbWVudCA9IHBhcmFtcyA9PiB7XG4gICAgY29uc3QgbGluZUVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnbGknKTtcbiAgICBhZGRDbGFzcyhsaW5lRWwsIHN3YWxDbGFzc2VzWydwcm9ncmVzcy1zdGVwLWxpbmUnXSk7XG4gICAgaWYgKHBhcmFtcy5wcm9ncmVzc1N0ZXBzRGlzdGFuY2UpIHtcbiAgICAgIGFwcGx5TnVtZXJpY2FsU3R5bGUobGluZUVsLCAnd2lkdGgnLCBwYXJhbXMucHJvZ3Jlc3NTdGVwc0Rpc3RhbmNlKTtcbiAgICB9XG4gICAgcmV0dXJuIGxpbmVFbDtcbiAgfTtcblxuICAvKipcbiAgICogQHBhcmFtIHtTd2VldEFsZXJ0Mn0gaW5zdGFuY2VcbiAgICogQHBhcmFtIHtTd2VldEFsZXJ0T3B0aW9uc30gcGFyYW1zXG4gICAqL1xuICBjb25zdCByZW5kZXJUaXRsZSA9IChpbnN0YW5jZSwgcGFyYW1zKSA9PiB7XG4gICAgY29uc3QgdGl0bGUgPSBnZXRUaXRsZSgpO1xuICAgIHRvZ2dsZSh0aXRsZSwgcGFyYW1zLnRpdGxlIHx8IHBhcmFtcy50aXRsZVRleHQsICdibG9jaycpO1xuICAgIGlmIChwYXJhbXMudGl0bGUpIHtcbiAgICAgIHBhcnNlSHRtbFRvQ29udGFpbmVyKHBhcmFtcy50aXRsZSwgdGl0bGUpO1xuICAgIH1cbiAgICBpZiAocGFyYW1zLnRpdGxlVGV4dCkge1xuICAgICAgdGl0bGUuaW5uZXJUZXh0ID0gcGFyYW1zLnRpdGxlVGV4dDtcbiAgICB9XG5cbiAgICAvLyBDdXN0b20gY2xhc3NcbiAgICBhcHBseUN1c3RvbUNsYXNzKHRpdGxlLCBwYXJhbXMsICd0aXRsZScpO1xuICB9O1xuXG4gIC8qKlxuICAgKiBAcGFyYW0ge1N3ZWV0QWxlcnQyfSBpbnN0YW5jZVxuICAgKiBAcGFyYW0ge1N3ZWV0QWxlcnRPcHRpb25zfSBwYXJhbXNcbiAgICovXG4gIGNvbnN0IHJlbmRlciA9IChpbnN0YW5jZSwgcGFyYW1zKSA9PiB7XG4gICAgcmVuZGVyUG9wdXAoaW5zdGFuY2UsIHBhcmFtcyk7XG4gICAgcmVuZGVyQ29udGFpbmVyKGluc3RhbmNlLCBwYXJhbXMpO1xuICAgIHJlbmRlclByb2dyZXNzU3RlcHMoaW5zdGFuY2UsIHBhcmFtcyk7XG4gICAgcmVuZGVySWNvbihpbnN0YW5jZSwgcGFyYW1zKTtcbiAgICByZW5kZXJJbWFnZShpbnN0YW5jZSwgcGFyYW1zKTtcbiAgICByZW5kZXJUaXRsZShpbnN0YW5jZSwgcGFyYW1zKTtcbiAgICByZW5kZXJDbG9zZUJ1dHRvbihpbnN0YW5jZSwgcGFyYW1zKTtcbiAgICByZW5kZXJDb250ZW50KGluc3RhbmNlLCBwYXJhbXMpO1xuICAgIHJlbmRlckFjdGlvbnMoaW5zdGFuY2UsIHBhcmFtcyk7XG4gICAgcmVuZGVyRm9vdGVyKGluc3RhbmNlLCBwYXJhbXMpO1xuICAgIGlmICh0eXBlb2YgcGFyYW1zLmRpZFJlbmRlciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgcGFyYW1zLmRpZFJlbmRlcihnZXRQb3B1cCgpKTtcbiAgICB9XG4gIH07XG5cbiAgLyoqXG4gICAqIEhpZGVzIGxvYWRlciBhbmQgc2hvd3MgYmFjayB0aGUgYnV0dG9uIHdoaWNoIHdhcyBoaWRkZW4gYnkgLnNob3dMb2FkaW5nKClcbiAgICovXG4gIGZ1bmN0aW9uIGhpZGVMb2FkaW5nKCkge1xuICAgIC8vIGRvIG5vdGhpbmcgaWYgcG9wdXAgaXMgY2xvc2VkXG4gICAgY29uc3QgaW5uZXJQYXJhbXMgPSBwcml2YXRlUHJvcHMuaW5uZXJQYXJhbXMuZ2V0KHRoaXMpO1xuICAgIGlmICghaW5uZXJQYXJhbXMpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3QgZG9tQ2FjaGUgPSBwcml2YXRlUHJvcHMuZG9tQ2FjaGUuZ2V0KHRoaXMpO1xuICAgIGhpZGUoZG9tQ2FjaGUubG9hZGVyKTtcbiAgICBpZiAoaXNUb2FzdCgpKSB7XG4gICAgICBpZiAoaW5uZXJQYXJhbXMuaWNvbikge1xuICAgICAgICBzaG93KGdldEljb24oKSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHNob3dSZWxhdGVkQnV0dG9uKGRvbUNhY2hlKTtcbiAgICB9XG4gICAgcmVtb3ZlQ2xhc3MoW2RvbUNhY2hlLnBvcHVwLCBkb21DYWNoZS5hY3Rpb25zXSwgc3dhbENsYXNzZXMubG9hZGluZyk7XG4gICAgZG9tQ2FjaGUucG9wdXAucmVtb3ZlQXR0cmlidXRlKCdhcmlhLWJ1c3knKTtcbiAgICBkb21DYWNoZS5wb3B1cC5yZW1vdmVBdHRyaWJ1dGUoJ2RhdGEtbG9hZGluZycpO1xuICAgIGRvbUNhY2hlLmNvbmZpcm1CdXR0b24uZGlzYWJsZWQgPSBmYWxzZTtcbiAgICBkb21DYWNoZS5kZW55QnV0dG9uLmRpc2FibGVkID0gZmFsc2U7XG4gICAgZG9tQ2FjaGUuY2FuY2VsQnV0dG9uLmRpc2FibGVkID0gZmFsc2U7XG4gIH1cbiAgY29uc3Qgc2hvd1JlbGF0ZWRCdXR0b24gPSBkb21DYWNoZSA9PiB7XG4gICAgY29uc3QgYnV0dG9uVG9SZXBsYWNlID0gZG9tQ2FjaGUucG9wdXAuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZShkb21DYWNoZS5sb2FkZXIuZ2V0QXR0cmlidXRlKCdkYXRhLWJ1dHRvbi10by1yZXBsYWNlJykpO1xuICAgIGlmIChidXR0b25Ub1JlcGxhY2UubGVuZ3RoKSB7XG4gICAgICBzaG93KGJ1dHRvblRvUmVwbGFjZVswXSwgJ2lubGluZS1ibG9jaycpO1xuICAgIH0gZWxzZSBpZiAoYWxsQnV0dG9uc0FyZUhpZGRlbigpKSB7XG4gICAgICBoaWRlKGRvbUNhY2hlLmFjdGlvbnMpO1xuICAgIH1cbiAgfTtcblxuICAvKipcbiAgICogR2V0cyB0aGUgaW5wdXQgRE9NIG5vZGUsIHRoaXMgbWV0aG9kIHdvcmtzIHdpdGggaW5wdXQgcGFyYW1ldGVyLlxuICAgKlxuICAgKiBAcGFyYW0ge1N3ZWV0QWxlcnQyfSBpbnN0YW5jZVxuICAgKiBAcmV0dXJucyB7SFRNTEVsZW1lbnQgfCBudWxsfVxuICAgKi9cbiAgZnVuY3Rpb24gZ2V0SW5wdXQoaW5zdGFuY2UpIHtcbiAgICBjb25zdCBpbm5lclBhcmFtcyA9IHByaXZhdGVQcm9wcy5pbm5lclBhcmFtcy5nZXQoaW5zdGFuY2UgfHwgdGhpcyk7XG4gICAgY29uc3QgZG9tQ2FjaGUgPSBwcml2YXRlUHJvcHMuZG9tQ2FjaGUuZ2V0KGluc3RhbmNlIHx8IHRoaXMpO1xuICAgIGlmICghZG9tQ2FjaGUpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICByZXR1cm4gZ2V0SW5wdXQkMShkb21DYWNoZS5wb3B1cCwgaW5uZXJQYXJhbXMuaW5wdXQpO1xuICB9XG5cbiAgLypcbiAgICogR2xvYmFsIGZ1bmN0aW9uIHRvIGRldGVybWluZSBpZiBTd2VldEFsZXJ0MiBwb3B1cCBpcyBzaG93blxuICAgKi9cbiAgY29uc3QgaXNWaXNpYmxlID0gKCkgPT4ge1xuICAgIHJldHVybiBpc1Zpc2libGUkMShnZXRQb3B1cCgpKTtcbiAgfTtcblxuICAvKlxuICAgKiBHbG9iYWwgZnVuY3Rpb24gdG8gY2xpY2sgJ0NvbmZpcm0nIGJ1dHRvblxuICAgKi9cbiAgY29uc3QgY2xpY2tDb25maXJtID0gKCkgPT4gZ2V0Q29uZmlybUJ1dHRvbigpICYmIGdldENvbmZpcm1CdXR0b24oKS5jbGljaygpO1xuXG4gIC8qXG4gICAqIEdsb2JhbCBmdW5jdGlvbiB0byBjbGljayAnRGVueScgYnV0dG9uXG4gICAqL1xuICBjb25zdCBjbGlja0RlbnkgPSAoKSA9PiBnZXREZW55QnV0dG9uKCkgJiYgZ2V0RGVueUJ1dHRvbigpLmNsaWNrKCk7XG5cbiAgLypcbiAgICogR2xvYmFsIGZ1bmN0aW9uIHRvIGNsaWNrICdDYW5jZWwnIGJ1dHRvblxuICAgKi9cbiAgY29uc3QgY2xpY2tDYW5jZWwgPSAoKSA9PiBnZXRDYW5jZWxCdXR0b24oKSAmJiBnZXRDYW5jZWxCdXR0b24oKS5jbGljaygpO1xuXG4gIGNvbnN0IERpc21pc3NSZWFzb24gPSBPYmplY3QuZnJlZXplKHtcbiAgICBjYW5jZWw6ICdjYW5jZWwnLFxuICAgIGJhY2tkcm9wOiAnYmFja2Ryb3AnLFxuICAgIGNsb3NlOiAnY2xvc2UnLFxuICAgIGVzYzogJ2VzYycsXG4gICAgdGltZXI6ICd0aW1lcidcbiAgfSk7XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7R2xvYmFsU3RhdGV9IGdsb2JhbFN0YXRlXG4gICAqL1xuICBjb25zdCByZW1vdmVLZXlkb3duSGFuZGxlciA9IGdsb2JhbFN0YXRlID0+IHtcbiAgICBpZiAoZ2xvYmFsU3RhdGUua2V5ZG93blRhcmdldCAmJiBnbG9iYWxTdGF0ZS5rZXlkb3duSGFuZGxlckFkZGVkKSB7XG4gICAgICBnbG9iYWxTdGF0ZS5rZXlkb3duVGFyZ2V0LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCBnbG9iYWxTdGF0ZS5rZXlkb3duSGFuZGxlciwge1xuICAgICAgICBjYXB0dXJlOiBnbG9iYWxTdGF0ZS5rZXlkb3duTGlzdGVuZXJDYXB0dXJlXG4gICAgICB9KTtcbiAgICAgIGdsb2JhbFN0YXRlLmtleWRvd25IYW5kbGVyQWRkZWQgPSBmYWxzZTtcbiAgICB9XG4gIH07XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7U3dlZXRBbGVydDJ9IGluc3RhbmNlXG4gICAqIEBwYXJhbSB7R2xvYmFsU3RhdGV9IGdsb2JhbFN0YXRlXG4gICAqIEBwYXJhbSB7U3dlZXRBbGVydE9wdGlvbnN9IGlubmVyUGFyYW1zXG4gICAqIEBwYXJhbSB7Kn0gZGlzbWlzc1dpdGhcbiAgICovXG4gIGNvbnN0IGFkZEtleWRvd25IYW5kbGVyID0gKGluc3RhbmNlLCBnbG9iYWxTdGF0ZSwgaW5uZXJQYXJhbXMsIGRpc21pc3NXaXRoKSA9PiB7XG4gICAgcmVtb3ZlS2V5ZG93bkhhbmRsZXIoZ2xvYmFsU3RhdGUpO1xuICAgIGlmICghaW5uZXJQYXJhbXMudG9hc3QpIHtcbiAgICAgIGdsb2JhbFN0YXRlLmtleWRvd25IYW5kbGVyID0gZSA9PiBrZXlkb3duSGFuZGxlcihpbnN0YW5jZSwgZSwgZGlzbWlzc1dpdGgpO1xuICAgICAgZ2xvYmFsU3RhdGUua2V5ZG93blRhcmdldCA9IGlubmVyUGFyYW1zLmtleWRvd25MaXN0ZW5lckNhcHR1cmUgPyB3aW5kb3cgOiBnZXRQb3B1cCgpO1xuICAgICAgZ2xvYmFsU3RhdGUua2V5ZG93bkxpc3RlbmVyQ2FwdHVyZSA9IGlubmVyUGFyYW1zLmtleWRvd25MaXN0ZW5lckNhcHR1cmU7XG4gICAgICBnbG9iYWxTdGF0ZS5rZXlkb3duVGFyZ2V0LmFkZEV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCBnbG9iYWxTdGF0ZS5rZXlkb3duSGFuZGxlciwge1xuICAgICAgICBjYXB0dXJlOiBnbG9iYWxTdGF0ZS5rZXlkb3duTGlzdGVuZXJDYXB0dXJlXG4gICAgICB9KTtcbiAgICAgIGdsb2JhbFN0YXRlLmtleWRvd25IYW5kbGVyQWRkZWQgPSB0cnVlO1xuICAgIH1cbiAgfTtcblxuICAvKipcbiAgICogQHBhcmFtIHtudW1iZXJ9IGluZGV4XG4gICAqIEBwYXJhbSB7bnVtYmVyfSBpbmNyZW1lbnRcbiAgICovXG4gIGNvbnN0IHNldEZvY3VzID0gKGluZGV4LCBpbmNyZW1lbnQpID0+IHtcbiAgICBjb25zdCBmb2N1c2FibGVFbGVtZW50cyA9IGdldEZvY3VzYWJsZUVsZW1lbnRzKCk7XG4gICAgLy8gc2VhcmNoIGZvciB2aXNpYmxlIGVsZW1lbnRzIGFuZCBzZWxlY3QgdGhlIG5leHQgcG9zc2libGUgbWF0Y2hcbiAgICBpZiAoZm9jdXNhYmxlRWxlbWVudHMubGVuZ3RoKSB7XG4gICAgICBpbmRleCA9IGluZGV4ICsgaW5jcmVtZW50O1xuXG4gICAgICAvLyByb2xsb3ZlciB0byBmaXJzdCBpdGVtXG4gICAgICBpZiAoaW5kZXggPT09IGZvY3VzYWJsZUVsZW1lbnRzLmxlbmd0aCkge1xuICAgICAgICBpbmRleCA9IDA7XG5cbiAgICAgICAgLy8gZ28gdG8gbGFzdCBpdGVtXG4gICAgICB9IGVsc2UgaWYgKGluZGV4ID09PSAtMSkge1xuICAgICAgICBpbmRleCA9IGZvY3VzYWJsZUVsZW1lbnRzLmxlbmd0aCAtIDE7XG4gICAgICB9XG4gICAgICBmb2N1c2FibGVFbGVtZW50c1tpbmRleF0uZm9jdXMoKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgLy8gbm8gdmlzaWJsZSBmb2N1c2FibGUgZWxlbWVudHMsIGZvY3VzIHRoZSBwb3B1cFxuICAgIGdldFBvcHVwKCkuZm9jdXMoKTtcbiAgfTtcbiAgY29uc3QgYXJyb3dLZXlzTmV4dEJ1dHRvbiA9IFsnQXJyb3dSaWdodCcsICdBcnJvd0Rvd24nXTtcbiAgY29uc3QgYXJyb3dLZXlzUHJldmlvdXNCdXR0b24gPSBbJ0Fycm93TGVmdCcsICdBcnJvd1VwJ107XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7U3dlZXRBbGVydDJ9IGluc3RhbmNlXG4gICAqIEBwYXJhbSB7S2V5Ym9hcmRFdmVudH0gZXZlbnRcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gZGlzbWlzc1dpdGhcbiAgICovXG4gIGNvbnN0IGtleWRvd25IYW5kbGVyID0gKGluc3RhbmNlLCBldmVudCwgZGlzbWlzc1dpdGgpID0+IHtcbiAgICBjb25zdCBpbm5lclBhcmFtcyA9IHByaXZhdGVQcm9wcy5pbm5lclBhcmFtcy5nZXQoaW5zdGFuY2UpO1xuICAgIGlmICghaW5uZXJQYXJhbXMpIHtcbiAgICAgIHJldHVybjsgLy8gVGhpcyBpbnN0YW5jZSBoYXMgYWxyZWFkeSBiZWVuIGRlc3Ryb3llZFxuICAgIH1cblxuICAgIC8vIElnbm9yZSBrZXlkb3duIGR1cmluZyBJTUUgY29tcG9zaXRpb25cbiAgICAvLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvRG9jdW1lbnQva2V5ZG93bl9ldmVudCNpZ25vcmluZ19rZXlkb3duX2R1cmluZ19pbWVfY29tcG9zaXRpb25cbiAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vc3dlZXRhbGVydDIvc3dlZXRhbGVydDIvaXNzdWVzLzcyMFxuICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9zd2VldGFsZXJ0Mi9zd2VldGFsZXJ0Mi9pc3N1ZXMvMjQwNlxuICAgIGlmIChldmVudC5pc0NvbXBvc2luZyB8fCBldmVudC5rZXlDb2RlID09PSAyMjkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKGlubmVyUGFyYW1zLnN0b3BLZXlkb3duUHJvcGFnYXRpb24pIHtcbiAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgIH1cblxuICAgIC8vIEVOVEVSXG4gICAgaWYgKGV2ZW50LmtleSA9PT0gJ0VudGVyJykge1xuICAgICAgaGFuZGxlRW50ZXIoaW5zdGFuY2UsIGV2ZW50LCBpbm5lclBhcmFtcyk7XG4gICAgfVxuXG4gICAgLy8gVEFCXG4gICAgZWxzZSBpZiAoZXZlbnQua2V5ID09PSAnVGFiJykge1xuICAgICAgaGFuZGxlVGFiKGV2ZW50KTtcbiAgICB9XG5cbiAgICAvLyBBUlJPV1MgLSBzd2l0Y2ggZm9jdXMgYmV0d2VlbiBidXR0b25zXG4gICAgZWxzZSBpZiAoWy4uLmFycm93S2V5c05leHRCdXR0b24sIC4uLmFycm93S2V5c1ByZXZpb3VzQnV0dG9uXS5pbmNsdWRlcyhldmVudC5rZXkpKSB7XG4gICAgICBoYW5kbGVBcnJvd3MoZXZlbnQua2V5KTtcbiAgICB9XG5cbiAgICAvLyBFU0NcbiAgICBlbHNlIGlmIChldmVudC5rZXkgPT09ICdFc2NhcGUnKSB7XG4gICAgICBoYW5kbGVFc2MoZXZlbnQsIGlubmVyUGFyYW1zLCBkaXNtaXNzV2l0aCk7XG4gICAgfVxuICB9O1xuXG4gIC8qKlxuICAgKiBAcGFyYW0ge1N3ZWV0QWxlcnQyfSBpbnN0YW5jZVxuICAgKiBAcGFyYW0ge0tleWJvYXJkRXZlbnR9IGV2ZW50XG4gICAqIEBwYXJhbSB7U3dlZXRBbGVydE9wdGlvbnN9IGlubmVyUGFyYW1zXG4gICAqL1xuICBjb25zdCBoYW5kbGVFbnRlciA9IChpbnN0YW5jZSwgZXZlbnQsIGlubmVyUGFyYW1zKSA9PiB7XG4gICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL3N3ZWV0YWxlcnQyL3N3ZWV0YWxlcnQyL2lzc3Vlcy8yMzg2XG4gICAgaWYgKCFjYWxsSWZGdW5jdGlvbihpbm5lclBhcmFtcy5hbGxvd0VudGVyS2V5KSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoZXZlbnQudGFyZ2V0ICYmIGluc3RhbmNlLmdldElucHV0KCkgJiYgZXZlbnQudGFyZ2V0IGluc3RhbmNlb2YgSFRNTEVsZW1lbnQgJiYgZXZlbnQudGFyZ2V0Lm91dGVySFRNTCA9PT0gaW5zdGFuY2UuZ2V0SW5wdXQoKS5vdXRlckhUTUwpIHtcbiAgICAgIGlmIChbJ3RleHRhcmVhJywgJ2ZpbGUnXS5pbmNsdWRlcyhpbm5lclBhcmFtcy5pbnB1dCkpIHtcbiAgICAgICAgcmV0dXJuOyAvLyBkbyBub3Qgc3VibWl0XG4gICAgICB9XG5cbiAgICAgIGNsaWNrQ29uZmlybSgpO1xuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICB9XG4gIH07XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7S2V5Ym9hcmRFdmVudH0gZXZlbnRcbiAgICovXG4gIGNvbnN0IGhhbmRsZVRhYiA9IGV2ZW50ID0+IHtcbiAgICBjb25zdCB0YXJnZXRFbGVtZW50ID0gZXZlbnQudGFyZ2V0O1xuICAgIGNvbnN0IGZvY3VzYWJsZUVsZW1lbnRzID0gZ2V0Rm9jdXNhYmxlRWxlbWVudHMoKTtcbiAgICBsZXQgYnRuSW5kZXggPSAtMTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGZvY3VzYWJsZUVsZW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAodGFyZ2V0RWxlbWVudCA9PT0gZm9jdXNhYmxlRWxlbWVudHNbaV0pIHtcbiAgICAgICAgYnRuSW5kZXggPSBpO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBDeWNsZSB0byB0aGUgbmV4dCBidXR0b25cbiAgICBpZiAoIWV2ZW50LnNoaWZ0S2V5KSB7XG4gICAgICBzZXRGb2N1cyhidG5JbmRleCwgMSk7XG4gICAgfVxuXG4gICAgLy8gQ3ljbGUgdG8gdGhlIHByZXYgYnV0dG9uXG4gICAgZWxzZSB7XG4gICAgICBzZXRGb2N1cyhidG5JbmRleCwgLTEpO1xuICAgIH1cbiAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICB9O1xuXG4gIC8qKlxuICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5XG4gICAqL1xuICBjb25zdCBoYW5kbGVBcnJvd3MgPSBrZXkgPT4ge1xuICAgIGNvbnN0IGNvbmZpcm1CdXR0b24gPSBnZXRDb25maXJtQnV0dG9uKCk7XG4gICAgY29uc3QgZGVueUJ1dHRvbiA9IGdldERlbnlCdXR0b24oKTtcbiAgICBjb25zdCBjYW5jZWxCdXR0b24gPSBnZXRDYW5jZWxCdXR0b24oKTtcbiAgICAvKiogQHR5cGUgSFRNTEVsZW1lbnRbXSAqL1xuICAgIGNvbnN0IGJ1dHRvbnMgPSBbY29uZmlybUJ1dHRvbiwgZGVueUJ1dHRvbiwgY2FuY2VsQnV0dG9uXTtcbiAgICBpZiAoZG9jdW1lbnQuYWN0aXZlRWxlbWVudCBpbnN0YW5jZW9mIEhUTUxFbGVtZW50ICYmICFidXR0b25zLmluY2x1ZGVzKGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IHNpYmxpbmcgPSBhcnJvd0tleXNOZXh0QnV0dG9uLmluY2x1ZGVzKGtleSkgPyAnbmV4dEVsZW1lbnRTaWJsaW5nJyA6ICdwcmV2aW91c0VsZW1lbnRTaWJsaW5nJztcbiAgICBsZXQgYnV0dG9uVG9Gb2N1cyA9IGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQ7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBnZXRBY3Rpb25zKCkuY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcbiAgICAgIGJ1dHRvblRvRm9jdXMgPSBidXR0b25Ub0ZvY3VzW3NpYmxpbmddO1xuICAgICAgaWYgKCFidXR0b25Ub0ZvY3VzKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGlmIChidXR0b25Ub0ZvY3VzIGluc3RhbmNlb2YgSFRNTEJ1dHRvbkVsZW1lbnQgJiYgaXNWaXNpYmxlJDEoYnV0dG9uVG9Gb2N1cykpIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChidXR0b25Ub0ZvY3VzIGluc3RhbmNlb2YgSFRNTEJ1dHRvbkVsZW1lbnQpIHtcbiAgICAgIGJ1dHRvblRvRm9jdXMuZm9jdXMoKTtcbiAgICB9XG4gIH07XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7S2V5Ym9hcmRFdmVudH0gZXZlbnRcbiAgICogQHBhcmFtIHtTd2VldEFsZXJ0T3B0aW9uc30gaW5uZXJQYXJhbXNcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gZGlzbWlzc1dpdGhcbiAgICovXG4gIGNvbnN0IGhhbmRsZUVzYyA9IChldmVudCwgaW5uZXJQYXJhbXMsIGRpc21pc3NXaXRoKSA9PiB7XG4gICAgaWYgKGNhbGxJZkZ1bmN0aW9uKGlubmVyUGFyYW1zLmFsbG93RXNjYXBlS2V5KSkge1xuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgIGRpc21pc3NXaXRoKERpc21pc3NSZWFzb24uZXNjKTtcbiAgICB9XG4gIH07XG5cbiAgLyoqXG4gICAqIFRoaXMgbW9kdWxlIGNvbnRhaW5zIGBXZWFrTWFwYHMgZm9yIGVhY2ggZWZmZWN0aXZlbHktXCJwcml2YXRlICBwcm9wZXJ0eVwiIHRoYXQgYSBgU3dhbGAgaGFzLlxuICAgKiBGb3IgZXhhbXBsZSwgdG8gc2V0IHRoZSBwcml2YXRlIHByb3BlcnR5IFwiZm9vXCIgb2YgYHRoaXNgIHRvIFwiYmFyXCIsIHlvdSBjYW4gYHByaXZhdGVQcm9wcy5mb28uc2V0KHRoaXMsICdiYXInKWBcbiAgICogVGhpcyBpcyB0aGUgYXBwcm9hY2ggdGhhdCBCYWJlbCB3aWxsIHByb2JhYmx5IHRha2UgdG8gaW1wbGVtZW50IHByaXZhdGUgbWV0aG9kcy9maWVsZHNcbiAgICogICBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1wcml2YXRlLW1ldGhvZHNcbiAgICogICBodHRwczovL2dpdGh1Yi5jb20vYmFiZWwvYmFiZWwvcHVsbC83NTU1XG4gICAqIE9uY2Ugd2UgaGF2ZSB0aGUgY2hhbmdlcyBmcm9tIHRoYXQgUFIgaW4gQmFiZWwsIGFuZCBvdXIgY29yZSBjbGFzcyBmaXRzIHJlYXNvbmFibGUgaW4gKm9uZSBtb2R1bGUqXG4gICAqICAgdGhlbiB3ZSBjYW4gdXNlIHRoYXQgbGFuZ3VhZ2UgZmVhdHVyZS5cbiAgICovXG5cbiAgdmFyIHByaXZhdGVNZXRob2RzID0ge1xuICAgIHN3YWxQcm9taXNlUmVzb2x2ZTogbmV3IFdlYWtNYXAoKSxcbiAgICBzd2FsUHJvbWlzZVJlamVjdDogbmV3IFdlYWtNYXAoKVxuICB9O1xuXG4gIC8vIEZyb20gaHR0cHM6Ly9kZXZlbG9wZXIucGFjaWVsbG9ncm91cC5jb20vYmxvZy8yMDE4LzA2L3RoZS1jdXJyZW50LXN0YXRlLW9mLW1vZGFsLWRpYWxvZy1hY2Nlc3NpYmlsaXR5L1xuICAvLyBBZGRpbmcgYXJpYS1oaWRkZW49XCJ0cnVlXCIgdG8gZWxlbWVudHMgb3V0c2lkZSBvZiB0aGUgYWN0aXZlIG1vZGFsIGRpYWxvZyBlbnN1cmVzIHRoYXRcbiAgLy8gZWxlbWVudHMgbm90IHdpdGhpbiB0aGUgYWN0aXZlIG1vZGFsIGRpYWxvZyB3aWxsIG5vdCBiZSBzdXJmYWNlZCBpZiBhIHVzZXIgb3BlbnMgYSBzY3JlZW5cbiAgLy8gcmVhZGVy4oCZcyBsaXN0IG9mIGVsZW1lbnRzIChoZWFkaW5ncywgZm9ybSBjb250cm9scywgbGFuZG1hcmtzLCBldGMuKSBpbiB0aGUgZG9jdW1lbnQuXG5cbiAgY29uc3Qgc2V0QXJpYUhpZGRlbiA9ICgpID0+IHtcbiAgICBjb25zdCBib2R5Q2hpbGRyZW4gPSBBcnJheS5mcm9tKGRvY3VtZW50LmJvZHkuY2hpbGRyZW4pO1xuICAgIGJvZHlDaGlsZHJlbi5mb3JFYWNoKGVsID0+IHtcbiAgICAgIGlmIChlbCA9PT0gZ2V0Q29udGFpbmVyKCkgfHwgZWwuY29udGFpbnMoZ2V0Q29udGFpbmVyKCkpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGlmIChlbC5oYXNBdHRyaWJ1dGUoJ2FyaWEtaGlkZGVuJykpIHtcbiAgICAgICAgZWwuc2V0QXR0cmlidXRlKCdkYXRhLXByZXZpb3VzLWFyaWEtaGlkZGVuJywgZWwuZ2V0QXR0cmlidXRlKCdhcmlhLWhpZGRlbicpKTtcbiAgICAgIH1cbiAgICAgIGVsLnNldEF0dHJpYnV0ZSgnYXJpYS1oaWRkZW4nLCAndHJ1ZScpO1xuICAgIH0pO1xuICB9O1xuICBjb25zdCB1bnNldEFyaWFIaWRkZW4gPSAoKSA9PiB7XG4gICAgY29uc3QgYm9keUNoaWxkcmVuID0gQXJyYXkuZnJvbShkb2N1bWVudC5ib2R5LmNoaWxkcmVuKTtcbiAgICBib2R5Q2hpbGRyZW4uZm9yRWFjaChlbCA9PiB7XG4gICAgICBpZiAoZWwuaGFzQXR0cmlidXRlKCdkYXRhLXByZXZpb3VzLWFyaWEtaGlkZGVuJykpIHtcbiAgICAgICAgZWwuc2V0QXR0cmlidXRlKCdhcmlhLWhpZGRlbicsIGVsLmdldEF0dHJpYnV0ZSgnZGF0YS1wcmV2aW91cy1hcmlhLWhpZGRlbicpKTtcbiAgICAgICAgZWwucmVtb3ZlQXR0cmlidXRlKCdkYXRhLXByZXZpb3VzLWFyaWEtaGlkZGVuJyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBlbC5yZW1vdmVBdHRyaWJ1dGUoJ2FyaWEtaGlkZGVuJyk7XG4gICAgICB9XG4gICAgfSk7XG4gIH07XG5cbiAgLyogaXN0YW5idWwgaWdub3JlIGZpbGUgKi9cblxuICAvLyBGaXggaU9TIHNjcm9sbGluZyBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vcS8zOTYyNjMwMlxuXG4gIGNvbnN0IGlPU2ZpeCA9ICgpID0+IHtcbiAgICBjb25zdCBpT1MgPVxuICAgIC8vIEB0cy1pZ25vcmVcbiAgICAvaVBhZHxpUGhvbmV8aVBvZC8udGVzdChuYXZpZ2F0b3IudXNlckFnZW50KSAmJiAhd2luZG93Lk1TU3RyZWFtIHx8IG5hdmlnYXRvci5wbGF0Zm9ybSA9PT0gJ01hY0ludGVsJyAmJiBuYXZpZ2F0b3IubWF4VG91Y2hQb2ludHMgPiAxO1xuICAgIGlmIChpT1MgJiYgIWhhc0NsYXNzKGRvY3VtZW50LmJvZHksIHN3YWxDbGFzc2VzLmlvc2ZpeCkpIHtcbiAgICAgIGNvbnN0IG9mZnNldCA9IGRvY3VtZW50LmJvZHkuc2Nyb2xsVG9wO1xuICAgICAgZG9jdW1lbnQuYm9keS5zdHlsZS50b3AgPSBgJHtvZmZzZXQgKiAtMX1weGA7XG4gICAgICBhZGRDbGFzcyhkb2N1bWVudC5ib2R5LCBzd2FsQ2xhc3Nlcy5pb3NmaXgpO1xuICAgICAgbG9ja0JvZHlTY3JvbGwoKTtcbiAgICAgIGFkZEJvdHRvbVBhZGRpbmdGb3JUYWxsUG9wdXBzKCk7XG4gICAgfVxuICB9O1xuXG4gIC8qKlxuICAgKiBodHRwczovL2dpdGh1Yi5jb20vc3dlZXRhbGVydDIvc3dlZXRhbGVydDIvaXNzdWVzLzE5NDhcbiAgICovXG4gIGNvbnN0IGFkZEJvdHRvbVBhZGRpbmdGb3JUYWxsUG9wdXBzID0gKCkgPT4ge1xuICAgIGNvbnN0IHVhID0gbmF2aWdhdG9yLnVzZXJBZ2VudDtcbiAgICBjb25zdCBpT1MgPSAhIXVhLm1hdGNoKC9pUGFkL2kpIHx8ICEhdWEubWF0Y2goL2lQaG9uZS9pKTtcbiAgICBjb25zdCB3ZWJraXQgPSAhIXVhLm1hdGNoKC9XZWJLaXQvaSk7XG4gICAgY29uc3QgaU9TU2FmYXJpID0gaU9TICYmIHdlYmtpdCAmJiAhdWEubWF0Y2goL0NyaU9TL2kpO1xuICAgIGlmIChpT1NTYWZhcmkpIHtcbiAgICAgIGNvbnN0IGJvdHRvbVBhbmVsSGVpZ2h0ID0gNDQ7XG4gICAgICBpZiAoZ2V0UG9wdXAoKS5zY3JvbGxIZWlnaHQgPiB3aW5kb3cuaW5uZXJIZWlnaHQgLSBib3R0b21QYW5lbEhlaWdodCkge1xuICAgICAgICBnZXRDb250YWluZXIoKS5zdHlsZS5wYWRkaW5nQm90dG9tID0gYCR7Ym90dG9tUGFuZWxIZWlnaHR9cHhgO1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICAvKipcbiAgICogaHR0cHM6Ly9naXRodWIuY29tL3N3ZWV0YWxlcnQyL3N3ZWV0YWxlcnQyL2lzc3Vlcy8xMjQ2XG4gICAqL1xuICBjb25zdCBsb2NrQm9keVNjcm9sbCA9ICgpID0+IHtcbiAgICBjb25zdCBjb250YWluZXIgPSBnZXRDb250YWluZXIoKTtcbiAgICBsZXQgcHJldmVudFRvdWNoTW92ZTtcbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge1RvdWNoRXZlbnR9IGV2ZW50XG4gICAgICovXG4gICAgY29udGFpbmVyLm9udG91Y2hzdGFydCA9IGV2ZW50ID0+IHtcbiAgICAgIHByZXZlbnRUb3VjaE1vdmUgPSBzaG91bGRQcmV2ZW50VG91Y2hNb3ZlKGV2ZW50KTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7VG91Y2hFdmVudH0gZXZlbnRcbiAgICAgKi9cbiAgICBjb250YWluZXIub250b3VjaG1vdmUgPSBldmVudCA9PiB7XG4gICAgICBpZiAocHJldmVudFRvdWNoTW92ZSkge1xuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgIH1cbiAgICB9O1xuICB9O1xuXG4gIC8qKlxuICAgKiBAcGFyYW0ge1RvdWNoRXZlbnR9IGV2ZW50XG4gICAqIEByZXR1cm5zIHtib29sZWFufVxuICAgKi9cbiAgY29uc3Qgc2hvdWxkUHJldmVudFRvdWNoTW92ZSA9IGV2ZW50ID0+IHtcbiAgICBjb25zdCB0YXJnZXQgPSBldmVudC50YXJnZXQ7XG4gICAgY29uc3QgY29udGFpbmVyID0gZ2V0Q29udGFpbmVyKCk7XG4gICAgaWYgKGlzU3R5bHVzKGV2ZW50KSB8fCBpc1pvb20oZXZlbnQpKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGlmICh0YXJnZXQgPT09IGNvbnRhaW5lcikge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIGlmICghaXNTY3JvbGxhYmxlKGNvbnRhaW5lcikgJiYgdGFyZ2V0IGluc3RhbmNlb2YgSFRNTEVsZW1lbnQgJiYgdGFyZ2V0LnRhZ05hbWUgIT09ICdJTlBVVCcgJiZcbiAgICAvLyAjMTYwM1xuICAgIHRhcmdldC50YWdOYW1lICE9PSAnVEVYVEFSRUEnICYmXG4gICAgLy8gIzIyNjZcbiAgICAhKGlzU2Nyb2xsYWJsZShnZXRIdG1sQ29udGFpbmVyKCkpICYmXG4gICAgLy8gIzE5NDRcbiAgICBnZXRIdG1sQ29udGFpbmVyKCkuY29udGFpbnModGFyZ2V0KSkpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG4gIH07XG5cbiAgLyoqXG4gICAqIGh0dHBzOi8vZ2l0aHViLmNvbS9zd2VldGFsZXJ0Mi9zd2VldGFsZXJ0Mi9pc3N1ZXMvMTc4NlxuICAgKlxuICAgKiBAcGFyYW0geyp9IGV2ZW50XG4gICAqIEByZXR1cm5zIHtib29sZWFufVxuICAgKi9cbiAgY29uc3QgaXNTdHlsdXMgPSBldmVudCA9PiB7XG4gICAgcmV0dXJuIGV2ZW50LnRvdWNoZXMgJiYgZXZlbnQudG91Y2hlcy5sZW5ndGggJiYgZXZlbnQudG91Y2hlc1swXS50b3VjaFR5cGUgPT09ICdzdHlsdXMnO1xuICB9O1xuXG4gIC8qKlxuICAgKiBodHRwczovL2dpdGh1Yi5jb20vc3dlZXRhbGVydDIvc3dlZXRhbGVydDIvaXNzdWVzLzE4OTFcbiAgICpcbiAgICogQHBhcmFtIHtUb3VjaEV2ZW50fSBldmVudFxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAgICovXG4gIGNvbnN0IGlzWm9vbSA9IGV2ZW50ID0+IHtcbiAgICByZXR1cm4gZXZlbnQudG91Y2hlcyAmJiBldmVudC50b3VjaGVzLmxlbmd0aCA+IDE7XG4gIH07XG4gIGNvbnN0IHVuZG9JT1NmaXggPSAoKSA9PiB7XG4gICAgaWYgKGhhc0NsYXNzKGRvY3VtZW50LmJvZHksIHN3YWxDbGFzc2VzLmlvc2ZpeCkpIHtcbiAgICAgIGNvbnN0IG9mZnNldCA9IHBhcnNlSW50KGRvY3VtZW50LmJvZHkuc3R5bGUudG9wLCAxMCk7XG4gICAgICByZW1vdmVDbGFzcyhkb2N1bWVudC5ib2R5LCBzd2FsQ2xhc3Nlcy5pb3NmaXgpO1xuICAgICAgZG9jdW1lbnQuYm9keS5zdHlsZS50b3AgPSAnJztcbiAgICAgIGRvY3VtZW50LmJvZHkuc2Nyb2xsVG9wID0gb2Zmc2V0ICogLTE7XG4gICAgfVxuICB9O1xuXG4gIGNvbnN0IGZpeFNjcm9sbGJhciA9ICgpID0+IHtcbiAgICAvLyBmb3IgcXVldWVzLCBkbyBub3QgZG8gdGhpcyBtb3JlIHRoYW4gb25jZVxuICAgIGlmIChzdGF0ZXMucHJldmlvdXNCb2R5UGFkZGluZyAhPT0gbnVsbCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICAvLyBpZiB0aGUgYm9keSBoYXMgb3ZlcmZsb3dcbiAgICBpZiAoZG9jdW1lbnQuYm9keS5zY3JvbGxIZWlnaHQgPiB3aW5kb3cuaW5uZXJIZWlnaHQpIHtcbiAgICAgIC8vIGFkZCBwYWRkaW5nIHNvIHRoZSBjb250ZW50IGRvZXNuJ3Qgc2hpZnQgYWZ0ZXIgcmVtb3ZhbCBvZiBzY3JvbGxiYXJcbiAgICAgIHN0YXRlcy5wcmV2aW91c0JvZHlQYWRkaW5nID0gcGFyc2VJbnQod2luZG93LmdldENvbXB1dGVkU3R5bGUoZG9jdW1lbnQuYm9keSkuZ2V0UHJvcGVydHlWYWx1ZSgncGFkZGluZy1yaWdodCcpKTtcbiAgICAgIGRvY3VtZW50LmJvZHkuc3R5bGUucGFkZGluZ1JpZ2h0ID0gYCR7c3RhdGVzLnByZXZpb3VzQm9keVBhZGRpbmcgKyBtZWFzdXJlU2Nyb2xsYmFyKCl9cHhgO1xuICAgIH1cbiAgfTtcbiAgY29uc3QgdW5kb1Njcm9sbGJhciA9ICgpID0+IHtcbiAgICBpZiAoc3RhdGVzLnByZXZpb3VzQm9keVBhZGRpbmcgIT09IG51bGwpIHtcbiAgICAgIGRvY3VtZW50LmJvZHkuc3R5bGUucGFkZGluZ1JpZ2h0ID0gYCR7c3RhdGVzLnByZXZpb3VzQm9keVBhZGRpbmd9cHhgO1xuICAgICAgc3RhdGVzLnByZXZpb3VzQm9keVBhZGRpbmcgPSBudWxsO1xuICAgIH1cbiAgfTtcblxuICAvKlxuICAgKiBJbnN0YW5jZSBtZXRob2QgdG8gY2xvc2Ugc3dlZXRBbGVydFxuICAgKi9cblxuICBmdW5jdGlvbiByZW1vdmVQb3B1cEFuZFJlc2V0U3RhdGUoaW5zdGFuY2UsIGNvbnRhaW5lciwgcmV0dXJuRm9jdXMsIGRpZENsb3NlKSB7XG4gICAgaWYgKGlzVG9hc3QoKSkge1xuICAgICAgdHJpZ2dlckRpZENsb3NlQW5kRGlzcG9zZShpbnN0YW5jZSwgZGlkQ2xvc2UpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXN0b3JlQWN0aXZlRWxlbWVudChyZXR1cm5Gb2N1cykudGhlbigoKSA9PiB0cmlnZ2VyRGlkQ2xvc2VBbmREaXNwb3NlKGluc3RhbmNlLCBkaWRDbG9zZSkpO1xuICAgICAgcmVtb3ZlS2V5ZG93bkhhbmRsZXIoZ2xvYmFsU3RhdGUpO1xuICAgIH1cbiAgICBjb25zdCBpc1NhZmFyaSA9IC9eKCg/IWNocm9tZXxhbmRyb2lkKS4pKnNhZmFyaS9pLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCk7XG4gICAgLy8gd29ya2Fyb3VuZCBmb3IgIzIwODhcbiAgICAvLyBmb3Igc29tZSByZWFzb24gcmVtb3ZpbmcgdGhlIGNvbnRhaW5lciBpbiBTYWZhcmkgd2lsbCBzY3JvbGwgdGhlIGRvY3VtZW50IHRvIGJvdHRvbVxuICAgIGlmIChpc1NhZmFyaSkge1xuICAgICAgY29udGFpbmVyLnNldEF0dHJpYnV0ZSgnc3R5bGUnLCAnZGlzcGxheTpub25lICFpbXBvcnRhbnQnKTtcbiAgICAgIGNvbnRhaW5lci5yZW1vdmVBdHRyaWJ1dGUoJ2NsYXNzJyk7XG4gICAgICBjb250YWluZXIuaW5uZXJIVE1MID0gJyc7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnRhaW5lci5yZW1vdmUoKTtcbiAgICB9XG4gICAgaWYgKGlzTW9kYWwoKSkge1xuICAgICAgdW5kb1Njcm9sbGJhcigpO1xuICAgICAgdW5kb0lPU2ZpeCgpO1xuICAgICAgdW5zZXRBcmlhSGlkZGVuKCk7XG4gICAgfVxuICAgIHJlbW92ZUJvZHlDbGFzc2VzKCk7XG4gIH1cbiAgZnVuY3Rpb24gcmVtb3ZlQm9keUNsYXNzZXMoKSB7XG4gICAgcmVtb3ZlQ2xhc3MoW2RvY3VtZW50LmRvY3VtZW50RWxlbWVudCwgZG9jdW1lbnQuYm9keV0sIFtzd2FsQ2xhc3Nlcy5zaG93biwgc3dhbENsYXNzZXNbJ2hlaWdodC1hdXRvJ10sIHN3YWxDbGFzc2VzWyduby1iYWNrZHJvcCddLCBzd2FsQ2xhc3Nlc1sndG9hc3Qtc2hvd24nXV0pO1xuICB9XG4gIGZ1bmN0aW9uIGNsb3NlKHJlc29sdmVWYWx1ZSkge1xuICAgIHJlc29sdmVWYWx1ZSA9IHByZXBhcmVSZXNvbHZlVmFsdWUocmVzb2x2ZVZhbHVlKTtcbiAgICBjb25zdCBzd2FsUHJvbWlzZVJlc29sdmUgPSBwcml2YXRlTWV0aG9kcy5zd2FsUHJvbWlzZVJlc29sdmUuZ2V0KHRoaXMpO1xuICAgIGNvbnN0IGRpZENsb3NlID0gdHJpZ2dlckNsb3NlUG9wdXAodGhpcyk7XG4gICAgaWYgKHRoaXMuaXNBd2FpdGluZ1Byb21pc2UoKSkge1xuICAgICAgLy8gQSBzd2FsIGF3YWl0aW5nIGZvciBhIHByb21pc2UgKGFmdGVyIGEgY2xpY2sgb24gQ29uZmlybSBvciBEZW55KSBjYW5ub3QgYmUgZGlzbWlzc2VkIGFueW1vcmUgIzIzMzVcbiAgICAgIGlmICghcmVzb2x2ZVZhbHVlLmlzRGlzbWlzc2VkKSB7XG4gICAgICAgIGhhbmRsZUF3YWl0aW5nUHJvbWlzZSh0aGlzKTtcbiAgICAgICAgc3dhbFByb21pc2VSZXNvbHZlKHJlc29sdmVWYWx1ZSk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChkaWRDbG9zZSkge1xuICAgICAgLy8gUmVzb2x2ZSBTd2FsIHByb21pc2VcbiAgICAgIHN3YWxQcm9taXNlUmVzb2x2ZShyZXNvbHZlVmFsdWUpO1xuICAgIH1cbiAgfVxuICBmdW5jdGlvbiBpc0F3YWl0aW5nUHJvbWlzZSgpIHtcbiAgICByZXR1cm4gISFwcml2YXRlUHJvcHMuYXdhaXRpbmdQcm9taXNlLmdldCh0aGlzKTtcbiAgfVxuICBjb25zdCB0cmlnZ2VyQ2xvc2VQb3B1cCA9IGluc3RhbmNlID0+IHtcbiAgICBjb25zdCBwb3B1cCA9IGdldFBvcHVwKCk7XG4gICAgaWYgKCFwb3B1cCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBjb25zdCBpbm5lclBhcmFtcyA9IHByaXZhdGVQcm9wcy5pbm5lclBhcmFtcy5nZXQoaW5zdGFuY2UpO1xuICAgIGlmICghaW5uZXJQYXJhbXMgfHwgaGFzQ2xhc3MocG9wdXAsIGlubmVyUGFyYW1zLmhpZGVDbGFzcy5wb3B1cCkpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgcmVtb3ZlQ2xhc3MocG9wdXAsIGlubmVyUGFyYW1zLnNob3dDbGFzcy5wb3B1cCk7XG4gICAgYWRkQ2xhc3MocG9wdXAsIGlubmVyUGFyYW1zLmhpZGVDbGFzcy5wb3B1cCk7XG4gICAgY29uc3QgYmFja2Ryb3AgPSBnZXRDb250YWluZXIoKTtcbiAgICByZW1vdmVDbGFzcyhiYWNrZHJvcCwgaW5uZXJQYXJhbXMuc2hvd0NsYXNzLmJhY2tkcm9wKTtcbiAgICBhZGRDbGFzcyhiYWNrZHJvcCwgaW5uZXJQYXJhbXMuaGlkZUNsYXNzLmJhY2tkcm9wKTtcbiAgICBoYW5kbGVQb3B1cEFuaW1hdGlvbihpbnN0YW5jZSwgcG9wdXAsIGlubmVyUGFyYW1zKTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfTtcbiAgZnVuY3Rpb24gcmVqZWN0UHJvbWlzZShlcnJvcikge1xuICAgIGNvbnN0IHJlamVjdFByb21pc2UgPSBwcml2YXRlTWV0aG9kcy5zd2FsUHJvbWlzZVJlamVjdC5nZXQodGhpcyk7XG4gICAgaGFuZGxlQXdhaXRpbmdQcm9taXNlKHRoaXMpO1xuICAgIGlmIChyZWplY3RQcm9taXNlKSB7XG4gICAgICAvLyBSZWplY3QgU3dhbCBwcm9taXNlXG4gICAgICByZWplY3RQcm9taXNlKGVycm9yKTtcbiAgICB9XG4gIH1cbiAgY29uc3QgaGFuZGxlQXdhaXRpbmdQcm9taXNlID0gaW5zdGFuY2UgPT4ge1xuICAgIGlmIChpbnN0YW5jZS5pc0F3YWl0aW5nUHJvbWlzZSgpKSB7XG4gICAgICBwcml2YXRlUHJvcHMuYXdhaXRpbmdQcm9taXNlLmRlbGV0ZShpbnN0YW5jZSk7XG4gICAgICAvLyBUaGUgaW5zdGFuY2UgbWlnaHQgaGF2ZSBiZWVuIHByZXZpb3VzbHkgcGFydGx5IGRlc3Ryb3llZCwgd2UgbXVzdCByZXN1bWUgdGhlIGRlc3Ryb3kgcHJvY2VzcyBpbiB0aGlzIGNhc2UgIzIzMzVcbiAgICAgIGlmICghcHJpdmF0ZVByb3BzLmlubmVyUGFyYW1zLmdldChpbnN0YW5jZSkpIHtcbiAgICAgICAgaW5zdGFuY2UuX2Rlc3Ryb3koKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG4gIGNvbnN0IHByZXBhcmVSZXNvbHZlVmFsdWUgPSByZXNvbHZlVmFsdWUgPT4ge1xuICAgIC8vIFdoZW4gdXNlciBjYWxscyBTd2FsLmNsb3NlKClcbiAgICBpZiAodHlwZW9mIHJlc29sdmVWYWx1ZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGlzQ29uZmlybWVkOiBmYWxzZSxcbiAgICAgICAgaXNEZW5pZWQ6IGZhbHNlLFxuICAgICAgICBpc0Rpc21pc3NlZDogdHJ1ZVxuICAgICAgfTtcbiAgICB9XG4gICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oe1xuICAgICAgaXNDb25maXJtZWQ6IGZhbHNlLFxuICAgICAgaXNEZW5pZWQ6IGZhbHNlLFxuICAgICAgaXNEaXNtaXNzZWQ6IGZhbHNlXG4gICAgfSwgcmVzb2x2ZVZhbHVlKTtcbiAgfTtcbiAgY29uc3QgaGFuZGxlUG9wdXBBbmltYXRpb24gPSAoaW5zdGFuY2UsIHBvcHVwLCBpbm5lclBhcmFtcykgPT4ge1xuICAgIGNvbnN0IGNvbnRhaW5lciA9IGdldENvbnRhaW5lcigpO1xuICAgIC8vIElmIGFuaW1hdGlvbiBpcyBzdXBwb3J0ZWQsIGFuaW1hdGVcbiAgICBjb25zdCBhbmltYXRpb25Jc1N1cHBvcnRlZCA9IGFuaW1hdGlvbkVuZEV2ZW50ICYmIGhhc0Nzc0FuaW1hdGlvbihwb3B1cCk7XG4gICAgaWYgKHR5cGVvZiBpbm5lclBhcmFtcy53aWxsQ2xvc2UgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGlubmVyUGFyYW1zLndpbGxDbG9zZShwb3B1cCk7XG4gICAgfVxuICAgIGlmIChhbmltYXRpb25Jc1N1cHBvcnRlZCkge1xuICAgICAgYW5pbWF0ZVBvcHVwKGluc3RhbmNlLCBwb3B1cCwgY29udGFpbmVyLCBpbm5lclBhcmFtcy5yZXR1cm5Gb2N1cywgaW5uZXJQYXJhbXMuZGlkQ2xvc2UpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBPdGhlcndpc2UsIHJlbW92ZSBpbW1lZGlhdGVseVxuICAgICAgcmVtb3ZlUG9wdXBBbmRSZXNldFN0YXRlKGluc3RhbmNlLCBjb250YWluZXIsIGlubmVyUGFyYW1zLnJldHVybkZvY3VzLCBpbm5lclBhcmFtcy5kaWRDbG9zZSk7XG4gICAgfVxuICB9O1xuICBjb25zdCBhbmltYXRlUG9wdXAgPSAoaW5zdGFuY2UsIHBvcHVwLCBjb250YWluZXIsIHJldHVybkZvY3VzLCBkaWRDbG9zZSkgPT4ge1xuICAgIGdsb2JhbFN0YXRlLnN3YWxDbG9zZUV2ZW50RmluaXNoZWRDYWxsYmFjayA9IHJlbW92ZVBvcHVwQW5kUmVzZXRTdGF0ZS5iaW5kKG51bGwsIGluc3RhbmNlLCBjb250YWluZXIsIHJldHVybkZvY3VzLCBkaWRDbG9zZSk7XG4gICAgcG9wdXAuYWRkRXZlbnRMaXN0ZW5lcihhbmltYXRpb25FbmRFdmVudCwgZnVuY3Rpb24gKGUpIHtcbiAgICAgIGlmIChlLnRhcmdldCA9PT0gcG9wdXApIHtcbiAgICAgICAgZ2xvYmFsU3RhdGUuc3dhbENsb3NlRXZlbnRGaW5pc2hlZENhbGxiYWNrKCk7XG4gICAgICAgIGRlbGV0ZSBnbG9iYWxTdGF0ZS5zd2FsQ2xvc2VFdmVudEZpbmlzaGVkQ2FsbGJhY2s7XG4gICAgICB9XG4gICAgfSk7XG4gIH07XG4gIGNvbnN0IHRyaWdnZXJEaWRDbG9zZUFuZERpc3Bvc2UgPSAoaW5zdGFuY2UsIGRpZENsb3NlKSA9PiB7XG4gICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICBpZiAodHlwZW9mIGRpZENsb3NlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIGRpZENsb3NlLmJpbmQoaW5zdGFuY2UucGFyYW1zKSgpO1xuICAgICAgfVxuICAgICAgaW5zdGFuY2UuX2Rlc3Ryb3koKTtcbiAgICB9KTtcbiAgfTtcblxuICAvKipcbiAgICogQHBhcmFtIHtTd2VldEFsZXJ0Mn0gaW5zdGFuY2VcbiAgICogQHBhcmFtIHtzdHJpbmdbXX0gYnV0dG9uc1xuICAgKiBAcGFyYW0ge2Jvb2xlYW59IGRpc2FibGVkXG4gICAqL1xuICBmdW5jdGlvbiBzZXRCdXR0b25zRGlzYWJsZWQoaW5zdGFuY2UsIGJ1dHRvbnMsIGRpc2FibGVkKSB7XG4gICAgY29uc3QgZG9tQ2FjaGUgPSBwcml2YXRlUHJvcHMuZG9tQ2FjaGUuZ2V0KGluc3RhbmNlKTtcbiAgICBidXR0b25zLmZvckVhY2goYnV0dG9uID0+IHtcbiAgICAgIGRvbUNhY2hlW2J1dHRvbl0uZGlzYWJsZWQgPSBkaXNhYmxlZDtcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge0hUTUxJbnB1dEVsZW1lbnR9IGlucHV0XG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gZGlzYWJsZWRcbiAgICovXG4gIGZ1bmN0aW9uIHNldElucHV0RGlzYWJsZWQoaW5wdXQsIGRpc2FibGVkKSB7XG4gICAgaWYgKCFpbnB1dCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoaW5wdXQudHlwZSA9PT0gJ3JhZGlvJykge1xuICAgICAgY29uc3QgcmFkaW9zQ29udGFpbmVyID0gaW5wdXQucGFyZW50Tm9kZS5wYXJlbnROb2RlO1xuICAgICAgY29uc3QgcmFkaW9zID0gcmFkaW9zQ29udGFpbmVyLnF1ZXJ5U2VsZWN0b3JBbGwoJ2lucHV0Jyk7XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHJhZGlvcy5sZW5ndGg7IGkrKykge1xuICAgICAgICByYWRpb3NbaV0uZGlzYWJsZWQgPSBkaXNhYmxlZDtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgaW5wdXQuZGlzYWJsZWQgPSBkaXNhYmxlZDtcbiAgICB9XG4gIH1cbiAgZnVuY3Rpb24gZW5hYmxlQnV0dG9ucygpIHtcbiAgICBzZXRCdXR0b25zRGlzYWJsZWQodGhpcywgWydjb25maXJtQnV0dG9uJywgJ2RlbnlCdXR0b24nLCAnY2FuY2VsQnV0dG9uJ10sIGZhbHNlKTtcbiAgfVxuICBmdW5jdGlvbiBkaXNhYmxlQnV0dG9ucygpIHtcbiAgICBzZXRCdXR0b25zRGlzYWJsZWQodGhpcywgWydjb25maXJtQnV0dG9uJywgJ2RlbnlCdXR0b24nLCAnY2FuY2VsQnV0dG9uJ10sIHRydWUpO1xuICB9XG4gIGZ1bmN0aW9uIGVuYWJsZUlucHV0KCkge1xuICAgIHNldElucHV0RGlzYWJsZWQodGhpcy5nZXRJbnB1dCgpLCBmYWxzZSk7XG4gIH1cbiAgZnVuY3Rpb24gZGlzYWJsZUlucHV0KCkge1xuICAgIHNldElucHV0RGlzYWJsZWQodGhpcy5nZXRJbnB1dCgpLCB0cnVlKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTaG93IGJsb2NrIHdpdGggdmFsaWRhdGlvbiBtZXNzYWdlXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBlcnJvclxuICAgKi9cbiAgZnVuY3Rpb24gc2hvd1ZhbGlkYXRpb25NZXNzYWdlKGVycm9yKSB7XG4gICAgY29uc3QgZG9tQ2FjaGUgPSBwcml2YXRlUHJvcHMuZG9tQ2FjaGUuZ2V0KHRoaXMpO1xuICAgIGNvbnN0IHBhcmFtcyA9IHByaXZhdGVQcm9wcy5pbm5lclBhcmFtcy5nZXQodGhpcyk7XG4gICAgc2V0SW5uZXJIdG1sKGRvbUNhY2hlLnZhbGlkYXRpb25NZXNzYWdlLCBlcnJvcik7XG4gICAgZG9tQ2FjaGUudmFsaWRhdGlvbk1lc3NhZ2UuY2xhc3NOYW1lID0gc3dhbENsYXNzZXNbJ3ZhbGlkYXRpb24tbWVzc2FnZSddO1xuICAgIGlmIChwYXJhbXMuY3VzdG9tQ2xhc3MgJiYgcGFyYW1zLmN1c3RvbUNsYXNzLnZhbGlkYXRpb25NZXNzYWdlKSB7XG4gICAgICBhZGRDbGFzcyhkb21DYWNoZS52YWxpZGF0aW9uTWVzc2FnZSwgcGFyYW1zLmN1c3RvbUNsYXNzLnZhbGlkYXRpb25NZXNzYWdlKTtcbiAgICB9XG4gICAgc2hvdyhkb21DYWNoZS52YWxpZGF0aW9uTWVzc2FnZSk7XG4gICAgY29uc3QgaW5wdXQgPSB0aGlzLmdldElucHV0KCk7XG4gICAgaWYgKGlucHV0KSB7XG4gICAgICBpbnB1dC5zZXRBdHRyaWJ1dGUoJ2FyaWEtaW52YWxpZCcsIHRydWUpO1xuICAgICAgaW5wdXQuc2V0QXR0cmlidXRlKCdhcmlhLWRlc2NyaWJlZGJ5Jywgc3dhbENsYXNzZXNbJ3ZhbGlkYXRpb24tbWVzc2FnZSddKTtcbiAgICAgIGZvY3VzSW5wdXQoaW5wdXQpO1xuICAgICAgYWRkQ2xhc3MoaW5wdXQsIHN3YWxDbGFzc2VzLmlucHV0ZXJyb3IpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBIaWRlIGJsb2NrIHdpdGggdmFsaWRhdGlvbiBtZXNzYWdlXG4gICAqL1xuICBmdW5jdGlvbiByZXNldFZhbGlkYXRpb25NZXNzYWdlKCkge1xuICAgIGNvbnN0IGRvbUNhY2hlID0gcHJpdmF0ZVByb3BzLmRvbUNhY2hlLmdldCh0aGlzKTtcbiAgICBpZiAoZG9tQ2FjaGUudmFsaWRhdGlvbk1lc3NhZ2UpIHtcbiAgICAgIGhpZGUoZG9tQ2FjaGUudmFsaWRhdGlvbk1lc3NhZ2UpO1xuICAgIH1cbiAgICBjb25zdCBpbnB1dCA9IHRoaXMuZ2V0SW5wdXQoKTtcbiAgICBpZiAoaW5wdXQpIHtcbiAgICAgIGlucHV0LnJlbW92ZUF0dHJpYnV0ZSgnYXJpYS1pbnZhbGlkJyk7XG4gICAgICBpbnB1dC5yZW1vdmVBdHRyaWJ1dGUoJ2FyaWEtZGVzY3JpYmVkYnknKTtcbiAgICAgIHJlbW92ZUNsYXNzKGlucHV0LCBzd2FsQ2xhc3Nlcy5pbnB1dGVycm9yKTtcbiAgICB9XG4gIH1cblxuICBjb25zdCBkZWZhdWx0UGFyYW1zID0ge1xuICAgIHRpdGxlOiAnJyxcbiAgICB0aXRsZVRleHQ6ICcnLFxuICAgIHRleHQ6ICcnLFxuICAgIGh0bWw6ICcnLFxuICAgIGZvb3RlcjogJycsXG4gICAgaWNvbjogdW5kZWZpbmVkLFxuICAgIGljb25Db2xvcjogdW5kZWZpbmVkLFxuICAgIGljb25IdG1sOiB1bmRlZmluZWQsXG4gICAgdGVtcGxhdGU6IHVuZGVmaW5lZCxcbiAgICB0b2FzdDogZmFsc2UsXG4gICAgc2hvd0NsYXNzOiB7XG4gICAgICBwb3B1cDogJ3N3YWwyLXNob3cnLFxuICAgICAgYmFja2Ryb3A6ICdzd2FsMi1iYWNrZHJvcC1zaG93JyxcbiAgICAgIGljb246ICdzd2FsMi1pY29uLXNob3cnXG4gICAgfSxcbiAgICBoaWRlQ2xhc3M6IHtcbiAgICAgIHBvcHVwOiAnc3dhbDItaGlkZScsXG4gICAgICBiYWNrZHJvcDogJ3N3YWwyLWJhY2tkcm9wLWhpZGUnLFxuICAgICAgaWNvbjogJ3N3YWwyLWljb24taGlkZSdcbiAgICB9LFxuICAgIGN1c3RvbUNsYXNzOiB7fSxcbiAgICB0YXJnZXQ6ICdib2R5JyxcbiAgICBjb2xvcjogdW5kZWZpbmVkLFxuICAgIGJhY2tkcm9wOiB0cnVlLFxuICAgIGhlaWdodEF1dG86IHRydWUsXG4gICAgYWxsb3dPdXRzaWRlQ2xpY2s6IHRydWUsXG4gICAgYWxsb3dFc2NhcGVLZXk6IHRydWUsXG4gICAgYWxsb3dFbnRlcktleTogdHJ1ZSxcbiAgICBzdG9wS2V5ZG93blByb3BhZ2F0aW9uOiB0cnVlLFxuICAgIGtleWRvd25MaXN0ZW5lckNhcHR1cmU6IGZhbHNlLFxuICAgIHNob3dDb25maXJtQnV0dG9uOiB0cnVlLFxuICAgIHNob3dEZW55QnV0dG9uOiBmYWxzZSxcbiAgICBzaG93Q2FuY2VsQnV0dG9uOiBmYWxzZSxcbiAgICBwcmVDb25maXJtOiB1bmRlZmluZWQsXG4gICAgcHJlRGVueTogdW5kZWZpbmVkLFxuICAgIGNvbmZpcm1CdXR0b25UZXh0OiAnT0snLFxuICAgIGNvbmZpcm1CdXR0b25BcmlhTGFiZWw6ICcnLFxuICAgIGNvbmZpcm1CdXR0b25Db2xvcjogdW5kZWZpbmVkLFxuICAgIGRlbnlCdXR0b25UZXh0OiAnTm8nLFxuICAgIGRlbnlCdXR0b25BcmlhTGFiZWw6ICcnLFxuICAgIGRlbnlCdXR0b25Db2xvcjogdW5kZWZpbmVkLFxuICAgIGNhbmNlbEJ1dHRvblRleHQ6ICdDYW5jZWwnLFxuICAgIGNhbmNlbEJ1dHRvbkFyaWFMYWJlbDogJycsXG4gICAgY2FuY2VsQnV0dG9uQ29sb3I6IHVuZGVmaW5lZCxcbiAgICBidXR0b25zU3R5bGluZzogdHJ1ZSxcbiAgICByZXZlcnNlQnV0dG9uczogZmFsc2UsXG4gICAgZm9jdXNDb25maXJtOiB0cnVlLFxuICAgIGZvY3VzRGVueTogZmFsc2UsXG4gICAgZm9jdXNDYW5jZWw6IGZhbHNlLFxuICAgIHJldHVybkZvY3VzOiB0cnVlLFxuICAgIHNob3dDbG9zZUJ1dHRvbjogZmFsc2UsXG4gICAgY2xvc2VCdXR0b25IdG1sOiAnJnRpbWVzOycsXG4gICAgY2xvc2VCdXR0b25BcmlhTGFiZWw6ICdDbG9zZSB0aGlzIGRpYWxvZycsXG4gICAgbG9hZGVySHRtbDogJycsXG4gICAgc2hvd0xvYWRlck9uQ29uZmlybTogZmFsc2UsXG4gICAgc2hvd0xvYWRlck9uRGVueTogZmFsc2UsXG4gICAgaW1hZ2VVcmw6IHVuZGVmaW5lZCxcbiAgICBpbWFnZVdpZHRoOiB1bmRlZmluZWQsXG4gICAgaW1hZ2VIZWlnaHQ6IHVuZGVmaW5lZCxcbiAgICBpbWFnZUFsdDogJycsXG4gICAgdGltZXI6IHVuZGVmaW5lZCxcbiAgICB0aW1lclByb2dyZXNzQmFyOiBmYWxzZSxcbiAgICB3aWR0aDogdW5kZWZpbmVkLFxuICAgIHBhZGRpbmc6IHVuZGVmaW5lZCxcbiAgICBiYWNrZ3JvdW5kOiB1bmRlZmluZWQsXG4gICAgaW5wdXQ6IHVuZGVmaW5lZCxcbiAgICBpbnB1dFBsYWNlaG9sZGVyOiAnJyxcbiAgICBpbnB1dExhYmVsOiAnJyxcbiAgICBpbnB1dFZhbHVlOiAnJyxcbiAgICBpbnB1dE9wdGlvbnM6IHt9LFxuICAgIGlucHV0QXV0b0ZvY3VzOiB0cnVlLFxuICAgIGlucHV0QXV0b1RyaW06IHRydWUsXG4gICAgaW5wdXRBdHRyaWJ1dGVzOiB7fSxcbiAgICBpbnB1dFZhbGlkYXRvcjogdW5kZWZpbmVkLFxuICAgIHJldHVybklucHV0VmFsdWVPbkRlbnk6IGZhbHNlLFxuICAgIHZhbGlkYXRpb25NZXNzYWdlOiB1bmRlZmluZWQsXG4gICAgZ3JvdzogZmFsc2UsXG4gICAgcG9zaXRpb246ICdjZW50ZXInLFxuICAgIHByb2dyZXNzU3RlcHM6IFtdLFxuICAgIGN1cnJlbnRQcm9ncmVzc1N0ZXA6IHVuZGVmaW5lZCxcbiAgICBwcm9ncmVzc1N0ZXBzRGlzdGFuY2U6IHVuZGVmaW5lZCxcbiAgICB3aWxsT3BlbjogdW5kZWZpbmVkLFxuICAgIGRpZE9wZW46IHVuZGVmaW5lZCxcbiAgICBkaWRSZW5kZXI6IHVuZGVmaW5lZCxcbiAgICB3aWxsQ2xvc2U6IHVuZGVmaW5lZCxcbiAgICBkaWRDbG9zZTogdW5kZWZpbmVkLFxuICAgIGRpZERlc3Ryb3k6IHVuZGVmaW5lZCxcbiAgICBzY3JvbGxiYXJQYWRkaW5nOiB0cnVlXG4gIH07XG4gIGNvbnN0IHVwZGF0YWJsZVBhcmFtcyA9IFsnYWxsb3dFc2NhcGVLZXknLCAnYWxsb3dPdXRzaWRlQ2xpY2snLCAnYmFja2dyb3VuZCcsICdidXR0b25zU3R5bGluZycsICdjYW5jZWxCdXR0b25BcmlhTGFiZWwnLCAnY2FuY2VsQnV0dG9uQ29sb3InLCAnY2FuY2VsQnV0dG9uVGV4dCcsICdjbG9zZUJ1dHRvbkFyaWFMYWJlbCcsICdjbG9zZUJ1dHRvbkh0bWwnLCAnY29sb3InLCAnY29uZmlybUJ1dHRvbkFyaWFMYWJlbCcsICdjb25maXJtQnV0dG9uQ29sb3InLCAnY29uZmlybUJ1dHRvblRleHQnLCAnY3VycmVudFByb2dyZXNzU3RlcCcsICdjdXN0b21DbGFzcycsICdkZW55QnV0dG9uQXJpYUxhYmVsJywgJ2RlbnlCdXR0b25Db2xvcicsICdkZW55QnV0dG9uVGV4dCcsICdkaWRDbG9zZScsICdkaWREZXN0cm95JywgJ2Zvb3RlcicsICdoaWRlQ2xhc3MnLCAnaHRtbCcsICdpY29uJywgJ2ljb25Db2xvcicsICdpY29uSHRtbCcsICdpbWFnZUFsdCcsICdpbWFnZUhlaWdodCcsICdpbWFnZVVybCcsICdpbWFnZVdpZHRoJywgJ3ByZUNvbmZpcm0nLCAncHJlRGVueScsICdwcm9ncmVzc1N0ZXBzJywgJ3JldHVybkZvY3VzJywgJ3JldmVyc2VCdXR0b25zJywgJ3Nob3dDYW5jZWxCdXR0b24nLCAnc2hvd0Nsb3NlQnV0dG9uJywgJ3Nob3dDb25maXJtQnV0dG9uJywgJ3Nob3dEZW55QnV0dG9uJywgJ3RleHQnLCAndGl0bGUnLCAndGl0bGVUZXh0JywgJ3dpbGxDbG9zZSddO1xuICBjb25zdCBkZXByZWNhdGVkUGFyYW1zID0ge307XG4gIGNvbnN0IHRvYXN0SW5jb21wYXRpYmxlUGFyYW1zID0gWydhbGxvd091dHNpZGVDbGljaycsICdhbGxvd0VudGVyS2V5JywgJ2JhY2tkcm9wJywgJ2ZvY3VzQ29uZmlybScsICdmb2N1c0RlbnknLCAnZm9jdXNDYW5jZWwnLCAncmV0dXJuRm9jdXMnLCAnaGVpZ2h0QXV0bycsICdrZXlkb3duTGlzdGVuZXJDYXB0dXJlJ107XG5cbiAgLyoqXG4gICAqIElzIHZhbGlkIHBhcmFtZXRlclxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gcGFyYW1OYW1lXG4gICAqIEByZXR1cm5zIHtib29sZWFufVxuICAgKi9cbiAgY29uc3QgaXNWYWxpZFBhcmFtZXRlciA9IHBhcmFtTmFtZSA9PiB7XG4gICAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChkZWZhdWx0UGFyYW1zLCBwYXJhbU5hbWUpO1xuICB9O1xuXG4gIC8qKlxuICAgKiBJcyB2YWxpZCBwYXJhbWV0ZXIgZm9yIFN3YWwudXBkYXRlKCkgbWV0aG9kXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBwYXJhbU5hbWVcbiAgICogQHJldHVybnMge2Jvb2xlYW59XG4gICAqL1xuICBjb25zdCBpc1VwZGF0YWJsZVBhcmFtZXRlciA9IHBhcmFtTmFtZSA9PiB7XG4gICAgcmV0dXJuIHVwZGF0YWJsZVBhcmFtcy5pbmRleE9mKHBhcmFtTmFtZSkgIT09IC0xO1xuICB9O1xuXG4gIC8qKlxuICAgKiBJcyBkZXByZWNhdGVkIHBhcmFtZXRlclxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gcGFyYW1OYW1lXG4gICAqIEByZXR1cm5zIHtzdHJpbmcgfCB1bmRlZmluZWR9XG4gICAqL1xuICBjb25zdCBpc0RlcHJlY2F0ZWRQYXJhbWV0ZXIgPSBwYXJhbU5hbWUgPT4ge1xuICAgIHJldHVybiBkZXByZWNhdGVkUGFyYW1zW3BhcmFtTmFtZV07XG4gIH07XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBwYXJhbVxuICAgKi9cbiAgY29uc3QgY2hlY2tJZlBhcmFtSXNWYWxpZCA9IHBhcmFtID0+IHtcbiAgICBpZiAoIWlzVmFsaWRQYXJhbWV0ZXIocGFyYW0pKSB7XG4gICAgICB3YXJuKGBVbmtub3duIHBhcmFtZXRlciBcIiR7cGFyYW19XCJgKTtcbiAgICB9XG4gIH07XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBwYXJhbVxuICAgKi9cbiAgY29uc3QgY2hlY2tJZlRvYXN0UGFyYW1Jc1ZhbGlkID0gcGFyYW0gPT4ge1xuICAgIGlmICh0b2FzdEluY29tcGF0aWJsZVBhcmFtcy5pbmNsdWRlcyhwYXJhbSkpIHtcbiAgICAgIHdhcm4oYFRoZSBwYXJhbWV0ZXIgXCIke3BhcmFtfVwiIGlzIGluY29tcGF0aWJsZSB3aXRoIHRvYXN0c2ApO1xuICAgIH1cbiAgfTtcblxuICAvKipcbiAgICogQHBhcmFtIHtzdHJpbmd9IHBhcmFtXG4gICAqL1xuICBjb25zdCBjaGVja0lmUGFyYW1Jc0RlcHJlY2F0ZWQgPSBwYXJhbSA9PiB7XG4gICAgaWYgKGlzRGVwcmVjYXRlZFBhcmFtZXRlcihwYXJhbSkpIHtcbiAgICAgIHdhcm5BYm91dERlcHJlY2F0aW9uKHBhcmFtLCBpc0RlcHJlY2F0ZWRQYXJhbWV0ZXIocGFyYW0pKTtcbiAgICB9XG4gIH07XG5cbiAgLyoqXG4gICAqIFNob3cgcmVsZXZhbnQgd2FybmluZ3MgZm9yIGdpdmVuIHBhcmFtc1xuICAgKlxuICAgKiBAcGFyYW0ge1N3ZWV0QWxlcnRPcHRpb25zfSBwYXJhbXNcbiAgICovXG4gIGNvbnN0IHNob3dXYXJuaW5nc0ZvclBhcmFtcyA9IHBhcmFtcyA9PiB7XG4gICAgaWYgKHBhcmFtcy5iYWNrZHJvcCA9PT0gZmFsc2UgJiYgcGFyYW1zLmFsbG93T3V0c2lkZUNsaWNrKSB7XG4gICAgICB3YXJuKCdcImFsbG93T3V0c2lkZUNsaWNrXCIgcGFyYW1ldGVyIHJlcXVpcmVzIGBiYWNrZHJvcGAgcGFyYW1ldGVyIHRvIGJlIHNldCB0byBgdHJ1ZWAnKTtcbiAgICB9XG4gICAgZm9yIChjb25zdCBwYXJhbSBpbiBwYXJhbXMpIHtcbiAgICAgIGNoZWNrSWZQYXJhbUlzVmFsaWQocGFyYW0pO1xuICAgICAgaWYgKHBhcmFtcy50b2FzdCkge1xuICAgICAgICBjaGVja0lmVG9hc3RQYXJhbUlzVmFsaWQocGFyYW0pO1xuICAgICAgfVxuICAgICAgY2hlY2tJZlBhcmFtSXNEZXByZWNhdGVkKHBhcmFtKTtcbiAgICB9XG4gIH07XG5cbiAgLyoqXG4gICAqIFVwZGF0ZXMgcG9wdXAgcGFyYW1ldGVycy5cbiAgICpcbiAgICogQHBhcmFtIHtTd2VldEFsZXJ0T3B0aW9uc30gcGFyYW1zXG4gICAqL1xuICBmdW5jdGlvbiB1cGRhdGUocGFyYW1zKSB7XG4gICAgY29uc3QgcG9wdXAgPSBnZXRQb3B1cCgpO1xuICAgIGNvbnN0IGlubmVyUGFyYW1zID0gcHJpdmF0ZVByb3BzLmlubmVyUGFyYW1zLmdldCh0aGlzKTtcbiAgICBpZiAoIXBvcHVwIHx8IGhhc0NsYXNzKHBvcHVwLCBpbm5lclBhcmFtcy5oaWRlQ2xhc3MucG9wdXApKSB7XG4gICAgICB3YXJuKGBZb3UncmUgdHJ5aW5nIHRvIHVwZGF0ZSB0aGUgY2xvc2VkIG9yIGNsb3NpbmcgcG9wdXAsIHRoYXQgd29uJ3Qgd29yay4gVXNlIHRoZSB1cGRhdGUoKSBtZXRob2QgaW4gcHJlQ29uZmlybSBwYXJhbWV0ZXIgb3Igc2hvdyBhIG5ldyBwb3B1cC5gKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3QgdmFsaWRVcGRhdGFibGVQYXJhbXMgPSBmaWx0ZXJWYWxpZFBhcmFtcyhwYXJhbXMpO1xuICAgIGNvbnN0IHVwZGF0ZWRQYXJhbXMgPSBPYmplY3QuYXNzaWduKHt9LCBpbm5lclBhcmFtcywgdmFsaWRVcGRhdGFibGVQYXJhbXMpO1xuICAgIHJlbmRlcih0aGlzLCB1cGRhdGVkUGFyYW1zKTtcbiAgICBwcml2YXRlUHJvcHMuaW5uZXJQYXJhbXMuc2V0KHRoaXMsIHVwZGF0ZWRQYXJhbXMpO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHRoaXMsIHtcbiAgICAgIHBhcmFtczoge1xuICAgICAgICB2YWx1ZTogT2JqZWN0LmFzc2lnbih7fSwgdGhpcy5wYXJhbXMsIHBhcmFtcyksXG4gICAgICAgIHdyaXRhYmxlOiBmYWxzZSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZVxuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7U3dlZXRBbGVydE9wdGlvbnN9IHBhcmFtc1xuICAgKiBAcmV0dXJucyB7U3dlZXRBbGVydE9wdGlvbnN9XG4gICAqL1xuICBjb25zdCBmaWx0ZXJWYWxpZFBhcmFtcyA9IHBhcmFtcyA9PiB7XG4gICAgY29uc3QgdmFsaWRVcGRhdGFibGVQYXJhbXMgPSB7fTtcbiAgICBPYmplY3Qua2V5cyhwYXJhbXMpLmZvckVhY2gocGFyYW0gPT4ge1xuICAgICAgaWYgKGlzVXBkYXRhYmxlUGFyYW1ldGVyKHBhcmFtKSkge1xuICAgICAgICB2YWxpZFVwZGF0YWJsZVBhcmFtc1twYXJhbV0gPSBwYXJhbXNbcGFyYW1dO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgd2FybihgSW52YWxpZCBwYXJhbWV0ZXIgdG8gdXBkYXRlOiAke3BhcmFtfWApO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiB2YWxpZFVwZGF0YWJsZVBhcmFtcztcbiAgfTtcblxuICAvKipcbiAgICogRGlzcG9zZSB0aGUgY3VycmVudCBTd2VldEFsZXJ0MiBpbnN0YW5jZVxuICAgKi9cbiAgZnVuY3Rpb24gX2Rlc3Ryb3koKSB7XG4gICAgY29uc3QgZG9tQ2FjaGUgPSBwcml2YXRlUHJvcHMuZG9tQ2FjaGUuZ2V0KHRoaXMpO1xuICAgIGNvbnN0IGlubmVyUGFyYW1zID0gcHJpdmF0ZVByb3BzLmlubmVyUGFyYW1zLmdldCh0aGlzKTtcbiAgICBpZiAoIWlubmVyUGFyYW1zKSB7XG4gICAgICBkaXNwb3NlV2Vha01hcHModGhpcyk7IC8vIFRoZSBXZWFrTWFwcyBtaWdodCBoYXZlIGJlZW4gcGFydGx5IGRlc3Ryb3llZCwgd2UgbXVzdCByZWNhbGwgaXQgdG8gZGlzcG9zZSBhbnkgcmVtYWluaW5nIFdlYWtNYXBzICMyMzM1XG4gICAgICByZXR1cm47IC8vIFRoaXMgaW5zdGFuY2UgaGFzIGFscmVhZHkgYmVlbiBkZXN0cm95ZWRcbiAgICB9XG5cbiAgICAvLyBDaGVjayBpZiB0aGVyZSBpcyBhbm90aGVyIFN3YWwgY2xvc2luZ1xuICAgIGlmIChkb21DYWNoZS5wb3B1cCAmJiBnbG9iYWxTdGF0ZS5zd2FsQ2xvc2VFdmVudEZpbmlzaGVkQ2FsbGJhY2spIHtcbiAgICAgIGdsb2JhbFN0YXRlLnN3YWxDbG9zZUV2ZW50RmluaXNoZWRDYWxsYmFjaygpO1xuICAgICAgZGVsZXRlIGdsb2JhbFN0YXRlLnN3YWxDbG9zZUV2ZW50RmluaXNoZWRDYWxsYmFjaztcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBpbm5lclBhcmFtcy5kaWREZXN0cm95ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBpbm5lclBhcmFtcy5kaWREZXN0cm95KCk7XG4gICAgfVxuICAgIGRpc3Bvc2VTd2FsKHRoaXMpO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7U3dlZXRBbGVydDJ9IGluc3RhbmNlXG4gICAqL1xuICBjb25zdCBkaXNwb3NlU3dhbCA9IGluc3RhbmNlID0+IHtcbiAgICBkaXNwb3NlV2Vha01hcHMoaW5zdGFuY2UpO1xuICAgIC8vIFVuc2V0IHRoaXMucGFyYW1zIHNvIEdDIHdpbGwgZGlzcG9zZSBpdCAoIzE1NjkpXG4gICAgLy8gQHRzLWlnbm9yZVxuICAgIGRlbGV0ZSBpbnN0YW5jZS5wYXJhbXM7XG4gICAgLy8gVW5zZXQgZ2xvYmFsU3RhdGUgcHJvcHMgc28gR0Mgd2lsbCBkaXNwb3NlIGdsb2JhbFN0YXRlICgjMTU2OSlcbiAgICBkZWxldGUgZ2xvYmFsU3RhdGUua2V5ZG93bkhhbmRsZXI7XG4gICAgZGVsZXRlIGdsb2JhbFN0YXRlLmtleWRvd25UYXJnZXQ7XG4gICAgLy8gVW5zZXQgY3VycmVudEluc3RhbmNlXG4gICAgZGVsZXRlIGdsb2JhbFN0YXRlLmN1cnJlbnRJbnN0YW5jZTtcbiAgfTtcblxuICAvKipcbiAgICogQHBhcmFtIHtTd2VldEFsZXJ0Mn0gaW5zdGFuY2VcbiAgICovXG4gIGNvbnN0IGRpc3Bvc2VXZWFrTWFwcyA9IGluc3RhbmNlID0+IHtcbiAgICAvLyBJZiB0aGUgY3VycmVudCBpbnN0YW5jZSBpcyBhd2FpdGluZyBhIHByb21pc2UgcmVzdWx0LCB3ZSBrZWVwIHRoZSBwcml2YXRlTWV0aG9kcyB0byBjYWxsIHRoZW0gb25jZSB0aGUgcHJvbWlzZSByZXN1bHQgaXMgcmV0cmlldmVkICMyMzM1XG4gICAgLy8gQHRzLWlnbm9yZVxuICAgIGlmIChpbnN0YW5jZS5pc0F3YWl0aW5nUHJvbWlzZSgpKSB7XG4gICAgICB1bnNldFdlYWtNYXBzKHByaXZhdGVQcm9wcywgaW5zdGFuY2UpO1xuICAgICAgcHJpdmF0ZVByb3BzLmF3YWl0aW5nUHJvbWlzZS5zZXQoaW5zdGFuY2UsIHRydWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICB1bnNldFdlYWtNYXBzKHByaXZhdGVNZXRob2RzLCBpbnN0YW5jZSk7XG4gICAgICB1bnNldFdlYWtNYXBzKHByaXZhdGVQcm9wcywgaW5zdGFuY2UpO1xuICAgIH1cbiAgfTtcblxuICAvKipcbiAgICogQHBhcmFtIHtvYmplY3R9IG9ialxuICAgKiBAcGFyYW0ge1N3ZWV0QWxlcnQyfSBpbnN0YW5jZVxuICAgKi9cbiAgY29uc3QgdW5zZXRXZWFrTWFwcyA9IChvYmosIGluc3RhbmNlKSA9PiB7XG4gICAgZm9yIChjb25zdCBpIGluIG9iaikge1xuICAgICAgb2JqW2ldLmRlbGV0ZShpbnN0YW5jZSk7XG4gICAgfVxuICB9O1xuXG4gIHZhciBpbnN0YW5jZU1ldGhvZHMgPSAvKiNfX1BVUkVfXyovT2JqZWN0LmZyZWV6ZSh7XG4gICAgX19wcm90b19fOiBudWxsLFxuICAgIGhpZGVMb2FkaW5nOiBoaWRlTG9hZGluZyxcbiAgICBkaXNhYmxlTG9hZGluZzogaGlkZUxvYWRpbmcsXG4gICAgZ2V0SW5wdXQ6IGdldElucHV0LFxuICAgIGNsb3NlOiBjbG9zZSxcbiAgICBpc0F3YWl0aW5nUHJvbWlzZTogaXNBd2FpdGluZ1Byb21pc2UsXG4gICAgcmVqZWN0UHJvbWlzZTogcmVqZWN0UHJvbWlzZSxcbiAgICBoYW5kbGVBd2FpdGluZ1Byb21pc2U6IGhhbmRsZUF3YWl0aW5nUHJvbWlzZSxcbiAgICBjbG9zZVBvcHVwOiBjbG9zZSxcbiAgICBjbG9zZU1vZGFsOiBjbG9zZSxcbiAgICBjbG9zZVRvYXN0OiBjbG9zZSxcbiAgICBlbmFibGVCdXR0b25zOiBlbmFibGVCdXR0b25zLFxuICAgIGRpc2FibGVCdXR0b25zOiBkaXNhYmxlQnV0dG9ucyxcbiAgICBlbmFibGVJbnB1dDogZW5hYmxlSW5wdXQsXG4gICAgZGlzYWJsZUlucHV0OiBkaXNhYmxlSW5wdXQsXG4gICAgc2hvd1ZhbGlkYXRpb25NZXNzYWdlOiBzaG93VmFsaWRhdGlvbk1lc3NhZ2UsXG4gICAgcmVzZXRWYWxpZGF0aW9uTWVzc2FnZTogcmVzZXRWYWxpZGF0aW9uTWVzc2FnZSxcbiAgICB1cGRhdGU6IHVwZGF0ZSxcbiAgICBfZGVzdHJveTogX2Rlc3Ryb3lcbiAgfSk7XG5cbiAgLyoqXG4gICAqIFNob3dzIGxvYWRlciAoc3Bpbm5lciksIHRoaXMgaXMgdXNlZnVsIHdpdGggQUpBWCByZXF1ZXN0cy5cbiAgICogQnkgZGVmYXVsdCB0aGUgbG9hZGVyIGJlIHNob3duIGluc3RlYWQgb2YgdGhlIFwiQ29uZmlybVwiIGJ1dHRvbi5cbiAgICpcbiAgICogQHBhcmFtIHtIVE1MQnV0dG9uRWxlbWVudH0gW2J1dHRvblRvUmVwbGFjZV1cbiAgICovXG4gIGNvbnN0IHNob3dMb2FkaW5nID0gYnV0dG9uVG9SZXBsYWNlID0+IHtcbiAgICBsZXQgcG9wdXAgPSBnZXRQb3B1cCgpO1xuICAgIGlmICghcG9wdXApIHtcbiAgICAgIG5ldyBTd2FsKCk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3XG4gICAgfVxuXG4gICAgcG9wdXAgPSBnZXRQb3B1cCgpO1xuICAgIGNvbnN0IGxvYWRlciA9IGdldExvYWRlcigpO1xuICAgIGlmIChpc1RvYXN0KCkpIHtcbiAgICAgIGhpZGUoZ2V0SWNvbigpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVwbGFjZUJ1dHRvbihwb3B1cCwgYnV0dG9uVG9SZXBsYWNlKTtcbiAgICB9XG4gICAgc2hvdyhsb2FkZXIpO1xuICAgIHBvcHVwLnNldEF0dHJpYnV0ZSgnZGF0YS1sb2FkaW5nJywgJ3RydWUnKTtcbiAgICBwb3B1cC5zZXRBdHRyaWJ1dGUoJ2FyaWEtYnVzeScsICd0cnVlJyk7XG4gICAgcG9wdXAuZm9jdXMoKTtcbiAgfTtcblxuICAvKipcbiAgICogQHBhcmFtIHtIVE1MRWxlbWVudH0gcG9wdXBcbiAgICogQHBhcmFtIHtIVE1MQnV0dG9uRWxlbWVudH0gW2J1dHRvblRvUmVwbGFjZV1cbiAgICovXG4gIGNvbnN0IHJlcGxhY2VCdXR0b24gPSAocG9wdXAsIGJ1dHRvblRvUmVwbGFjZSkgPT4ge1xuICAgIGNvbnN0IGFjdGlvbnMgPSBnZXRBY3Rpb25zKCk7XG4gICAgY29uc3QgbG9hZGVyID0gZ2V0TG9hZGVyKCk7XG4gICAgaWYgKCFidXR0b25Ub1JlcGxhY2UgJiYgaXNWaXNpYmxlJDEoZ2V0Q29uZmlybUJ1dHRvbigpKSkge1xuICAgICAgYnV0dG9uVG9SZXBsYWNlID0gZ2V0Q29uZmlybUJ1dHRvbigpO1xuICAgIH1cbiAgICBzaG93KGFjdGlvbnMpO1xuICAgIGlmIChidXR0b25Ub1JlcGxhY2UpIHtcbiAgICAgIGhpZGUoYnV0dG9uVG9SZXBsYWNlKTtcbiAgICAgIGxvYWRlci5zZXRBdHRyaWJ1dGUoJ2RhdGEtYnV0dG9uLXRvLXJlcGxhY2UnLCBidXR0b25Ub1JlcGxhY2UuY2xhc3NOYW1lKTtcbiAgICB9XG4gICAgbG9hZGVyLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKGxvYWRlciwgYnV0dG9uVG9SZXBsYWNlKTtcbiAgICBhZGRDbGFzcyhbcG9wdXAsIGFjdGlvbnNdLCBzd2FsQ2xhc3Nlcy5sb2FkaW5nKTtcbiAgfTtcblxuICAvKipcbiAgICogQHR5cGVkZWYgeyBzdHJpbmcgfCBudW1iZXIgfCBib29sZWFuIH0gSW5wdXRWYWx1ZVxuICAgKi9cblxuICAvKipcbiAgICogQHBhcmFtIHtTd2VldEFsZXJ0Mn0gaW5zdGFuY2VcbiAgICogQHBhcmFtIHtTd2VldEFsZXJ0T3B0aW9uc30gcGFyYW1zXG4gICAqL1xuICBjb25zdCBoYW5kbGVJbnB1dE9wdGlvbnNBbmRWYWx1ZSA9IChpbnN0YW5jZSwgcGFyYW1zKSA9PiB7XG4gICAgaWYgKHBhcmFtcy5pbnB1dCA9PT0gJ3NlbGVjdCcgfHwgcGFyYW1zLmlucHV0ID09PSAncmFkaW8nKSB7XG4gICAgICBoYW5kbGVJbnB1dE9wdGlvbnMoaW5zdGFuY2UsIHBhcmFtcyk7XG4gICAgfSBlbHNlIGlmIChbJ3RleHQnLCAnZW1haWwnLCAnbnVtYmVyJywgJ3RlbCcsICd0ZXh0YXJlYSddLmluY2x1ZGVzKHBhcmFtcy5pbnB1dCkgJiYgKGhhc1RvUHJvbWlzZUZuKHBhcmFtcy5pbnB1dFZhbHVlKSB8fCBpc1Byb21pc2UocGFyYW1zLmlucHV0VmFsdWUpKSkge1xuICAgICAgc2hvd0xvYWRpbmcoZ2V0Q29uZmlybUJ1dHRvbigpKTtcbiAgICAgIGhhbmRsZUlucHV0VmFsdWUoaW5zdGFuY2UsIHBhcmFtcyk7XG4gICAgfVxuICB9O1xuXG4gIC8qKlxuICAgKiBAcGFyYW0ge1N3ZWV0QWxlcnQyfSBpbnN0YW5jZVxuICAgKiBAcGFyYW0ge1N3ZWV0QWxlcnRPcHRpb25zfSBpbm5lclBhcmFtc1xuICAgKiBAcmV0dXJucyB7c3RyaW5nIHwgbnVtYmVyIHwgRmlsZSB8IEZpbGVMaXN0IHwgbnVsbH1cbiAgICovXG4gIGNvbnN0IGdldElucHV0VmFsdWUgPSAoaW5zdGFuY2UsIGlubmVyUGFyYW1zKSA9PiB7XG4gICAgY29uc3QgaW5wdXQgPSBpbnN0YW5jZS5nZXRJbnB1dCgpO1xuICAgIGlmICghaW5wdXQpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICBzd2l0Y2ggKGlubmVyUGFyYW1zLmlucHV0KSB7XG4gICAgICBjYXNlICdjaGVja2JveCc6XG4gICAgICAgIHJldHVybiBnZXRDaGVja2JveFZhbHVlKGlucHV0KTtcbiAgICAgIGNhc2UgJ3JhZGlvJzpcbiAgICAgICAgcmV0dXJuIGdldFJhZGlvVmFsdWUoaW5wdXQpO1xuICAgICAgY2FzZSAnZmlsZSc6XG4gICAgICAgIHJldHVybiBnZXRGaWxlVmFsdWUoaW5wdXQpO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIGlubmVyUGFyYW1zLmlucHV0QXV0b1RyaW0gPyBpbnB1dC52YWx1ZS50cmltKCkgOiBpbnB1dC52YWx1ZTtcbiAgICB9XG4gIH07XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7SFRNTElucHV0RWxlbWVudH0gaW5wdXRcbiAgICogQHJldHVybnMge251bWJlcn1cbiAgICovXG4gIGNvbnN0IGdldENoZWNrYm94VmFsdWUgPSBpbnB1dCA9PiBpbnB1dC5jaGVja2VkID8gMSA6IDA7XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7SFRNTElucHV0RWxlbWVudH0gaW5wdXRcbiAgICogQHJldHVybnMge3N0cmluZyB8IG51bGx9XG4gICAqL1xuICBjb25zdCBnZXRSYWRpb1ZhbHVlID0gaW5wdXQgPT4gaW5wdXQuY2hlY2tlZCA/IGlucHV0LnZhbHVlIDogbnVsbDtcblxuICAvKipcbiAgICogQHBhcmFtIHtIVE1MSW5wdXRFbGVtZW50fSBpbnB1dFxuICAgKiBAcmV0dXJucyB7RmlsZUxpc3QgfCBGaWxlIHwgbnVsbH1cbiAgICovXG4gIGNvbnN0IGdldEZpbGVWYWx1ZSA9IGlucHV0ID0+IGlucHV0LmZpbGVzLmxlbmd0aCA/IGlucHV0LmdldEF0dHJpYnV0ZSgnbXVsdGlwbGUnKSAhPT0gbnVsbCA/IGlucHV0LmZpbGVzIDogaW5wdXQuZmlsZXNbMF0gOiBudWxsO1xuXG4gIC8qKlxuICAgKiBAcGFyYW0ge1N3ZWV0QWxlcnQyfSBpbnN0YW5jZVxuICAgKiBAcGFyYW0ge1N3ZWV0QWxlcnRPcHRpb25zfSBwYXJhbXNcbiAgICovXG4gIGNvbnN0IGhhbmRsZUlucHV0T3B0aW9ucyA9IChpbnN0YW5jZSwgcGFyYW1zKSA9PiB7XG4gICAgY29uc3QgcG9wdXAgPSBnZXRQb3B1cCgpO1xuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7UmVjb3JkPHN0cmluZywgYW55Pn0gaW5wdXRPcHRpb25zXG4gICAgICovXG4gICAgY29uc3QgcHJvY2Vzc0lucHV0T3B0aW9ucyA9IGlucHV0T3B0aW9ucyA9PiB7XG4gICAgICBwb3B1bGF0ZUlucHV0T3B0aW9uc1twYXJhbXMuaW5wdXRdKHBvcHVwLCBmb3JtYXRJbnB1dE9wdGlvbnMoaW5wdXRPcHRpb25zKSwgcGFyYW1zKTtcbiAgICB9O1xuICAgIGlmIChoYXNUb1Byb21pc2VGbihwYXJhbXMuaW5wdXRPcHRpb25zKSB8fCBpc1Byb21pc2UocGFyYW1zLmlucHV0T3B0aW9ucykpIHtcbiAgICAgIHNob3dMb2FkaW5nKGdldENvbmZpcm1CdXR0b24oKSk7XG4gICAgICBhc1Byb21pc2UocGFyYW1zLmlucHV0T3B0aW9ucykudGhlbihpbnB1dE9wdGlvbnMgPT4ge1xuICAgICAgICBpbnN0YW5jZS5oaWRlTG9hZGluZygpO1xuICAgICAgICBwcm9jZXNzSW5wdXRPcHRpb25zKGlucHV0T3B0aW9ucyk7XG4gICAgICB9KTtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBwYXJhbXMuaW5wdXRPcHRpb25zID09PSAnb2JqZWN0Jykge1xuICAgICAgcHJvY2Vzc0lucHV0T3B0aW9ucyhwYXJhbXMuaW5wdXRPcHRpb25zKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZXJyb3IoYFVuZXhwZWN0ZWQgdHlwZSBvZiBpbnB1dE9wdGlvbnMhIEV4cGVjdGVkIG9iamVjdCwgTWFwIG9yIFByb21pc2UsIGdvdCAke3R5cGVvZiBwYXJhbXMuaW5wdXRPcHRpb25zfWApO1xuICAgIH1cbiAgfTtcblxuICAvKipcbiAgICogQHBhcmFtIHtTd2VldEFsZXJ0Mn0gaW5zdGFuY2VcbiAgICogQHBhcmFtIHtTd2VldEFsZXJ0T3B0aW9uc30gcGFyYW1zXG4gICAqL1xuICBjb25zdCBoYW5kbGVJbnB1dFZhbHVlID0gKGluc3RhbmNlLCBwYXJhbXMpID0+IHtcbiAgICBjb25zdCBpbnB1dCA9IGluc3RhbmNlLmdldElucHV0KCk7XG4gICAgaGlkZShpbnB1dCk7XG4gICAgYXNQcm9taXNlKHBhcmFtcy5pbnB1dFZhbHVlKS50aGVuKGlucHV0VmFsdWUgPT4ge1xuICAgICAgaW5wdXQudmFsdWUgPSBwYXJhbXMuaW5wdXQgPT09ICdudW1iZXInID8gYCR7cGFyc2VGbG9hdChpbnB1dFZhbHVlKSB8fCAwfWAgOiBgJHtpbnB1dFZhbHVlfWA7XG4gICAgICBzaG93KGlucHV0KTtcbiAgICAgIGlucHV0LmZvY3VzKCk7XG4gICAgICBpbnN0YW5jZS5oaWRlTG9hZGluZygpO1xuICAgIH0pLmNhdGNoKGVyciA9PiB7XG4gICAgICBlcnJvcihgRXJyb3IgaW4gaW5wdXRWYWx1ZSBwcm9taXNlOiAke2Vycn1gKTtcbiAgICAgIGlucHV0LnZhbHVlID0gJyc7XG4gICAgICBzaG93KGlucHV0KTtcbiAgICAgIGlucHV0LmZvY3VzKCk7XG4gICAgICBpbnN0YW5jZS5oaWRlTG9hZGluZygpO1xuICAgIH0pO1xuICB9O1xuICBjb25zdCBwb3B1bGF0ZUlucHV0T3B0aW9ucyA9IHtcbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBwb3B1cFxuICAgICAqIEBwYXJhbSB7UmVjb3JkPHN0cmluZywgYW55Pn0gaW5wdXRPcHRpb25zXG4gICAgICogQHBhcmFtIHtTd2VldEFsZXJ0T3B0aW9uc30gcGFyYW1zXG4gICAgICovXG4gICAgc2VsZWN0OiAocG9wdXAsIGlucHV0T3B0aW9ucywgcGFyYW1zKSA9PiB7XG4gICAgICBjb25zdCBzZWxlY3QgPSBnZXREaXJlY3RDaGlsZEJ5Q2xhc3MocG9wdXAsIHN3YWxDbGFzc2VzLnNlbGVjdCk7XG4gICAgICAvKipcbiAgICAgICAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IHBhcmVudFxuICAgICAgICogQHBhcmFtIHtzdHJpbmd9IG9wdGlvbkxhYmVsXG4gICAgICAgKiBAcGFyYW0ge3N0cmluZ30gb3B0aW9uVmFsdWVcbiAgICAgICAqL1xuICAgICAgY29uc3QgcmVuZGVyT3B0aW9uID0gKHBhcmVudCwgb3B0aW9uTGFiZWwsIG9wdGlvblZhbHVlKSA9PiB7XG4gICAgICAgIGNvbnN0IG9wdGlvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ29wdGlvbicpO1xuICAgICAgICBvcHRpb24udmFsdWUgPSBvcHRpb25WYWx1ZTtcbiAgICAgICAgc2V0SW5uZXJIdG1sKG9wdGlvbiwgb3B0aW9uTGFiZWwpO1xuICAgICAgICBvcHRpb24uc2VsZWN0ZWQgPSBpc1NlbGVjdGVkKG9wdGlvblZhbHVlLCBwYXJhbXMuaW5wdXRWYWx1ZSk7XG4gICAgICAgIHBhcmVudC5hcHBlbmRDaGlsZChvcHRpb24pO1xuICAgICAgfTtcbiAgICAgIGlucHV0T3B0aW9ucy5mb3JFYWNoKGlucHV0T3B0aW9uID0+IHtcbiAgICAgICAgY29uc3Qgb3B0aW9uVmFsdWUgPSBpbnB1dE9wdGlvblswXTtcbiAgICAgICAgY29uc3Qgb3B0aW9uTGFiZWwgPSBpbnB1dE9wdGlvblsxXTtcbiAgICAgICAgLy8gPG9wdGdyb3VwPiBzcGVjOlxuICAgICAgICAvLyBodHRwczovL3d3dy53My5vcmcvVFIvaHRtbDQwMS9pbnRlcmFjdC9mb3Jtcy5odG1sI2gtMTcuNlxuICAgICAgICAvLyBcIi4uLmFsbCBPUFRHUk9VUCBlbGVtZW50cyBtdXN0IGJlIHNwZWNpZmllZCBkaXJlY3RseSB3aXRoaW4gYSBTRUxFQ1QgZWxlbWVudCAoaS5lLiwgZ3JvdXBzIG1heSBub3QgYmUgbmVzdGVkKS4uLlwiXG4gICAgICAgIC8vIGNoZWNrIHdoZXRoZXIgdGhpcyBpcyBhIDxvcHRncm91cD5cbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkob3B0aW9uTGFiZWwpKSB7XG4gICAgICAgICAgLy8gaWYgaXQgaXMgYW4gYXJyYXksIHRoZW4gaXQgaXMgYW4gPG9wdGdyb3VwPlxuICAgICAgICAgIGNvbnN0IG9wdGdyb3VwID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnb3B0Z3JvdXAnKTtcbiAgICAgICAgICBvcHRncm91cC5sYWJlbCA9IG9wdGlvblZhbHVlO1xuICAgICAgICAgIG9wdGdyb3VwLmRpc2FibGVkID0gZmFsc2U7IC8vIG5vdCBjb25maWd1cmFibGUgZm9yIG5vd1xuICAgICAgICAgIHNlbGVjdC5hcHBlbmRDaGlsZChvcHRncm91cCk7XG4gICAgICAgICAgb3B0aW9uTGFiZWwuZm9yRWFjaChvID0+IHJlbmRlck9wdGlvbihvcHRncm91cCwgb1sxXSwgb1swXSkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIGNhc2Ugb2YgPG9wdGlvbj5cbiAgICAgICAgICByZW5kZXJPcHRpb24oc2VsZWN0LCBvcHRpb25MYWJlbCwgb3B0aW9uVmFsdWUpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHNlbGVjdC5mb2N1cygpO1xuICAgIH0sXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtIVE1MRWxlbWVudH0gcG9wdXBcbiAgICAgKiBAcGFyYW0ge1JlY29yZDxzdHJpbmcsIGFueT59IGlucHV0T3B0aW9uc1xuICAgICAqIEBwYXJhbSB7U3dlZXRBbGVydE9wdGlvbnN9IHBhcmFtc1xuICAgICAqL1xuICAgIHJhZGlvOiAocG9wdXAsIGlucHV0T3B0aW9ucywgcGFyYW1zKSA9PiB7XG4gICAgICBjb25zdCByYWRpbyA9IGdldERpcmVjdENoaWxkQnlDbGFzcyhwb3B1cCwgc3dhbENsYXNzZXMucmFkaW8pO1xuICAgICAgaW5wdXRPcHRpb25zLmZvckVhY2goaW5wdXRPcHRpb24gPT4ge1xuICAgICAgICBjb25zdCByYWRpb1ZhbHVlID0gaW5wdXRPcHRpb25bMF07XG4gICAgICAgIGNvbnN0IHJhZGlvTGFiZWwgPSBpbnB1dE9wdGlvblsxXTtcbiAgICAgICAgY29uc3QgcmFkaW9JbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2lucHV0Jyk7XG4gICAgICAgIGNvbnN0IHJhZGlvTGFiZWxFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnbGFiZWwnKTtcbiAgICAgICAgcmFkaW9JbnB1dC50eXBlID0gJ3JhZGlvJztcbiAgICAgICAgcmFkaW9JbnB1dC5uYW1lID0gc3dhbENsYXNzZXMucmFkaW87XG4gICAgICAgIHJhZGlvSW5wdXQudmFsdWUgPSByYWRpb1ZhbHVlO1xuICAgICAgICBpZiAoaXNTZWxlY3RlZChyYWRpb1ZhbHVlLCBwYXJhbXMuaW5wdXRWYWx1ZSkpIHtcbiAgICAgICAgICByYWRpb0lucHV0LmNoZWNrZWQgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGxhYmVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3BhbicpO1xuICAgICAgICBzZXRJbm5lckh0bWwobGFiZWwsIHJhZGlvTGFiZWwpO1xuICAgICAgICBsYWJlbC5jbGFzc05hbWUgPSBzd2FsQ2xhc3Nlcy5sYWJlbDtcbiAgICAgICAgcmFkaW9MYWJlbEVsZW1lbnQuYXBwZW5kQ2hpbGQocmFkaW9JbnB1dCk7XG4gICAgICAgIHJhZGlvTGFiZWxFbGVtZW50LmFwcGVuZENoaWxkKGxhYmVsKTtcbiAgICAgICAgcmFkaW8uYXBwZW5kQ2hpbGQocmFkaW9MYWJlbEVsZW1lbnQpO1xuICAgICAgfSk7XG4gICAgICBjb25zdCByYWRpb3MgPSByYWRpby5xdWVyeVNlbGVjdG9yQWxsKCdpbnB1dCcpO1xuICAgICAgaWYgKHJhZGlvcy5sZW5ndGgpIHtcbiAgICAgICAgcmFkaW9zWzBdLmZvY3VzKCk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIC8qKlxuICAgKiBDb252ZXJ0cyBgaW5wdXRPcHRpb25zYCBpbnRvIGFuIGFycmF5IG9mIGBbdmFsdWUsIGxhYmVsXWBzXG4gICAqXG4gICAqIEBwYXJhbSB7UmVjb3JkPHN0cmluZywgYW55Pn0gaW5wdXRPcHRpb25zXG4gICAqIEByZXR1cm5zIHtBcnJheTxBcnJheTxzdHJpbmc+Pn1cbiAgICovXG4gIGNvbnN0IGZvcm1hdElucHV0T3B0aW9ucyA9IGlucHV0T3B0aW9ucyA9PiB7XG4gICAgY29uc3QgcmVzdWx0ID0gW107XG4gICAgaWYgKHR5cGVvZiBNYXAgIT09ICd1bmRlZmluZWQnICYmIGlucHV0T3B0aW9ucyBpbnN0YW5jZW9mIE1hcCkge1xuICAgICAgaW5wdXRPcHRpb25zLmZvckVhY2goKHZhbHVlLCBrZXkpID0+IHtcbiAgICAgICAgbGV0IHZhbHVlRm9ybWF0dGVkID0gdmFsdWU7XG4gICAgICAgIGlmICh0eXBlb2YgdmFsdWVGb3JtYXR0ZWQgPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgLy8gY2FzZSBvZiA8b3B0Z3JvdXA+XG4gICAgICAgICAgdmFsdWVGb3JtYXR0ZWQgPSBmb3JtYXRJbnB1dE9wdGlvbnModmFsdWVGb3JtYXR0ZWQpO1xuICAgICAgICB9XG4gICAgICAgIHJlc3VsdC5wdXNoKFtrZXksIHZhbHVlRm9ybWF0dGVkXSk7XG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgT2JqZWN0LmtleXMoaW5wdXRPcHRpb25zKS5mb3JFYWNoKGtleSA9PiB7XG4gICAgICAgIGxldCB2YWx1ZUZvcm1hdHRlZCA9IGlucHV0T3B0aW9uc1trZXldO1xuICAgICAgICBpZiAodHlwZW9mIHZhbHVlRm9ybWF0dGVkID09PSAnb2JqZWN0Jykge1xuICAgICAgICAgIC8vIGNhc2Ugb2YgPG9wdGdyb3VwPlxuICAgICAgICAgIHZhbHVlRm9ybWF0dGVkID0gZm9ybWF0SW5wdXRPcHRpb25zKHZhbHVlRm9ybWF0dGVkKTtcbiAgICAgICAgfVxuICAgICAgICByZXN1bHQucHVzaChba2V5LCB2YWx1ZUZvcm1hdHRlZF0pO1xuICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBvcHRpb25WYWx1ZVxuICAgKiBAcGFyYW0ge0lucHV0VmFsdWUgfCBQcm9taXNlPElucHV0VmFsdWU+IHwgeyB0b1Byb21pc2U6ICgpID0+IElucHV0VmFsdWUgfX0gaW5wdXRWYWx1ZVxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAgICovXG4gIGNvbnN0IGlzU2VsZWN0ZWQgPSAob3B0aW9uVmFsdWUsIGlucHV0VmFsdWUpID0+IHtcbiAgICByZXR1cm4gaW5wdXRWYWx1ZSAmJiBpbnB1dFZhbHVlLnRvU3RyaW5nKCkgPT09IG9wdGlvblZhbHVlLnRvU3RyaW5nKCk7XG4gIH07XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7U3dlZXRBbGVydDJ9IGluc3RhbmNlXG4gICAqL1xuICBjb25zdCBoYW5kbGVDb25maXJtQnV0dG9uQ2xpY2sgPSBpbnN0YW5jZSA9PiB7XG4gICAgY29uc3QgaW5uZXJQYXJhbXMgPSBwcml2YXRlUHJvcHMuaW5uZXJQYXJhbXMuZ2V0KGluc3RhbmNlKTtcbiAgICBpbnN0YW5jZS5kaXNhYmxlQnV0dG9ucygpO1xuICAgIGlmIChpbm5lclBhcmFtcy5pbnB1dCkge1xuICAgICAgaGFuZGxlQ29uZmlybU9yRGVueVdpdGhJbnB1dChpbnN0YW5jZSwgJ2NvbmZpcm0nKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uZmlybShpbnN0YW5jZSwgdHJ1ZSk7XG4gICAgfVxuICB9O1xuXG4gIC8qKlxuICAgKiBAcGFyYW0ge1N3ZWV0QWxlcnQyfSBpbnN0YW5jZVxuICAgKi9cbiAgY29uc3QgaGFuZGxlRGVueUJ1dHRvbkNsaWNrID0gaW5zdGFuY2UgPT4ge1xuICAgIGNvbnN0IGlubmVyUGFyYW1zID0gcHJpdmF0ZVByb3BzLmlubmVyUGFyYW1zLmdldChpbnN0YW5jZSk7XG4gICAgaW5zdGFuY2UuZGlzYWJsZUJ1dHRvbnMoKTtcbiAgICBpZiAoaW5uZXJQYXJhbXMucmV0dXJuSW5wdXRWYWx1ZU9uRGVueSkge1xuICAgICAgaGFuZGxlQ29uZmlybU9yRGVueVdpdGhJbnB1dChpbnN0YW5jZSwgJ2RlbnknKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZGVueShpbnN0YW5jZSwgZmFsc2UpO1xuICAgIH1cbiAgfTtcblxuICAvKipcbiAgICogQHBhcmFtIHtTd2VldEFsZXJ0Mn0gaW5zdGFuY2VcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gZGlzbWlzc1dpdGhcbiAgICovXG4gIGNvbnN0IGhhbmRsZUNhbmNlbEJ1dHRvbkNsaWNrID0gKGluc3RhbmNlLCBkaXNtaXNzV2l0aCkgPT4ge1xuICAgIGluc3RhbmNlLmRpc2FibGVCdXR0b25zKCk7XG4gICAgZGlzbWlzc1dpdGgoRGlzbWlzc1JlYXNvbi5jYW5jZWwpO1xuICB9O1xuXG4gIC8qKlxuICAgKiBAcGFyYW0ge1N3ZWV0QWxlcnQyfSBpbnN0YW5jZVxuICAgKiBAcGFyYW0geydjb25maXJtJyB8ICdkZW55J30gdHlwZVxuICAgKi9cbiAgY29uc3QgaGFuZGxlQ29uZmlybU9yRGVueVdpdGhJbnB1dCA9IChpbnN0YW5jZSwgdHlwZSkgPT4ge1xuICAgIGNvbnN0IGlubmVyUGFyYW1zID0gcHJpdmF0ZVByb3BzLmlubmVyUGFyYW1zLmdldChpbnN0YW5jZSk7XG4gICAgaWYgKCFpbm5lclBhcmFtcy5pbnB1dCkge1xuICAgICAgZXJyb3IoYFRoZSBcImlucHV0XCIgcGFyYW1ldGVyIGlzIG5lZWRlZCB0byBiZSBzZXQgd2hlbiB1c2luZyByZXR1cm5JbnB1dFZhbHVlT24ke2NhcGl0YWxpemVGaXJzdExldHRlcih0eXBlKX1gKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3QgaW5wdXRWYWx1ZSA9IGdldElucHV0VmFsdWUoaW5zdGFuY2UsIGlubmVyUGFyYW1zKTtcbiAgICBpZiAoaW5uZXJQYXJhbXMuaW5wdXRWYWxpZGF0b3IpIHtcbiAgICAgIGhhbmRsZUlucHV0VmFsaWRhdG9yKGluc3RhbmNlLCBpbnB1dFZhbHVlLCB0eXBlKTtcbiAgICB9IGVsc2UgaWYgKCFpbnN0YW5jZS5nZXRJbnB1dCgpLmNoZWNrVmFsaWRpdHkoKSkge1xuICAgICAgaW5zdGFuY2UuZW5hYmxlQnV0dG9ucygpO1xuICAgICAgaW5zdGFuY2Uuc2hvd1ZhbGlkYXRpb25NZXNzYWdlKGlubmVyUGFyYW1zLnZhbGlkYXRpb25NZXNzYWdlKTtcbiAgICB9IGVsc2UgaWYgKHR5cGUgPT09ICdkZW55Jykge1xuICAgICAgZGVueShpbnN0YW5jZSwgaW5wdXRWYWx1ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbmZpcm0oaW5zdGFuY2UsIGlucHV0VmFsdWUpO1xuICAgIH1cbiAgfTtcblxuICAvKipcbiAgICogQHBhcmFtIHtTd2VldEFsZXJ0Mn0gaW5zdGFuY2VcbiAgICogQHBhcmFtIHtzdHJpbmcgfCBudW1iZXIgfCBGaWxlIHwgRmlsZUxpc3QgfCBudWxsfSBpbnB1dFZhbHVlXG4gICAqIEBwYXJhbSB7J2NvbmZpcm0nIHwgJ2RlbnknfSB0eXBlXG4gICAqL1xuICBjb25zdCBoYW5kbGVJbnB1dFZhbGlkYXRvciA9IChpbnN0YW5jZSwgaW5wdXRWYWx1ZSwgdHlwZSkgPT4ge1xuICAgIGNvbnN0IGlubmVyUGFyYW1zID0gcHJpdmF0ZVByb3BzLmlubmVyUGFyYW1zLmdldChpbnN0YW5jZSk7XG4gICAgaW5zdGFuY2UuZGlzYWJsZUlucHV0KCk7XG4gICAgY29uc3QgdmFsaWRhdGlvblByb21pc2UgPSBQcm9taXNlLnJlc29sdmUoKS50aGVuKCgpID0+IGFzUHJvbWlzZShpbm5lclBhcmFtcy5pbnB1dFZhbGlkYXRvcihpbnB1dFZhbHVlLCBpbm5lclBhcmFtcy52YWxpZGF0aW9uTWVzc2FnZSkpKTtcbiAgICB2YWxpZGF0aW9uUHJvbWlzZS50aGVuKHZhbGlkYXRpb25NZXNzYWdlID0+IHtcbiAgICAgIGluc3RhbmNlLmVuYWJsZUJ1dHRvbnMoKTtcbiAgICAgIGluc3RhbmNlLmVuYWJsZUlucHV0KCk7XG4gICAgICBpZiAodmFsaWRhdGlvbk1lc3NhZ2UpIHtcbiAgICAgICAgaW5zdGFuY2Uuc2hvd1ZhbGlkYXRpb25NZXNzYWdlKHZhbGlkYXRpb25NZXNzYWdlKTtcbiAgICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gJ2RlbnknKSB7XG4gICAgICAgIGRlbnkoaW5zdGFuY2UsIGlucHV0VmFsdWUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29uZmlybShpbnN0YW5jZSwgaW5wdXRWYWx1ZSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH07XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7U3dlZXRBbGVydDJ9IGluc3RhbmNlXG4gICAqIEBwYXJhbSB7YW55fSB2YWx1ZVxuICAgKi9cbiAgY29uc3QgZGVueSA9IChpbnN0YW5jZSwgdmFsdWUpID0+IHtcbiAgICBjb25zdCBpbm5lclBhcmFtcyA9IHByaXZhdGVQcm9wcy5pbm5lclBhcmFtcy5nZXQoaW5zdGFuY2UgfHwgdW5kZWZpbmVkKTtcbiAgICBpZiAoaW5uZXJQYXJhbXMuc2hvd0xvYWRlck9uRGVueSkge1xuICAgICAgc2hvd0xvYWRpbmcoZ2V0RGVueUJ1dHRvbigpKTtcbiAgICB9XG4gICAgaWYgKGlubmVyUGFyYW1zLnByZURlbnkpIHtcbiAgICAgIHByaXZhdGVQcm9wcy5hd2FpdGluZ1Byb21pc2Uuc2V0KGluc3RhbmNlIHx8IHVuZGVmaW5lZCwgdHJ1ZSk7IC8vIEZsYWdnaW5nIHRoZSBpbnN0YW5jZSBhcyBhd2FpdGluZyBhIHByb21pc2Ugc28gaXQncyBvd24gcHJvbWlzZSdzIHJlamVjdC9yZXNvbHZlIG1ldGhvZHMgZG9lc24ndCBnZXQgZGVzdHJveWVkIHVudGlsIHRoZSByZXN1bHQgZnJvbSB0aGlzIHByZURlbnkncyBwcm9taXNlIGlzIHJlY2VpdmVkXG4gICAgICBjb25zdCBwcmVEZW55UHJvbWlzZSA9IFByb21pc2UucmVzb2x2ZSgpLnRoZW4oKCkgPT4gYXNQcm9taXNlKGlubmVyUGFyYW1zLnByZURlbnkodmFsdWUsIGlubmVyUGFyYW1zLnZhbGlkYXRpb25NZXNzYWdlKSkpO1xuICAgICAgcHJlRGVueVByb21pc2UudGhlbihwcmVEZW55VmFsdWUgPT4ge1xuICAgICAgICBpZiAocHJlRGVueVZhbHVlID09PSBmYWxzZSkge1xuICAgICAgICAgIGluc3RhbmNlLmhpZGVMb2FkaW5nKCk7XG4gICAgICAgICAgaGFuZGxlQXdhaXRpbmdQcm9taXNlKGluc3RhbmNlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpbnN0YW5jZS5jbG9zZSh7XG4gICAgICAgICAgICBpc0RlbmllZDogdHJ1ZSxcbiAgICAgICAgICAgIHZhbHVlOiB0eXBlb2YgcHJlRGVueVZhbHVlID09PSAndW5kZWZpbmVkJyA/IHZhbHVlIDogcHJlRGVueVZhbHVlXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH0pLmNhdGNoKGVycm9yID0+IHJlamVjdFdpdGgoaW5zdGFuY2UgfHwgdW5kZWZpbmVkLCBlcnJvcikpO1xuICAgIH0gZWxzZSB7XG4gICAgICBpbnN0YW5jZS5jbG9zZSh7XG4gICAgICAgIGlzRGVuaWVkOiB0cnVlLFxuICAgICAgICB2YWx1ZVxuICAgICAgfSk7XG4gICAgfVxuICB9O1xuXG4gIC8qKlxuICAgKiBAcGFyYW0ge1N3ZWV0QWxlcnQyfSBpbnN0YW5jZVxuICAgKiBAcGFyYW0ge2FueX0gdmFsdWVcbiAgICovXG4gIGNvbnN0IHN1Y2NlZWRXaXRoID0gKGluc3RhbmNlLCB2YWx1ZSkgPT4ge1xuICAgIGluc3RhbmNlLmNsb3NlKHtcbiAgICAgIGlzQ29uZmlybWVkOiB0cnVlLFxuICAgICAgdmFsdWVcbiAgICB9KTtcbiAgfTtcblxuICAvKipcbiAgICpcbiAgICogQHBhcmFtIHtTd2VldEFsZXJ0Mn0gaW5zdGFuY2VcbiAgICogQHBhcmFtIHtzdHJpbmd9IGVycm9yXG4gICAqL1xuICBjb25zdCByZWplY3RXaXRoID0gKGluc3RhbmNlLCBlcnJvcikgPT4ge1xuICAgIC8vIEB0cy1pZ25vcmVcbiAgICBpbnN0YW5jZS5yZWplY3RQcm9taXNlKGVycm9yKTtcbiAgfTtcblxuICAvKipcbiAgICpcbiAgICogQHBhcmFtIHtTd2VldEFsZXJ0Mn0gaW5zdGFuY2VcbiAgICogQHBhcmFtIHthbnl9IHZhbHVlXG4gICAqL1xuICBjb25zdCBjb25maXJtID0gKGluc3RhbmNlLCB2YWx1ZSkgPT4ge1xuICAgIGNvbnN0IGlubmVyUGFyYW1zID0gcHJpdmF0ZVByb3BzLmlubmVyUGFyYW1zLmdldChpbnN0YW5jZSB8fCB1bmRlZmluZWQpO1xuICAgIGlmIChpbm5lclBhcmFtcy5zaG93TG9hZGVyT25Db25maXJtKSB7XG4gICAgICBzaG93TG9hZGluZygpO1xuICAgIH1cbiAgICBpZiAoaW5uZXJQYXJhbXMucHJlQ29uZmlybSkge1xuICAgICAgaW5zdGFuY2UucmVzZXRWYWxpZGF0aW9uTWVzc2FnZSgpO1xuICAgICAgcHJpdmF0ZVByb3BzLmF3YWl0aW5nUHJvbWlzZS5zZXQoaW5zdGFuY2UgfHwgdW5kZWZpbmVkLCB0cnVlKTsgLy8gRmxhZ2dpbmcgdGhlIGluc3RhbmNlIGFzIGF3YWl0aW5nIGEgcHJvbWlzZSBzbyBpdCdzIG93biBwcm9taXNlJ3MgcmVqZWN0L3Jlc29sdmUgbWV0aG9kcyBkb2Vzbid0IGdldCBkZXN0cm95ZWQgdW50aWwgdGhlIHJlc3VsdCBmcm9tIHRoaXMgcHJlQ29uZmlybSdzIHByb21pc2UgaXMgcmVjZWl2ZWRcbiAgICAgIGNvbnN0IHByZUNvbmZpcm1Qcm9taXNlID0gUHJvbWlzZS5yZXNvbHZlKCkudGhlbigoKSA9PiBhc1Byb21pc2UoaW5uZXJQYXJhbXMucHJlQ29uZmlybSh2YWx1ZSwgaW5uZXJQYXJhbXMudmFsaWRhdGlvbk1lc3NhZ2UpKSk7XG4gICAgICBwcmVDb25maXJtUHJvbWlzZS50aGVuKHByZUNvbmZpcm1WYWx1ZSA9PiB7XG4gICAgICAgIGlmIChpc1Zpc2libGUkMShnZXRWYWxpZGF0aW9uTWVzc2FnZSgpKSB8fCBwcmVDb25maXJtVmFsdWUgPT09IGZhbHNlKSB7XG4gICAgICAgICAgaW5zdGFuY2UuaGlkZUxvYWRpbmcoKTtcbiAgICAgICAgICBoYW5kbGVBd2FpdGluZ1Byb21pc2UoaW5zdGFuY2UpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHN1Y2NlZWRXaXRoKGluc3RhbmNlLCB0eXBlb2YgcHJlQ29uZmlybVZhbHVlID09PSAndW5kZWZpbmVkJyA/IHZhbHVlIDogcHJlQ29uZmlybVZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfSkuY2F0Y2goZXJyb3IgPT4gcmVqZWN0V2l0aChpbnN0YW5jZSB8fCB1bmRlZmluZWQsIGVycm9yKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN1Y2NlZWRXaXRoKGluc3RhbmNlLCB2YWx1ZSk7XG4gICAgfVxuICB9O1xuXG4gIGNvbnN0IGhhbmRsZVBvcHVwQ2xpY2sgPSAoaW5zdGFuY2UsIGRvbUNhY2hlLCBkaXNtaXNzV2l0aCkgPT4ge1xuICAgIGNvbnN0IGlubmVyUGFyYW1zID0gcHJpdmF0ZVByb3BzLmlubmVyUGFyYW1zLmdldChpbnN0YW5jZSk7XG4gICAgaWYgKGlubmVyUGFyYW1zLnRvYXN0KSB7XG4gICAgICBoYW5kbGVUb2FzdENsaWNrKGluc3RhbmNlLCBkb21DYWNoZSwgZGlzbWlzc1dpdGgpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBJZ25vcmUgY2xpY2sgZXZlbnRzIHRoYXQgaGFkIG1vdXNlZG93biBvbiB0aGUgcG9wdXAgYnV0IG1vdXNldXAgb24gdGhlIGNvbnRhaW5lclxuICAgICAgLy8gVGhpcyBjYW4gaGFwcGVuIHdoZW4gdGhlIHVzZXIgZHJhZ3MgYSBzbGlkZXJcbiAgICAgIGhhbmRsZU1vZGFsTW91c2Vkb3duKGRvbUNhY2hlKTtcblxuICAgICAgLy8gSWdub3JlIGNsaWNrIGV2ZW50cyB0aGF0IGhhZCBtb3VzZWRvd24gb24gdGhlIGNvbnRhaW5lciBidXQgbW91c2V1cCBvbiB0aGUgcG9wdXBcbiAgICAgIGhhbmRsZUNvbnRhaW5lck1vdXNlZG93bihkb21DYWNoZSk7XG4gICAgICBoYW5kbGVNb2RhbENsaWNrKGluc3RhbmNlLCBkb21DYWNoZSwgZGlzbWlzc1dpdGgpO1xuICAgIH1cbiAgfTtcbiAgY29uc3QgaGFuZGxlVG9hc3RDbGljayA9IChpbnN0YW5jZSwgZG9tQ2FjaGUsIGRpc21pc3NXaXRoKSA9PiB7XG4gICAgLy8gQ2xvc2luZyB0b2FzdCBieSBpbnRlcm5hbCBjbGlja1xuICAgIGRvbUNhY2hlLnBvcHVwLm9uY2xpY2sgPSAoKSA9PiB7XG4gICAgICBjb25zdCBpbm5lclBhcmFtcyA9IHByaXZhdGVQcm9wcy5pbm5lclBhcmFtcy5nZXQoaW5zdGFuY2UpO1xuICAgICAgaWYgKGlubmVyUGFyYW1zICYmIChpc0FueUJ1dHRvblNob3duKGlubmVyUGFyYW1zKSB8fCBpbm5lclBhcmFtcy50aW1lciB8fCBpbm5lclBhcmFtcy5pbnB1dCkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgZGlzbWlzc1dpdGgoRGlzbWlzc1JlYXNvbi5jbG9zZSk7XG4gICAgfTtcbiAgfTtcblxuICAvKipcbiAgICogQHBhcmFtIHsqfSBpbm5lclBhcmFtc1xuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAgICovXG4gIGNvbnN0IGlzQW55QnV0dG9uU2hvd24gPSBpbm5lclBhcmFtcyA9PiB7XG4gICAgcmV0dXJuIGlubmVyUGFyYW1zLnNob3dDb25maXJtQnV0dG9uIHx8IGlubmVyUGFyYW1zLnNob3dEZW55QnV0dG9uIHx8IGlubmVyUGFyYW1zLnNob3dDYW5jZWxCdXR0b24gfHwgaW5uZXJQYXJhbXMuc2hvd0Nsb3NlQnV0dG9uO1xuICB9O1xuICBsZXQgaWdub3JlT3V0c2lkZUNsaWNrID0gZmFsc2U7XG4gIGNvbnN0IGhhbmRsZU1vZGFsTW91c2Vkb3duID0gZG9tQ2FjaGUgPT4ge1xuICAgIGRvbUNhY2hlLnBvcHVwLm9ubW91c2Vkb3duID0gKCkgPT4ge1xuICAgICAgZG9tQ2FjaGUuY29udGFpbmVyLm9ubW91c2V1cCA9IGZ1bmN0aW9uIChlKSB7XG4gICAgICAgIGRvbUNhY2hlLmNvbnRhaW5lci5vbm1vdXNldXAgPSB1bmRlZmluZWQ7XG4gICAgICAgIC8vIFdlIG9ubHkgY2hlY2sgaWYgdGhlIG1vdXNldXAgdGFyZ2V0IGlzIHRoZSBjb250YWluZXIgYmVjYXVzZSB1c3VhbGx5IGl0IGRvZXNuJ3RcbiAgICAgICAgLy8gaGF2ZSBhbnkgb3RoZXIgZGlyZWN0IGNoaWxkcmVuIGFzaWRlIG9mIHRoZSBwb3B1cFxuICAgICAgICBpZiAoZS50YXJnZXQgPT09IGRvbUNhY2hlLmNvbnRhaW5lcikge1xuICAgICAgICAgIGlnbm9yZU91dHNpZGVDbGljayA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfTtcbiAgfTtcbiAgY29uc3QgaGFuZGxlQ29udGFpbmVyTW91c2Vkb3duID0gZG9tQ2FjaGUgPT4ge1xuICAgIGRvbUNhY2hlLmNvbnRhaW5lci5vbm1vdXNlZG93biA9ICgpID0+IHtcbiAgICAgIGRvbUNhY2hlLnBvcHVwLm9ubW91c2V1cCA9IGZ1bmN0aW9uIChlKSB7XG4gICAgICAgIGRvbUNhY2hlLnBvcHVwLm9ubW91c2V1cCA9IHVuZGVmaW5lZDtcbiAgICAgICAgLy8gV2UgYWxzbyBuZWVkIHRvIGNoZWNrIGlmIHRoZSBtb3VzZXVwIHRhcmdldCBpcyBhIGNoaWxkIG9mIHRoZSBwb3B1cFxuICAgICAgICBpZiAoZS50YXJnZXQgPT09IGRvbUNhY2hlLnBvcHVwIHx8IGRvbUNhY2hlLnBvcHVwLmNvbnRhaW5zKGUudGFyZ2V0KSkge1xuICAgICAgICAgIGlnbm9yZU91dHNpZGVDbGljayA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfTtcbiAgfTtcbiAgY29uc3QgaGFuZGxlTW9kYWxDbGljayA9IChpbnN0YW5jZSwgZG9tQ2FjaGUsIGRpc21pc3NXaXRoKSA9PiB7XG4gICAgZG9tQ2FjaGUuY29udGFpbmVyLm9uY2xpY2sgPSBlID0+IHtcbiAgICAgIGNvbnN0IGlubmVyUGFyYW1zID0gcHJpdmF0ZVByb3BzLmlubmVyUGFyYW1zLmdldChpbnN0YW5jZSk7XG4gICAgICBpZiAoaWdub3JlT3V0c2lkZUNsaWNrKSB7XG4gICAgICAgIGlnbm9yZU91dHNpZGVDbGljayA9IGZhbHNlO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBpZiAoZS50YXJnZXQgPT09IGRvbUNhY2hlLmNvbnRhaW5lciAmJiBjYWxsSWZGdW5jdGlvbihpbm5lclBhcmFtcy5hbGxvd091dHNpZGVDbGljaykpIHtcbiAgICAgICAgZGlzbWlzc1dpdGgoRGlzbWlzc1JlYXNvbi5iYWNrZHJvcCk7XG4gICAgICB9XG4gICAgfTtcbiAgfTtcblxuICBjb25zdCBpc0pxdWVyeUVsZW1lbnQgPSBlbGVtID0+IHR5cGVvZiBlbGVtID09PSAnb2JqZWN0JyAmJiBlbGVtLmpxdWVyeTtcbiAgY29uc3QgaXNFbGVtZW50ID0gZWxlbSA9PiBlbGVtIGluc3RhbmNlb2YgRWxlbWVudCB8fCBpc0pxdWVyeUVsZW1lbnQoZWxlbSk7XG4gIGNvbnN0IGFyZ3NUb1BhcmFtcyA9IGFyZ3MgPT4ge1xuICAgIGNvbnN0IHBhcmFtcyA9IHt9O1xuICAgIGlmICh0eXBlb2YgYXJnc1swXSA9PT0gJ29iamVjdCcgJiYgIWlzRWxlbWVudChhcmdzWzBdKSkge1xuICAgICAgT2JqZWN0LmFzc2lnbihwYXJhbXMsIGFyZ3NbMF0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBbJ3RpdGxlJywgJ2h0bWwnLCAnaWNvbiddLmZvckVhY2goKG5hbWUsIGluZGV4KSA9PiB7XG4gICAgICAgIGNvbnN0IGFyZyA9IGFyZ3NbaW5kZXhdO1xuICAgICAgICBpZiAodHlwZW9mIGFyZyA9PT0gJ3N0cmluZycgfHwgaXNFbGVtZW50KGFyZykpIHtcbiAgICAgICAgICBwYXJhbXNbbmFtZV0gPSBhcmc7XG4gICAgICAgIH0gZWxzZSBpZiAoYXJnICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBlcnJvcihgVW5leHBlY3RlZCB0eXBlIG9mICR7bmFtZX0hIEV4cGVjdGVkIFwic3RyaW5nXCIgb3IgXCJFbGVtZW50XCIsIGdvdCAke3R5cGVvZiBhcmd9YCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gcGFyYW1zO1xuICB9O1xuXG4gIGZ1bmN0aW9uIGZpcmUoKSB7XG4gICAgY29uc3QgU3dhbCA9IHRoaXM7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXRoaXMtYWxpYXNcbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuICAgIHJldHVybiBuZXcgU3dhbCguLi5hcmdzKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGFuIGV4dGVuZGVkIHZlcnNpb24gb2YgYFN3YWxgIGNvbnRhaW5pbmcgYHBhcmFtc2AgYXMgZGVmYXVsdHMuXG4gICAqIFVzZWZ1bCBmb3IgcmV1c2luZyBTd2FsIGNvbmZpZ3VyYXRpb24uXG4gICAqXG4gICAqIEZvciBleGFtcGxlOlxuICAgKlxuICAgKiBCZWZvcmU6XG4gICAqIGNvbnN0IHRleHRQcm9tcHRPcHRpb25zID0geyBpbnB1dDogJ3RleHQnLCBzaG93Q2FuY2VsQnV0dG9uOiB0cnVlIH1cbiAgICogY29uc3Qge3ZhbHVlOiBmaXJzdE5hbWV9ID0gYXdhaXQgU3dhbC5maXJlKHsgLi4udGV4dFByb21wdE9wdGlvbnMsIHRpdGxlOiAnV2hhdCBpcyB5b3VyIGZpcnN0IG5hbWU/JyB9KVxuICAgKiBjb25zdCB7dmFsdWU6IGxhc3ROYW1lfSA9IGF3YWl0IFN3YWwuZmlyZSh7IC4uLnRleHRQcm9tcHRPcHRpb25zLCB0aXRsZTogJ1doYXQgaXMgeW91ciBsYXN0IG5hbWU/JyB9KVxuICAgKlxuICAgKiBBZnRlcjpcbiAgICogY29uc3QgVGV4dFByb21wdCA9IFN3YWwubWl4aW4oeyBpbnB1dDogJ3RleHQnLCBzaG93Q2FuY2VsQnV0dG9uOiB0cnVlIH0pXG4gICAqIGNvbnN0IHt2YWx1ZTogZmlyc3ROYW1lfSA9IGF3YWl0IFRleHRQcm9tcHQoJ1doYXQgaXMgeW91ciBmaXJzdCBuYW1lPycpXG4gICAqIGNvbnN0IHt2YWx1ZTogbGFzdE5hbWV9ID0gYXdhaXQgVGV4dFByb21wdCgnV2hhdCBpcyB5b3VyIGxhc3QgbmFtZT8nKVxuICAgKlxuICAgKiBAcGFyYW0gbWl4aW5QYXJhbXNcbiAgICovXG4gIGZ1bmN0aW9uIG1peGluKG1peGluUGFyYW1zKSB7XG4gICAgY2xhc3MgTWl4aW5Td2FsIGV4dGVuZHMgdGhpcyB7XG4gICAgICBfbWFpbihwYXJhbXMsIHByaW9yaXR5TWl4aW5QYXJhbXMpIHtcbiAgICAgICAgcmV0dXJuIHN1cGVyLl9tYWluKHBhcmFtcywgT2JqZWN0LmFzc2lnbih7fSwgbWl4aW5QYXJhbXMsIHByaW9yaXR5TWl4aW5QYXJhbXMpKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIE1peGluU3dhbDtcbiAgfVxuXG4gIC8qKlxuICAgKiBJZiBgdGltZXJgIHBhcmFtZXRlciBpcyBzZXQsIHJldHVybnMgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyBvZiB0aW1lciByZW1haW5lZC5cbiAgICogT3RoZXJ3aXNlLCByZXR1cm5zIHVuZGVmaW5lZC5cbiAgICpcbiAgICogQHJldHVybnMge251bWJlciB8IHVuZGVmaW5lZH1cbiAgICovXG4gIGNvbnN0IGdldFRpbWVyTGVmdCA9ICgpID0+IHtcbiAgICByZXR1cm4gZ2xvYmFsU3RhdGUudGltZW91dCAmJiBnbG9iYWxTdGF0ZS50aW1lb3V0LmdldFRpbWVyTGVmdCgpO1xuICB9O1xuXG4gIC8qKlxuICAgKiBTdG9wIHRpbWVyLiBSZXR1cm5zIG51bWJlciBvZiBtaWxsaXNlY29uZHMgb2YgdGltZXIgcmVtYWluZWQuXG4gICAqIElmIGB0aW1lcmAgcGFyYW1ldGVyIGlzbid0IHNldCwgcmV0dXJucyB1bmRlZmluZWQuXG4gICAqXG4gICAqIEByZXR1cm5zIHtudW1iZXIgfCB1bmRlZmluZWR9XG4gICAqL1xuICBjb25zdCBzdG9wVGltZXIgPSAoKSA9PiB7XG4gICAgaWYgKGdsb2JhbFN0YXRlLnRpbWVvdXQpIHtcbiAgICAgIHN0b3BUaW1lclByb2dyZXNzQmFyKCk7XG4gICAgICByZXR1cm4gZ2xvYmFsU3RhdGUudGltZW91dC5zdG9wKCk7XG4gICAgfVxuICB9O1xuXG4gIC8qKlxuICAgKiBSZXN1bWUgdGltZXIuIFJldHVybnMgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyBvZiB0aW1lciByZW1haW5lZC5cbiAgICogSWYgYHRpbWVyYCBwYXJhbWV0ZXIgaXNuJ3Qgc2V0LCByZXR1cm5zIHVuZGVmaW5lZC5cbiAgICpcbiAgICogQHJldHVybnMge251bWJlciB8IHVuZGVmaW5lZH1cbiAgICovXG4gIGNvbnN0IHJlc3VtZVRpbWVyID0gKCkgPT4ge1xuICAgIGlmIChnbG9iYWxTdGF0ZS50aW1lb3V0KSB7XG4gICAgICBjb25zdCByZW1haW5pbmcgPSBnbG9iYWxTdGF0ZS50aW1lb3V0LnN0YXJ0KCk7XG4gICAgICBhbmltYXRlVGltZXJQcm9ncmVzc0JhcihyZW1haW5pbmcpO1xuICAgICAgcmV0dXJuIHJlbWFpbmluZztcbiAgICB9XG4gIH07XG5cbiAgLyoqXG4gICAqIFJlc3VtZSB0aW1lci4gUmV0dXJucyBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIG9mIHRpbWVyIHJlbWFpbmVkLlxuICAgKiBJZiBgdGltZXJgIHBhcmFtZXRlciBpc24ndCBzZXQsIHJldHVybnMgdW5kZWZpbmVkLlxuICAgKlxuICAgKiBAcmV0dXJucyB7bnVtYmVyIHwgdW5kZWZpbmVkfVxuICAgKi9cbiAgY29uc3QgdG9nZ2xlVGltZXIgPSAoKSA9PiB7XG4gICAgY29uc3QgdGltZXIgPSBnbG9iYWxTdGF0ZS50aW1lb3V0O1xuICAgIHJldHVybiB0aW1lciAmJiAodGltZXIucnVubmluZyA/IHN0b3BUaW1lcigpIDogcmVzdW1lVGltZXIoKSk7XG4gIH07XG5cbiAgLyoqXG4gICAqIEluY3JlYXNlIHRpbWVyLiBSZXR1cm5zIG51bWJlciBvZiBtaWxsaXNlY29uZHMgb2YgYW4gdXBkYXRlZCB0aW1lci5cbiAgICogSWYgYHRpbWVyYCBwYXJhbWV0ZXIgaXNuJ3Qgc2V0LCByZXR1cm5zIHVuZGVmaW5lZC5cbiAgICpcbiAgICogQHBhcmFtIHtudW1iZXJ9IG5cbiAgICogQHJldHVybnMge251bWJlciB8IHVuZGVmaW5lZH1cbiAgICovXG4gIGNvbnN0IGluY3JlYXNlVGltZXIgPSBuID0+IHtcbiAgICBpZiAoZ2xvYmFsU3RhdGUudGltZW91dCkge1xuICAgICAgY29uc3QgcmVtYWluaW5nID0gZ2xvYmFsU3RhdGUudGltZW91dC5pbmNyZWFzZShuKTtcbiAgICAgIGFuaW1hdGVUaW1lclByb2dyZXNzQmFyKHJlbWFpbmluZywgdHJ1ZSk7XG4gICAgICByZXR1cm4gcmVtYWluaW5nO1xuICAgIH1cbiAgfTtcblxuICAvKipcbiAgICogQ2hlY2sgaWYgdGltZXIgaXMgcnVubmluZy4gUmV0dXJucyB0cnVlIGlmIHRpbWVyIGlzIHJ1bm5pbmdcbiAgICogb3IgZmFsc2UgaWYgdGltZXIgaXMgcGF1c2VkIG9yIHN0b3BwZWQuXG4gICAqIElmIGB0aW1lcmAgcGFyYW1ldGVyIGlzbid0IHNldCwgcmV0dXJucyB1bmRlZmluZWRcbiAgICpcbiAgICogQHJldHVybnMge2Jvb2xlYW59XG4gICAqL1xuICBjb25zdCBpc1RpbWVyUnVubmluZyA9ICgpID0+IHtcbiAgICByZXR1cm4gZ2xvYmFsU3RhdGUudGltZW91dCAmJiBnbG9iYWxTdGF0ZS50aW1lb3V0LmlzUnVubmluZygpO1xuICB9O1xuXG4gIGxldCBib2R5Q2xpY2tMaXN0ZW5lckFkZGVkID0gZmFsc2U7XG4gIGNvbnN0IGNsaWNrSGFuZGxlcnMgPSB7fTtcblxuICAvKipcbiAgICogQHBhcmFtIHtzdHJpbmd9IGF0dHJcbiAgICovXG4gIGZ1bmN0aW9uIGJpbmRDbGlja0hhbmRsZXIoKSB7XG4gICAgbGV0IGF0dHIgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6ICdkYXRhLXN3YWwtdGVtcGxhdGUnO1xuICAgIGNsaWNrSGFuZGxlcnNbYXR0cl0gPSB0aGlzO1xuICAgIGlmICghYm9keUNsaWNrTGlzdGVuZXJBZGRlZCkge1xuICAgICAgZG9jdW1lbnQuYm9keS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGJvZHlDbGlja0xpc3RlbmVyKTtcbiAgICAgIGJvZHlDbGlja0xpc3RlbmVyQWRkZWQgPSB0cnVlO1xuICAgIH1cbiAgfVxuICBjb25zdCBib2R5Q2xpY2tMaXN0ZW5lciA9IGV2ZW50ID0+IHtcbiAgICBmb3IgKGxldCBlbCA9IGV2ZW50LnRhcmdldDsgZWwgJiYgZWwgIT09IGRvY3VtZW50OyBlbCA9IGVsLnBhcmVudE5vZGUpIHtcbiAgICAgIGZvciAoY29uc3QgYXR0ciBpbiBjbGlja0hhbmRsZXJzKSB7XG4gICAgICAgIGNvbnN0IHRlbXBsYXRlID0gZWwuZ2V0QXR0cmlidXRlKGF0dHIpO1xuICAgICAgICBpZiAodGVtcGxhdGUpIHtcbiAgICAgICAgICBjbGlja0hhbmRsZXJzW2F0dHJdLmZpcmUoe1xuICAgICAgICAgICAgdGVtcGxhdGVcbiAgICAgICAgICB9KTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgdmFyIHN0YXRpY01ldGhvZHMgPSAvKiNfX1BVUkVfXyovT2JqZWN0LmZyZWV6ZSh7XG4gICAgX19wcm90b19fOiBudWxsLFxuICAgIGlzVmFsaWRQYXJhbWV0ZXI6IGlzVmFsaWRQYXJhbWV0ZXIsXG4gICAgaXNVcGRhdGFibGVQYXJhbWV0ZXI6IGlzVXBkYXRhYmxlUGFyYW1ldGVyLFxuICAgIGlzRGVwcmVjYXRlZFBhcmFtZXRlcjogaXNEZXByZWNhdGVkUGFyYW1ldGVyLFxuICAgIGFyZ3NUb1BhcmFtczogYXJnc1RvUGFyYW1zLFxuICAgIGdldENvbnRhaW5lcjogZ2V0Q29udGFpbmVyLFxuICAgIGdldFBvcHVwOiBnZXRQb3B1cCxcbiAgICBnZXRUaXRsZTogZ2V0VGl0bGUsXG4gICAgZ2V0SHRtbENvbnRhaW5lcjogZ2V0SHRtbENvbnRhaW5lcixcbiAgICBnZXRJbWFnZTogZ2V0SW1hZ2UsXG4gICAgZ2V0SWNvbjogZ2V0SWNvbixcbiAgICBnZXRJY29uQ29udGVudDogZ2V0SWNvbkNvbnRlbnQsXG4gICAgZ2V0SW5wdXRMYWJlbDogZ2V0SW5wdXRMYWJlbCxcbiAgICBnZXRDbG9zZUJ1dHRvbjogZ2V0Q2xvc2VCdXR0b24sXG4gICAgZ2V0QWN0aW9uczogZ2V0QWN0aW9ucyxcbiAgICBnZXRDb25maXJtQnV0dG9uOiBnZXRDb25maXJtQnV0dG9uLFxuICAgIGdldERlbnlCdXR0b246IGdldERlbnlCdXR0b24sXG4gICAgZ2V0Q2FuY2VsQnV0dG9uOiBnZXRDYW5jZWxCdXR0b24sXG4gICAgZ2V0TG9hZGVyOiBnZXRMb2FkZXIsXG4gICAgZ2V0Rm9vdGVyOiBnZXRGb290ZXIsXG4gICAgZ2V0VGltZXJQcm9ncmVzc0JhcjogZ2V0VGltZXJQcm9ncmVzc0JhcixcbiAgICBnZXRGb2N1c2FibGVFbGVtZW50czogZ2V0Rm9jdXNhYmxlRWxlbWVudHMsXG4gICAgZ2V0VmFsaWRhdGlvbk1lc3NhZ2U6IGdldFZhbGlkYXRpb25NZXNzYWdlLFxuICAgIGdldFByb2dyZXNzU3RlcHM6IGdldFByb2dyZXNzU3RlcHMsXG4gICAgaXNMb2FkaW5nOiBpc0xvYWRpbmcsXG4gICAgaXNWaXNpYmxlOiBpc1Zpc2libGUsXG4gICAgY2xpY2tDb25maXJtOiBjbGlja0NvbmZpcm0sXG4gICAgY2xpY2tEZW55OiBjbGlja0RlbnksXG4gICAgY2xpY2tDYW5jZWw6IGNsaWNrQ2FuY2VsLFxuICAgIGZpcmU6IGZpcmUsXG4gICAgbWl4aW46IG1peGluLFxuICAgIHNob3dMb2FkaW5nOiBzaG93TG9hZGluZyxcbiAgICBlbmFibGVMb2FkaW5nOiBzaG93TG9hZGluZyxcbiAgICBnZXRUaW1lckxlZnQ6IGdldFRpbWVyTGVmdCxcbiAgICBzdG9wVGltZXI6IHN0b3BUaW1lcixcbiAgICByZXN1bWVUaW1lcjogcmVzdW1lVGltZXIsXG4gICAgdG9nZ2xlVGltZXI6IHRvZ2dsZVRpbWVyLFxuICAgIGluY3JlYXNlVGltZXI6IGluY3JlYXNlVGltZXIsXG4gICAgaXNUaW1lclJ1bm5pbmc6IGlzVGltZXJSdW5uaW5nLFxuICAgIGJpbmRDbGlja0hhbmRsZXI6IGJpbmRDbGlja0hhbmRsZXJcbiAgfSk7XG5cbiAgY2xhc3MgVGltZXIge1xuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGRlbGF5XG4gICAgICovXG4gICAgY29uc3RydWN0b3IoY2FsbGJhY2ssIGRlbGF5KSB7XG4gICAgICB0aGlzLmNhbGxiYWNrID0gY2FsbGJhY2s7XG4gICAgICB0aGlzLnJlbWFpbmluZyA9IGRlbGF5O1xuICAgICAgdGhpcy5ydW5uaW5nID0gZmFsc2U7XG4gICAgICB0aGlzLnN0YXJ0KCk7XG4gICAgfVxuICAgIHN0YXJ0KCkge1xuICAgICAgaWYgKCF0aGlzLnJ1bm5pbmcpIHtcbiAgICAgICAgdGhpcy5ydW5uaW5nID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5zdGFydGVkID0gbmV3IERhdGUoKTtcbiAgICAgICAgdGhpcy5pZCA9IHNldFRpbWVvdXQodGhpcy5jYWxsYmFjaywgdGhpcy5yZW1haW5pbmcpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXMucmVtYWluaW5nO1xuICAgIH1cbiAgICBzdG9wKCkge1xuICAgICAgaWYgKHRoaXMucnVubmluZykge1xuICAgICAgICB0aGlzLnJ1bm5pbmcgPSBmYWxzZTtcbiAgICAgICAgY2xlYXJUaW1lb3V0KHRoaXMuaWQpO1xuICAgICAgICB0aGlzLnJlbWFpbmluZyAtPSBuZXcgRGF0ZSgpLmdldFRpbWUoKSAtIHRoaXMuc3RhcnRlZC5nZXRUaW1lKCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcy5yZW1haW5pbmc7XG4gICAgfVxuICAgIGluY3JlYXNlKG4pIHtcbiAgICAgIGNvbnN0IHJ1bm5pbmcgPSB0aGlzLnJ1bm5pbmc7XG4gICAgICBpZiAocnVubmluZykge1xuICAgICAgICB0aGlzLnN0b3AoKTtcbiAgICAgIH1cbiAgICAgIHRoaXMucmVtYWluaW5nICs9IG47XG4gICAgICBpZiAocnVubmluZykge1xuICAgICAgICB0aGlzLnN0YXJ0KCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcy5yZW1haW5pbmc7XG4gICAgfVxuICAgIGdldFRpbWVyTGVmdCgpIHtcbiAgICAgIGlmICh0aGlzLnJ1bm5pbmcpIHtcbiAgICAgICAgdGhpcy5zdG9wKCk7XG4gICAgICAgIHRoaXMuc3RhcnQoKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzLnJlbWFpbmluZztcbiAgICB9XG4gICAgaXNSdW5uaW5nKCkge1xuICAgICAgcmV0dXJuIHRoaXMucnVubmluZztcbiAgICB9XG4gIH1cblxuICBjb25zdCBzd2FsU3RyaW5nUGFyYW1zID0gWydzd2FsLXRpdGxlJywgJ3N3YWwtaHRtbCcsICdzd2FsLWZvb3RlciddO1xuXG4gIC8qKlxuICAgKiBAcGFyYW0ge1N3ZWV0QWxlcnRPcHRpb25zfSBwYXJhbXNcbiAgICogQHJldHVybnMge1N3ZWV0QWxlcnRPcHRpb25zfVxuICAgKi9cbiAgY29uc3QgZ2V0VGVtcGxhdGVQYXJhbXMgPSBwYXJhbXMgPT4ge1xuICAgIC8qKiBAdHlwZSB7SFRNTFRlbXBsYXRlRWxlbWVudH0gKi9cbiAgICBjb25zdCB0ZW1wbGF0ZSA9IHR5cGVvZiBwYXJhbXMudGVtcGxhdGUgPT09ICdzdHJpbmcnID8gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihwYXJhbXMudGVtcGxhdGUpIDogcGFyYW1zLnRlbXBsYXRlO1xuICAgIGlmICghdGVtcGxhdGUpIHtcbiAgICAgIHJldHVybiB7fTtcbiAgICB9XG4gICAgLyoqIEB0eXBlIHtEb2N1bWVudEZyYWdtZW50fSAqL1xuICAgIGNvbnN0IHRlbXBsYXRlQ29udGVudCA9IHRlbXBsYXRlLmNvbnRlbnQ7XG4gICAgc2hvd1dhcm5pbmdzRm9yRWxlbWVudHModGVtcGxhdGVDb250ZW50KTtcbiAgICBjb25zdCByZXN1bHQgPSBPYmplY3QuYXNzaWduKGdldFN3YWxQYXJhbXModGVtcGxhdGVDb250ZW50KSwgZ2V0U3dhbEZ1bmN0aW9uUGFyYW1zKHRlbXBsYXRlQ29udGVudCksIGdldFN3YWxCdXR0b25zKHRlbXBsYXRlQ29udGVudCksIGdldFN3YWxJbWFnZSh0ZW1wbGF0ZUNvbnRlbnQpLCBnZXRTd2FsSWNvbih0ZW1wbGF0ZUNvbnRlbnQpLCBnZXRTd2FsSW5wdXQodGVtcGxhdGVDb250ZW50KSwgZ2V0U3dhbFN0cmluZ1BhcmFtcyh0ZW1wbGF0ZUNvbnRlbnQsIHN3YWxTdHJpbmdQYXJhbXMpKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xuXG4gIC8qKlxuICAgKiBAcGFyYW0ge0RvY3VtZW50RnJhZ21lbnR9IHRlbXBsYXRlQ29udGVudFxuICAgKiBAcmV0dXJucyB7U3dlZXRBbGVydE9wdGlvbnN9XG4gICAqL1xuICBjb25zdCBnZXRTd2FsUGFyYW1zID0gdGVtcGxhdGVDb250ZW50ID0+IHtcbiAgICBjb25zdCByZXN1bHQgPSB7fTtcbiAgICAvKiogQHR5cGUge0hUTUxFbGVtZW50W119ICovXG4gICAgY29uc3Qgc3dhbFBhcmFtcyA9IEFycmF5LmZyb20odGVtcGxhdGVDb250ZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ3N3YWwtcGFyYW0nKSk7XG4gICAgc3dhbFBhcmFtcy5mb3JFYWNoKHBhcmFtID0+IHtcbiAgICAgIHNob3dXYXJuaW5nc0ZvckF0dHJpYnV0ZXMocGFyYW0sIFsnbmFtZScsICd2YWx1ZSddKTtcbiAgICAgIGNvbnN0IHBhcmFtTmFtZSA9IHBhcmFtLmdldEF0dHJpYnV0ZSgnbmFtZScpO1xuICAgICAgY29uc3QgdmFsdWUgPSBwYXJhbS5nZXRBdHRyaWJ1dGUoJ3ZhbHVlJyk7XG4gICAgICBpZiAodHlwZW9mIGRlZmF1bHRQYXJhbXNbcGFyYW1OYW1lXSA9PT0gJ2Jvb2xlYW4nKSB7XG4gICAgICAgIHJlc3VsdFtwYXJhbU5hbWVdID0gdmFsdWUgIT09ICdmYWxzZSc7XG4gICAgICB9IGVsc2UgaWYgKHR5cGVvZiBkZWZhdWx0UGFyYW1zW3BhcmFtTmFtZV0gPT09ICdvYmplY3QnKSB7XG4gICAgICAgIHJlc3VsdFtwYXJhbU5hbWVdID0gSlNPTi5wYXJzZSh2YWx1ZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXN1bHRbcGFyYW1OYW1lXSA9IHZhbHVlO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7RG9jdW1lbnRGcmFnbWVudH0gdGVtcGxhdGVDb250ZW50XG4gICAqIEByZXR1cm5zIHtTd2VldEFsZXJ0T3B0aW9uc31cbiAgICovXG4gIGNvbnN0IGdldFN3YWxGdW5jdGlvblBhcmFtcyA9IHRlbXBsYXRlQ29udGVudCA9PiB7XG4gICAgY29uc3QgcmVzdWx0ID0ge307XG4gICAgLyoqIEB0eXBlIHtIVE1MRWxlbWVudFtdfSAqL1xuICAgIGNvbnN0IHN3YWxGdW5jdGlvbnMgPSBBcnJheS5mcm9tKHRlbXBsYXRlQ29udGVudC5xdWVyeVNlbGVjdG9yQWxsKCdzd2FsLWZ1bmN0aW9uLXBhcmFtJykpO1xuICAgIHN3YWxGdW5jdGlvbnMuZm9yRWFjaChwYXJhbSA9PiB7XG4gICAgICBjb25zdCBwYXJhbU5hbWUgPSBwYXJhbS5nZXRBdHRyaWJ1dGUoJ25hbWUnKTtcbiAgICAgIGNvbnN0IHZhbHVlID0gcGFyYW0uZ2V0QXR0cmlidXRlKCd2YWx1ZScpO1xuICAgICAgcmVzdWx0W3BhcmFtTmFtZV0gPSBuZXcgRnVuY3Rpb24oYHJldHVybiAke3ZhbHVlfWApKCk7XG4gICAgfSk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcblxuICAvKipcbiAgICogQHBhcmFtIHtEb2N1bWVudEZyYWdtZW50fSB0ZW1wbGF0ZUNvbnRlbnRcbiAgICogQHJldHVybnMge1N3ZWV0QWxlcnRPcHRpb25zfVxuICAgKi9cbiAgY29uc3QgZ2V0U3dhbEJ1dHRvbnMgPSB0ZW1wbGF0ZUNvbnRlbnQgPT4ge1xuICAgIGNvbnN0IHJlc3VsdCA9IHt9O1xuICAgIC8qKiBAdHlwZSB7SFRNTEVsZW1lbnRbXX0gKi9cbiAgICBjb25zdCBzd2FsQnV0dG9ucyA9IEFycmF5LmZyb20odGVtcGxhdGVDb250ZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ3N3YWwtYnV0dG9uJykpO1xuICAgIHN3YWxCdXR0b25zLmZvckVhY2goYnV0dG9uID0+IHtcbiAgICAgIHNob3dXYXJuaW5nc0ZvckF0dHJpYnV0ZXMoYnV0dG9uLCBbJ3R5cGUnLCAnY29sb3InLCAnYXJpYS1sYWJlbCddKTtcbiAgICAgIGNvbnN0IHR5cGUgPSBidXR0b24uZ2V0QXR0cmlidXRlKCd0eXBlJyk7XG4gICAgICByZXN1bHRbYCR7dHlwZX1CdXR0b25UZXh0YF0gPSBidXR0b24uaW5uZXJIVE1MO1xuICAgICAgcmVzdWx0W2BzaG93JHtjYXBpdGFsaXplRmlyc3RMZXR0ZXIodHlwZSl9QnV0dG9uYF0gPSB0cnVlO1xuICAgICAgaWYgKGJ1dHRvbi5oYXNBdHRyaWJ1dGUoJ2NvbG9yJykpIHtcbiAgICAgICAgcmVzdWx0W2Ake3R5cGV9QnV0dG9uQ29sb3JgXSA9IGJ1dHRvbi5nZXRBdHRyaWJ1dGUoJ2NvbG9yJyk7XG4gICAgICB9XG4gICAgICBpZiAoYnV0dG9uLmhhc0F0dHJpYnV0ZSgnYXJpYS1sYWJlbCcpKSB7XG4gICAgICAgIHJlc3VsdFtgJHt0eXBlfUJ1dHRvbkFyaWFMYWJlbGBdID0gYnV0dG9uLmdldEF0dHJpYnV0ZSgnYXJpYS1sYWJlbCcpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7RG9jdW1lbnRGcmFnbWVudH0gdGVtcGxhdGVDb250ZW50XG4gICAqIEByZXR1cm5zIHtTd2VldEFsZXJ0T3B0aW9uc31cbiAgICovXG4gIGNvbnN0IGdldFN3YWxJbWFnZSA9IHRlbXBsYXRlQ29udGVudCA9PiB7XG4gICAgY29uc3QgcmVzdWx0ID0ge307XG4gICAgLyoqIEB0eXBlIHtIVE1MRWxlbWVudH0gKi9cbiAgICBjb25zdCBpbWFnZSA9IHRlbXBsYXRlQ29udGVudC5xdWVyeVNlbGVjdG9yKCdzd2FsLWltYWdlJyk7XG4gICAgaWYgKGltYWdlKSB7XG4gICAgICBzaG93V2FybmluZ3NGb3JBdHRyaWJ1dGVzKGltYWdlLCBbJ3NyYycsICd3aWR0aCcsICdoZWlnaHQnLCAnYWx0J10pO1xuICAgICAgaWYgKGltYWdlLmhhc0F0dHJpYnV0ZSgnc3JjJykpIHtcbiAgICAgICAgcmVzdWx0LmltYWdlVXJsID0gaW1hZ2UuZ2V0QXR0cmlidXRlKCdzcmMnKTtcbiAgICAgIH1cbiAgICAgIGlmIChpbWFnZS5oYXNBdHRyaWJ1dGUoJ3dpZHRoJykpIHtcbiAgICAgICAgcmVzdWx0LmltYWdlV2lkdGggPSBpbWFnZS5nZXRBdHRyaWJ1dGUoJ3dpZHRoJyk7XG4gICAgICB9XG4gICAgICBpZiAoaW1hZ2UuaGFzQXR0cmlidXRlKCdoZWlnaHQnKSkge1xuICAgICAgICByZXN1bHQuaW1hZ2VIZWlnaHQgPSBpbWFnZS5nZXRBdHRyaWJ1dGUoJ2hlaWdodCcpO1xuICAgICAgfVxuICAgICAgaWYgKGltYWdlLmhhc0F0dHJpYnV0ZSgnYWx0JykpIHtcbiAgICAgICAgcmVzdWx0LmltYWdlQWx0ID0gaW1hZ2UuZ2V0QXR0cmlidXRlKCdhbHQnKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcblxuICAvKipcbiAgICogQHBhcmFtIHtEb2N1bWVudEZyYWdtZW50fSB0ZW1wbGF0ZUNvbnRlbnRcbiAgICogQHJldHVybnMge1N3ZWV0QWxlcnRPcHRpb25zfVxuICAgKi9cbiAgY29uc3QgZ2V0U3dhbEljb24gPSB0ZW1wbGF0ZUNvbnRlbnQgPT4ge1xuICAgIGNvbnN0IHJlc3VsdCA9IHt9O1xuICAgIC8qKiBAdHlwZSB7SFRNTEVsZW1lbnR9ICovXG4gICAgY29uc3QgaWNvbiA9IHRlbXBsYXRlQ29udGVudC5xdWVyeVNlbGVjdG9yKCdzd2FsLWljb24nKTtcbiAgICBpZiAoaWNvbikge1xuICAgICAgc2hvd1dhcm5pbmdzRm9yQXR0cmlidXRlcyhpY29uLCBbJ3R5cGUnLCAnY29sb3InXSk7XG4gICAgICBpZiAoaWNvbi5oYXNBdHRyaWJ1dGUoJ3R5cGUnKSkge1xuICAgICAgICAvKiogQHR5cGUge1N3ZWV0QWxlcnRJY29ufSAqL1xuICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgIHJlc3VsdC5pY29uID0gaWNvbi5nZXRBdHRyaWJ1dGUoJ3R5cGUnKTtcbiAgICAgIH1cbiAgICAgIGlmIChpY29uLmhhc0F0dHJpYnV0ZSgnY29sb3InKSkge1xuICAgICAgICByZXN1bHQuaWNvbkNvbG9yID0gaWNvbi5nZXRBdHRyaWJ1dGUoJ2NvbG9yJyk7XG4gICAgICB9XG4gICAgICByZXN1bHQuaWNvbkh0bWwgPSBpY29uLmlubmVySFRNTDtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcblxuICAvKipcbiAgICogQHBhcmFtIHtEb2N1bWVudEZyYWdtZW50fSB0ZW1wbGF0ZUNvbnRlbnRcbiAgICogQHJldHVybnMge1N3ZWV0QWxlcnRPcHRpb25zfVxuICAgKi9cbiAgY29uc3QgZ2V0U3dhbElucHV0ID0gdGVtcGxhdGVDb250ZW50ID0+IHtcbiAgICBjb25zdCByZXN1bHQgPSB7fTtcbiAgICAvKiogQHR5cGUge0hUTUxFbGVtZW50fSAqL1xuICAgIGNvbnN0IGlucHV0ID0gdGVtcGxhdGVDb250ZW50LnF1ZXJ5U2VsZWN0b3IoJ3N3YWwtaW5wdXQnKTtcbiAgICBpZiAoaW5wdXQpIHtcbiAgICAgIHNob3dXYXJuaW5nc0ZvckF0dHJpYnV0ZXMoaW5wdXQsIFsndHlwZScsICdsYWJlbCcsICdwbGFjZWhvbGRlcicsICd2YWx1ZSddKTtcbiAgICAgIC8qKiBAdHlwZSB7U3dlZXRBbGVydElucHV0fSAqL1xuICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgcmVzdWx0LmlucHV0ID0gaW5wdXQuZ2V0QXR0cmlidXRlKCd0eXBlJykgfHwgJ3RleHQnO1xuICAgICAgaWYgKGlucHV0Lmhhc0F0dHJpYnV0ZSgnbGFiZWwnKSkge1xuICAgICAgICByZXN1bHQuaW5wdXRMYWJlbCA9IGlucHV0LmdldEF0dHJpYnV0ZSgnbGFiZWwnKTtcbiAgICAgIH1cbiAgICAgIGlmIChpbnB1dC5oYXNBdHRyaWJ1dGUoJ3BsYWNlaG9sZGVyJykpIHtcbiAgICAgICAgcmVzdWx0LmlucHV0UGxhY2Vob2xkZXIgPSBpbnB1dC5nZXRBdHRyaWJ1dGUoJ3BsYWNlaG9sZGVyJyk7XG4gICAgICB9XG4gICAgICBpZiAoaW5wdXQuaGFzQXR0cmlidXRlKCd2YWx1ZScpKSB7XG4gICAgICAgIHJlc3VsdC5pbnB1dFZhbHVlID0gaW5wdXQuZ2V0QXR0cmlidXRlKCd2YWx1ZScpO1xuICAgICAgfVxuICAgIH1cbiAgICAvKiogQHR5cGUge0hUTUxFbGVtZW50W119ICovXG4gICAgY29uc3QgaW5wdXRPcHRpb25zID0gQXJyYXkuZnJvbSh0ZW1wbGF0ZUNvbnRlbnQucXVlcnlTZWxlY3RvckFsbCgnc3dhbC1pbnB1dC1vcHRpb24nKSk7XG4gICAgaWYgKGlucHV0T3B0aW9ucy5sZW5ndGgpIHtcbiAgICAgIHJlc3VsdC5pbnB1dE9wdGlvbnMgPSB7fTtcbiAgICAgIGlucHV0T3B0aW9ucy5mb3JFYWNoKG9wdGlvbiA9PiB7XG4gICAgICAgIHNob3dXYXJuaW5nc0ZvckF0dHJpYnV0ZXMob3B0aW9uLCBbJ3ZhbHVlJ10pO1xuICAgICAgICBjb25zdCBvcHRpb25WYWx1ZSA9IG9wdGlvbi5nZXRBdHRyaWJ1dGUoJ3ZhbHVlJyk7XG4gICAgICAgIGNvbnN0IG9wdGlvbk5hbWUgPSBvcHRpb24uaW5uZXJIVE1MO1xuICAgICAgICByZXN1bHQuaW5wdXRPcHRpb25zW29wdGlvblZhbHVlXSA9IG9wdGlvbk5hbWU7XG4gICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcblxuICAvKipcbiAgICogQHBhcmFtIHtEb2N1bWVudEZyYWdtZW50fSB0ZW1wbGF0ZUNvbnRlbnRcbiAgICogQHBhcmFtIHtzdHJpbmdbXX0gcGFyYW1OYW1lc1xuICAgKiBAcmV0dXJucyB7U3dlZXRBbGVydE9wdGlvbnN9XG4gICAqL1xuICBjb25zdCBnZXRTd2FsU3RyaW5nUGFyYW1zID0gKHRlbXBsYXRlQ29udGVudCwgcGFyYW1OYW1lcykgPT4ge1xuICAgIGNvbnN0IHJlc3VsdCA9IHt9O1xuICAgIGZvciAoY29uc3QgaSBpbiBwYXJhbU5hbWVzKSB7XG4gICAgICBjb25zdCBwYXJhbU5hbWUgPSBwYXJhbU5hbWVzW2ldO1xuICAgICAgLyoqIEB0eXBlIHtIVE1MRWxlbWVudH0gKi9cbiAgICAgIGNvbnN0IHRhZyA9IHRlbXBsYXRlQ29udGVudC5xdWVyeVNlbGVjdG9yKHBhcmFtTmFtZSk7XG4gICAgICBpZiAodGFnKSB7XG4gICAgICAgIHNob3dXYXJuaW5nc0ZvckF0dHJpYnV0ZXModGFnLCBbXSk7XG4gICAgICAgIHJlc3VsdFtwYXJhbU5hbWUucmVwbGFjZSgvXnN3YWwtLywgJycpXSA9IHRhZy5pbm5lckhUTUwudHJpbSgpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xuXG4gIC8qKlxuICAgKiBAcGFyYW0ge0RvY3VtZW50RnJhZ21lbnR9IHRlbXBsYXRlQ29udGVudFxuICAgKi9cbiAgY29uc3Qgc2hvd1dhcm5pbmdzRm9yRWxlbWVudHMgPSB0ZW1wbGF0ZUNvbnRlbnQgPT4ge1xuICAgIGNvbnN0IGFsbG93ZWRFbGVtZW50cyA9IHN3YWxTdHJpbmdQYXJhbXMuY29uY2F0KFsnc3dhbC1wYXJhbScsICdzd2FsLWZ1bmN0aW9uLXBhcmFtJywgJ3N3YWwtYnV0dG9uJywgJ3N3YWwtaW1hZ2UnLCAnc3dhbC1pY29uJywgJ3N3YWwtaW5wdXQnLCAnc3dhbC1pbnB1dC1vcHRpb24nXSk7XG4gICAgQXJyYXkuZnJvbSh0ZW1wbGF0ZUNvbnRlbnQuY2hpbGRyZW4pLmZvckVhY2goZWwgPT4ge1xuICAgICAgY29uc3QgdGFnTmFtZSA9IGVsLnRhZ05hbWUudG9Mb3dlckNhc2UoKTtcbiAgICAgIGlmICghYWxsb3dlZEVsZW1lbnRzLmluY2x1ZGVzKHRhZ05hbWUpKSB7XG4gICAgICAgIHdhcm4oYFVucmVjb2duaXplZCBlbGVtZW50IDwke3RhZ05hbWV9PmApO1xuICAgICAgfVxuICAgIH0pO1xuICB9O1xuXG4gIC8qKlxuICAgKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBlbFxuICAgKiBAcGFyYW0ge3N0cmluZ1tdfSBhbGxvd2VkQXR0cmlidXRlc1xuICAgKi9cbiAgY29uc3Qgc2hvd1dhcm5pbmdzRm9yQXR0cmlidXRlcyA9IChlbCwgYWxsb3dlZEF0dHJpYnV0ZXMpID0+IHtcbiAgICBBcnJheS5mcm9tKGVsLmF0dHJpYnV0ZXMpLmZvckVhY2goYXR0cmlidXRlID0+IHtcbiAgICAgIGlmIChhbGxvd2VkQXR0cmlidXRlcy5pbmRleE9mKGF0dHJpYnV0ZS5uYW1lKSA9PT0gLTEpIHtcbiAgICAgICAgd2FybihbYFVucmVjb2duaXplZCBhdHRyaWJ1dGUgXCIke2F0dHJpYnV0ZS5uYW1lfVwiIG9uIDwke2VsLnRhZ05hbWUudG9Mb3dlckNhc2UoKX0+LmAsIGAke2FsbG93ZWRBdHRyaWJ1dGVzLmxlbmd0aCA/IGBBbGxvd2VkIGF0dHJpYnV0ZXMgYXJlOiAke2FsbG93ZWRBdHRyaWJ1dGVzLmpvaW4oJywgJyl9YCA6ICdUbyBzZXQgdGhlIHZhbHVlLCB1c2UgSFRNTCB3aXRoaW4gdGhlIGVsZW1lbnQuJ31gXSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH07XG5cbiAgY29uc3QgU0hPV19DTEFTU19USU1FT1VUID0gMTA7XG5cbiAgLyoqXG4gICAqIE9wZW4gcG9wdXAsIGFkZCBuZWNlc3NhcnkgY2xhc3NlcyBhbmQgc3R5bGVzLCBmaXggc2Nyb2xsYmFyXG4gICAqXG4gICAqIEBwYXJhbSB7U3dlZXRBbGVydE9wdGlvbnN9IHBhcmFtc1xuICAgKi9cbiAgY29uc3Qgb3BlblBvcHVwID0gcGFyYW1zID0+IHtcbiAgICBjb25zdCBjb250YWluZXIgPSBnZXRDb250YWluZXIoKTtcbiAgICBjb25zdCBwb3B1cCA9IGdldFBvcHVwKCk7XG4gICAgaWYgKHR5cGVvZiBwYXJhbXMud2lsbE9wZW4gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHBhcmFtcy53aWxsT3Blbihwb3B1cCk7XG4gICAgfVxuICAgIGNvbnN0IGJvZHlTdHlsZXMgPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShkb2N1bWVudC5ib2R5KTtcbiAgICBjb25zdCBpbml0aWFsQm9keU92ZXJmbG93ID0gYm9keVN0eWxlcy5vdmVyZmxvd1k7XG4gICAgYWRkQ2xhc3Nlcyhjb250YWluZXIsIHBvcHVwLCBwYXJhbXMpO1xuXG4gICAgLy8gc2Nyb2xsaW5nIGlzICdoaWRkZW4nIHVudGlsIGFuaW1hdGlvbiBpcyBkb25lLCBhZnRlciB0aGF0ICdhdXRvJ1xuICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgc2V0U2Nyb2xsaW5nVmlzaWJpbGl0eShjb250YWluZXIsIHBvcHVwKTtcbiAgICB9LCBTSE9XX0NMQVNTX1RJTUVPVVQpO1xuICAgIGlmIChpc01vZGFsKCkpIHtcbiAgICAgIGZpeFNjcm9sbENvbnRhaW5lcihjb250YWluZXIsIHBhcmFtcy5zY3JvbGxiYXJQYWRkaW5nLCBpbml0aWFsQm9keU92ZXJmbG93KTtcbiAgICAgIHNldEFyaWFIaWRkZW4oKTtcbiAgICB9XG4gICAgaWYgKCFpc1RvYXN0KCkgJiYgIWdsb2JhbFN0YXRlLnByZXZpb3VzQWN0aXZlRWxlbWVudCkge1xuICAgICAgZ2xvYmFsU3RhdGUucHJldmlvdXNBY3RpdmVFbGVtZW50ID0gZG9jdW1lbnQuYWN0aXZlRWxlbWVudDtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBwYXJhbXMuZGlkT3BlbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgc2V0VGltZW91dCgoKSA9PiBwYXJhbXMuZGlkT3Blbihwb3B1cCkpO1xuICAgIH1cbiAgICByZW1vdmVDbGFzcyhjb250YWluZXIsIHN3YWxDbGFzc2VzWyduby10cmFuc2l0aW9uJ10pO1xuICB9O1xuXG4gIC8qKlxuICAgKiBAcGFyYW0ge0FuaW1hdGlvbkV2ZW50fSBldmVudFxuICAgKi9cbiAgY29uc3Qgc3dhbE9wZW5BbmltYXRpb25GaW5pc2hlZCA9IGV2ZW50ID0+IHtcbiAgICBjb25zdCBwb3B1cCA9IGdldFBvcHVwKCk7XG4gICAgaWYgKGV2ZW50LnRhcmdldCAhPT0gcG9wdXApIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3QgY29udGFpbmVyID0gZ2V0Q29udGFpbmVyKCk7XG4gICAgcG9wdXAucmVtb3ZlRXZlbnRMaXN0ZW5lcihhbmltYXRpb25FbmRFdmVudCwgc3dhbE9wZW5BbmltYXRpb25GaW5pc2hlZCk7XG4gICAgY29udGFpbmVyLnN0eWxlLm92ZXJmbG93WSA9ICdhdXRvJztcbiAgfTtcblxuICAvKipcbiAgICogQHBhcmFtIHtIVE1MRWxlbWVudH0gY29udGFpbmVyXG4gICAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IHBvcHVwXG4gICAqL1xuICBjb25zdCBzZXRTY3JvbGxpbmdWaXNpYmlsaXR5ID0gKGNvbnRhaW5lciwgcG9wdXApID0+IHtcbiAgICBpZiAoYW5pbWF0aW9uRW5kRXZlbnQgJiYgaGFzQ3NzQW5pbWF0aW9uKHBvcHVwKSkge1xuICAgICAgY29udGFpbmVyLnN0eWxlLm92ZXJmbG93WSA9ICdoaWRkZW4nO1xuICAgICAgcG9wdXAuYWRkRXZlbnRMaXN0ZW5lcihhbmltYXRpb25FbmRFdmVudCwgc3dhbE9wZW5BbmltYXRpb25GaW5pc2hlZCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnRhaW5lci5zdHlsZS5vdmVyZmxvd1kgPSAnYXV0byc7XG4gICAgfVxuICB9O1xuXG4gIC8qKlxuICAgKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBjb250YWluZXJcbiAgICogQHBhcmFtIHtib29sZWFufSBzY3JvbGxiYXJQYWRkaW5nXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBpbml0aWFsQm9keU92ZXJmbG93XG4gICAqL1xuICBjb25zdCBmaXhTY3JvbGxDb250YWluZXIgPSAoY29udGFpbmVyLCBzY3JvbGxiYXJQYWRkaW5nLCBpbml0aWFsQm9keU92ZXJmbG93KSA9PiB7XG4gICAgaU9TZml4KCk7XG4gICAgaWYgKHNjcm9sbGJhclBhZGRpbmcgJiYgaW5pdGlhbEJvZHlPdmVyZmxvdyAhPT0gJ2hpZGRlbicpIHtcbiAgICAgIGZpeFNjcm9sbGJhcigpO1xuICAgIH1cblxuICAgIC8vIHN3ZWV0YWxlcnQyL2lzc3Vlcy8xMjQ3XG4gICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICBjb250YWluZXIuc2Nyb2xsVG9wID0gMDtcbiAgICB9KTtcbiAgfTtcblxuICAvKipcbiAgICogQHBhcmFtIHtIVE1MRWxlbWVudH0gY29udGFpbmVyXG4gICAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IHBvcHVwXG4gICAqIEBwYXJhbSB7U3dlZXRBbGVydE9wdGlvbnN9IHBhcmFtc1xuICAgKi9cbiAgY29uc3QgYWRkQ2xhc3NlcyA9IChjb250YWluZXIsIHBvcHVwLCBwYXJhbXMpID0+IHtcbiAgICBhZGRDbGFzcyhjb250YWluZXIsIHBhcmFtcy5zaG93Q2xhc3MuYmFja2Ryb3ApO1xuICAgIC8vIHRoaXMgd29ya2Fyb3VuZCB3aXRoIG9wYWNpdHkgaXMgbmVlZGVkIGZvciBodHRwczovL2dpdGh1Yi5jb20vc3dlZXRhbGVydDIvc3dlZXRhbGVydDIvaXNzdWVzLzIwNTlcbiAgICBwb3B1cC5zdHlsZS5zZXRQcm9wZXJ0eSgnb3BhY2l0eScsICcwJywgJ2ltcG9ydGFudCcpO1xuICAgIHNob3cocG9wdXAsICdncmlkJyk7XG4gICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAvLyBBbmltYXRlIHBvcHVwIHJpZ2h0IGFmdGVyIHNob3dpbmcgaXRcbiAgICAgIGFkZENsYXNzKHBvcHVwLCBwYXJhbXMuc2hvd0NsYXNzLnBvcHVwKTtcbiAgICAgIC8vIGFuZCByZW1vdmUgdGhlIG9wYWNpdHkgd29ya2Fyb3VuZFxuICAgICAgcG9wdXAuc3R5bGUucmVtb3ZlUHJvcGVydHkoJ29wYWNpdHknKTtcbiAgICB9LCBTSE9XX0NMQVNTX1RJTUVPVVQpOyAvLyAxMG1zIGluIG9yZGVyIHRvIGZpeCAjMjA2MlxuXG4gICAgYWRkQ2xhc3MoW2RvY3VtZW50LmRvY3VtZW50RWxlbWVudCwgZG9jdW1lbnQuYm9keV0sIHN3YWxDbGFzc2VzLnNob3duKTtcbiAgICBpZiAocGFyYW1zLmhlaWdodEF1dG8gJiYgcGFyYW1zLmJhY2tkcm9wICYmICFwYXJhbXMudG9hc3QpIHtcbiAgICAgIGFkZENsYXNzKFtkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQsIGRvY3VtZW50LmJvZHldLCBzd2FsQ2xhc3Nlc1snaGVpZ2h0LWF1dG8nXSk7XG4gICAgfVxuICB9O1xuXG4gIHZhciBkZWZhdWx0SW5wdXRWYWxpZGF0b3JzID0ge1xuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBzdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdmFsaWRhdGlvbk1lc3NhZ2VcbiAgICAgKiBAcmV0dXJucyB7UHJvbWlzZTx2b2lkIHwgc3RyaW5nPn1cbiAgICAgKi9cbiAgICBlbWFpbDogKHN0cmluZywgdmFsaWRhdGlvbk1lc3NhZ2UpID0+IHtcbiAgICAgIHJldHVybiAvXlthLXpBLVowLTkuK18tXStAW2EtekEtWjAtOS4tXStcXC5bYS16QS1aMC05LV17MiwyNH0kLy50ZXN0KHN0cmluZykgPyBQcm9taXNlLnJlc29sdmUoKSA6IFByb21pc2UucmVzb2x2ZSh2YWxpZGF0aW9uTWVzc2FnZSB8fCAnSW52YWxpZCBlbWFpbCBhZGRyZXNzJyk7XG4gICAgfSxcbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gc3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHZhbGlkYXRpb25NZXNzYWdlXG4gICAgICogQHJldHVybnMge1Byb21pc2U8dm9pZCB8IHN0cmluZz59XG4gICAgICovXG4gICAgdXJsOiAoc3RyaW5nLCB2YWxpZGF0aW9uTWVzc2FnZSkgPT4ge1xuICAgICAgLy8gdGFrZW4gZnJvbSBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL2EvMzgwOTQzNSB3aXRoIGEgc21hbGwgY2hhbmdlIGZyb20gIzEzMDYgYW5kICMyMDEzXG4gICAgICByZXR1cm4gL15odHRwcz86XFwvXFwvKHd3d1xcLik/Wy1hLXpBLVowLTlAOiUuXyt+Iz1dezEsMjU2fVxcLlthLXpdezIsNjN9XFxiKFstYS16QS1aMC05QDolXysufiM/Ji89XSopJC8udGVzdChzdHJpbmcpID8gUHJvbWlzZS5yZXNvbHZlKCkgOiBQcm9taXNlLnJlc29sdmUodmFsaWRhdGlvbk1lc3NhZ2UgfHwgJ0ludmFsaWQgVVJMJyk7XG4gICAgfVxuICB9O1xuXG4gIC8qKlxuICAgKiBAcGFyYW0ge1N3ZWV0QWxlcnRPcHRpb25zfSBwYXJhbXNcbiAgICovXG4gIGZ1bmN0aW9uIHNldERlZmF1bHRJbnB1dFZhbGlkYXRvcnMocGFyYW1zKSB7XG4gICAgLy8gVXNlIGRlZmF1bHQgYGlucHV0VmFsaWRhdG9yYCBmb3Igc3VwcG9ydGVkIGlucHV0IHR5cGVzIGlmIG5vdCBwcm92aWRlZFxuICAgIGlmICghcGFyYW1zLmlucHV0VmFsaWRhdG9yKSB7XG4gICAgICBPYmplY3Qua2V5cyhkZWZhdWx0SW5wdXRWYWxpZGF0b3JzKS5mb3JFYWNoKGtleSA9PiB7XG4gICAgICAgIGlmIChwYXJhbXMuaW5wdXQgPT09IGtleSkge1xuICAgICAgICAgIHBhcmFtcy5pbnB1dFZhbGlkYXRvciA9IGRlZmF1bHRJbnB1dFZhbGlkYXRvcnNba2V5XTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7U3dlZXRBbGVydE9wdGlvbnN9IHBhcmFtc1xuICAgKi9cbiAgZnVuY3Rpb24gdmFsaWRhdGVDdXN0b21UYXJnZXRFbGVtZW50KHBhcmFtcykge1xuICAgIC8vIERldGVybWluZSBpZiB0aGUgY3VzdG9tIHRhcmdldCBlbGVtZW50IGlzIHZhbGlkXG4gICAgaWYgKCFwYXJhbXMudGFyZ2V0IHx8IHR5cGVvZiBwYXJhbXMudGFyZ2V0ID09PSAnc3RyaW5nJyAmJiAhZG9jdW1lbnQucXVlcnlTZWxlY3RvcihwYXJhbXMudGFyZ2V0KSB8fCB0eXBlb2YgcGFyYW1zLnRhcmdldCAhPT0gJ3N0cmluZycgJiYgIXBhcmFtcy50YXJnZXQuYXBwZW5kQ2hpbGQpIHtcbiAgICAgIHdhcm4oJ1RhcmdldCBwYXJhbWV0ZXIgaXMgbm90IHZhbGlkLCBkZWZhdWx0aW5nIHRvIFwiYm9keVwiJyk7XG4gICAgICBwYXJhbXMudGFyZ2V0ID0gJ2JvZHknO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBTZXQgdHlwZSwgdGV4dCBhbmQgYWN0aW9ucyBvbiBwb3B1cFxuICAgKlxuICAgKiBAcGFyYW0ge1N3ZWV0QWxlcnRPcHRpb25zfSBwYXJhbXNcbiAgICovXG4gIGZ1bmN0aW9uIHNldFBhcmFtZXRlcnMocGFyYW1zKSB7XG4gICAgc2V0RGVmYXVsdElucHV0VmFsaWRhdG9ycyhwYXJhbXMpO1xuXG4gICAgLy8gc2hvd0xvYWRlck9uQ29uZmlybSAmJiBwcmVDb25maXJtXG4gICAgaWYgKHBhcmFtcy5zaG93TG9hZGVyT25Db25maXJtICYmICFwYXJhbXMucHJlQ29uZmlybSkge1xuICAgICAgd2Fybignc2hvd0xvYWRlck9uQ29uZmlybSBpcyBzZXQgdG8gdHJ1ZSwgYnV0IHByZUNvbmZpcm0gaXMgbm90IGRlZmluZWQuXFxuJyArICdzaG93TG9hZGVyT25Db25maXJtIHNob3VsZCBiZSB1c2VkIHRvZ2V0aGVyIHdpdGggcHJlQ29uZmlybSwgc2VlIHVzYWdlIGV4YW1wbGU6XFxuJyArICdodHRwczovL3N3ZWV0YWxlcnQyLmdpdGh1Yi5pby8jYWpheC1yZXF1ZXN0Jyk7XG4gICAgfVxuICAgIHZhbGlkYXRlQ3VzdG9tVGFyZ2V0RWxlbWVudChwYXJhbXMpO1xuXG4gICAgLy8gUmVwbGFjZSBuZXdsaW5lcyB3aXRoIDxicj4gaW4gdGl0bGVcbiAgICBpZiAodHlwZW9mIHBhcmFtcy50aXRsZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHBhcmFtcy50aXRsZSA9IHBhcmFtcy50aXRsZS5zcGxpdCgnXFxuJykuam9pbignPGJyIC8+Jyk7XG4gICAgfVxuICAgIGluaXQocGFyYW1zKTtcbiAgfVxuXG4gIGxldCBjdXJyZW50SW5zdGFuY2U7XG4gIGNsYXNzIFN3ZWV0QWxlcnQge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgLy8gUHJldmVudCBydW4gaW4gTm9kZSBlbnZcbiAgICAgIGlmICh0eXBlb2Ygd2luZG93ID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBjdXJyZW50SW5zdGFuY2UgPSB0aGlzO1xuXG4gICAgICAvLyBAdHMtaWdub3JlXG4gICAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IG91dGVyUGFyYW1zID0gT2JqZWN0LmZyZWV6ZSh0aGlzLmNvbnN0cnVjdG9yLmFyZ3NUb1BhcmFtcyhhcmdzKSk7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydGllcyh0aGlzLCB7XG4gICAgICAgIHBhcmFtczoge1xuICAgICAgICAgIHZhbHVlOiBvdXRlclBhcmFtcyxcbiAgICAgICAgICB3cml0YWJsZTogZmFsc2UsXG4gICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICAgICAgfVxuICAgICAgfSk7XG5cbiAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgIGNvbnN0IHByb21pc2UgPSBjdXJyZW50SW5zdGFuY2UuX21haW4oY3VycmVudEluc3RhbmNlLnBhcmFtcyk7XG4gICAgICBwcml2YXRlUHJvcHMucHJvbWlzZS5zZXQodGhpcywgcHJvbWlzZSk7XG4gICAgfVxuICAgIF9tYWluKHVzZXJQYXJhbXMpIHtcbiAgICAgIGxldCBtaXhpblBhcmFtcyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDoge307XG4gICAgICBzaG93V2FybmluZ3NGb3JQYXJhbXMoT2JqZWN0LmFzc2lnbih7fSwgbWl4aW5QYXJhbXMsIHVzZXJQYXJhbXMpKTtcbiAgICAgIGlmIChnbG9iYWxTdGF0ZS5jdXJyZW50SW5zdGFuY2UpIHtcbiAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICBnbG9iYWxTdGF0ZS5jdXJyZW50SW5zdGFuY2UuX2Rlc3Ryb3koKTtcbiAgICAgICAgaWYgKGlzTW9kYWwoKSkge1xuICAgICAgICAgIHVuc2V0QXJpYUhpZGRlbigpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBnbG9iYWxTdGF0ZS5jdXJyZW50SW5zdGFuY2UgPSBjdXJyZW50SW5zdGFuY2U7XG4gICAgICBjb25zdCBpbm5lclBhcmFtcyA9IHByZXBhcmVQYXJhbXModXNlclBhcmFtcywgbWl4aW5QYXJhbXMpO1xuICAgICAgc2V0UGFyYW1ldGVycyhpbm5lclBhcmFtcyk7XG4gICAgICBPYmplY3QuZnJlZXplKGlubmVyUGFyYW1zKTtcblxuICAgICAgLy8gY2xlYXIgdGhlIHByZXZpb3VzIHRpbWVyXG4gICAgICBpZiAoZ2xvYmFsU3RhdGUudGltZW91dCkge1xuICAgICAgICBnbG9iYWxTdGF0ZS50aW1lb3V0LnN0b3AoKTtcbiAgICAgICAgZGVsZXRlIGdsb2JhbFN0YXRlLnRpbWVvdXQ7XG4gICAgICB9XG5cbiAgICAgIC8vIGNsZWFyIHRoZSByZXN0b3JlIGZvY3VzIHRpbWVvdXRcbiAgICAgIGNsZWFyVGltZW91dChnbG9iYWxTdGF0ZS5yZXN0b3JlRm9jdXNUaW1lb3V0KTtcbiAgICAgIGNvbnN0IGRvbUNhY2hlID0gcG9wdWxhdGVEb21DYWNoZShjdXJyZW50SW5zdGFuY2UpO1xuICAgICAgcmVuZGVyKGN1cnJlbnRJbnN0YW5jZSwgaW5uZXJQYXJhbXMpO1xuICAgICAgcHJpdmF0ZVByb3BzLmlubmVyUGFyYW1zLnNldChjdXJyZW50SW5zdGFuY2UsIGlubmVyUGFyYW1zKTtcbiAgICAgIHJldHVybiBzd2FsUHJvbWlzZShjdXJyZW50SW5zdGFuY2UsIGRvbUNhY2hlLCBpbm5lclBhcmFtcyk7XG4gICAgfVxuXG4gICAgLy8gYGNhdGNoYCBjYW5ub3QgYmUgdGhlIG5hbWUgb2YgYSBtb2R1bGUgZXhwb3J0LCBzbyB3ZSBkZWZpbmUgb3VyIHRoZW5hYmxlIG1ldGhvZHMgaGVyZSBpbnN0ZWFkXG4gICAgdGhlbihvbkZ1bGZpbGxlZCkge1xuICAgICAgY29uc3QgcHJvbWlzZSA9IHByaXZhdGVQcm9wcy5wcm9taXNlLmdldCh0aGlzKTtcbiAgICAgIHJldHVybiBwcm9taXNlLnRoZW4ob25GdWxmaWxsZWQpO1xuICAgIH1cbiAgICBmaW5hbGx5KG9uRmluYWxseSkge1xuICAgICAgY29uc3QgcHJvbWlzZSA9IHByaXZhdGVQcm9wcy5wcm9taXNlLmdldCh0aGlzKTtcbiAgICAgIHJldHVybiBwcm9taXNlLmZpbmFsbHkob25GaW5hbGx5KTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtTd2VldEFsZXJ0Mn0gaW5zdGFuY2VcbiAgICogQHBhcmFtIHtEb21DYWNoZX0gZG9tQ2FjaGVcbiAgICogQHBhcmFtIHtTd2VldEFsZXJ0T3B0aW9uc30gaW5uZXJQYXJhbXNcbiAgICogQHJldHVybnMge1Byb21pc2V9XG4gICAqL1xuICBjb25zdCBzd2FsUHJvbWlzZSA9IChpbnN0YW5jZSwgZG9tQ2FjaGUsIGlubmVyUGFyYW1zKSA9PiB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgIC8vIGZ1bmN0aW9ucyB0byBoYW5kbGUgYWxsIGNsb3NpbmdzL2Rpc21pc3NhbHNcbiAgICAgIC8qKlxuICAgICAgICogQHBhcmFtIHtEaXNtaXNzUmVhc29ufSBkaXNtaXNzXG4gICAgICAgKi9cbiAgICAgIGNvbnN0IGRpc21pc3NXaXRoID0gZGlzbWlzcyA9PiB7XG4gICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgaW5zdGFuY2UuY2xvc2Uoe1xuICAgICAgICAgIGlzRGlzbWlzc2VkOiB0cnVlLFxuICAgICAgICAgIGRpc21pc3NcbiAgICAgICAgfSk7XG4gICAgICB9O1xuICAgICAgcHJpdmF0ZU1ldGhvZHMuc3dhbFByb21pc2VSZXNvbHZlLnNldChpbnN0YW5jZSwgcmVzb2x2ZSk7XG4gICAgICBwcml2YXRlTWV0aG9kcy5zd2FsUHJvbWlzZVJlamVjdC5zZXQoaW5zdGFuY2UsIHJlamVjdCk7XG4gICAgICBkb21DYWNoZS5jb25maXJtQnV0dG9uLm9uY2xpY2sgPSAoKSA9PiB7XG4gICAgICAgIGhhbmRsZUNvbmZpcm1CdXR0b25DbGljayhpbnN0YW5jZSk7XG4gICAgICB9O1xuICAgICAgZG9tQ2FjaGUuZGVueUJ1dHRvbi5vbmNsaWNrID0gKCkgPT4ge1xuICAgICAgICBoYW5kbGVEZW55QnV0dG9uQ2xpY2soaW5zdGFuY2UpO1xuICAgICAgfTtcbiAgICAgIGRvbUNhY2hlLmNhbmNlbEJ1dHRvbi5vbmNsaWNrID0gKCkgPT4ge1xuICAgICAgICBoYW5kbGVDYW5jZWxCdXR0b25DbGljayhpbnN0YW5jZSwgZGlzbWlzc1dpdGgpO1xuICAgICAgfTtcbiAgICAgIGRvbUNhY2hlLmNsb3NlQnV0dG9uLm9uY2xpY2sgPSAoKSA9PiB7XG4gICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgZGlzbWlzc1dpdGgoRGlzbWlzc1JlYXNvbi5jbG9zZSk7XG4gICAgICB9O1xuICAgICAgaGFuZGxlUG9wdXBDbGljayhpbnN0YW5jZSwgZG9tQ2FjaGUsIGRpc21pc3NXaXRoKTtcbiAgICAgIGFkZEtleWRvd25IYW5kbGVyKGluc3RhbmNlLCBnbG9iYWxTdGF0ZSwgaW5uZXJQYXJhbXMsIGRpc21pc3NXaXRoKTtcbiAgICAgIGhhbmRsZUlucHV0T3B0aW9uc0FuZFZhbHVlKGluc3RhbmNlLCBpbm5lclBhcmFtcyk7XG4gICAgICBvcGVuUG9wdXAoaW5uZXJQYXJhbXMpO1xuICAgICAgc2V0dXBUaW1lcihnbG9iYWxTdGF0ZSwgaW5uZXJQYXJhbXMsIGRpc21pc3NXaXRoKTtcbiAgICAgIGluaXRGb2N1cyhkb21DYWNoZSwgaW5uZXJQYXJhbXMpO1xuXG4gICAgICAvLyBTY3JvbGwgY29udGFpbmVyIHRvIHRvcCBvbiBvcGVuICgjMTI0NywgIzE5NDYpXG4gICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgZG9tQ2FjaGUuY29udGFpbmVyLnNjcm9sbFRvcCA9IDA7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfTtcblxuICAvKipcbiAgICogQHBhcmFtIHtTd2VldEFsZXJ0T3B0aW9uc30gdXNlclBhcmFtc1xuICAgKiBAcGFyYW0ge1N3ZWV0QWxlcnRPcHRpb25zfSBtaXhpblBhcmFtc1xuICAgKiBAcmV0dXJucyB7U3dlZXRBbGVydE9wdGlvbnN9XG4gICAqL1xuICBjb25zdCBwcmVwYXJlUGFyYW1zID0gKHVzZXJQYXJhbXMsIG1peGluUGFyYW1zKSA9PiB7XG4gICAgY29uc3QgdGVtcGxhdGVQYXJhbXMgPSBnZXRUZW1wbGF0ZVBhcmFtcyh1c2VyUGFyYW1zKTtcbiAgICBjb25zdCBwYXJhbXMgPSBPYmplY3QuYXNzaWduKHt9LCBkZWZhdWx0UGFyYW1zLCBtaXhpblBhcmFtcywgdGVtcGxhdGVQYXJhbXMsIHVzZXJQYXJhbXMpOyAvLyBwcmVjZWRlbmNlIGlzIGRlc2NyaWJlZCBpbiAjMjEzMVxuICAgIHBhcmFtcy5zaG93Q2xhc3MgPSBPYmplY3QuYXNzaWduKHt9LCBkZWZhdWx0UGFyYW1zLnNob3dDbGFzcywgcGFyYW1zLnNob3dDbGFzcyk7XG4gICAgcGFyYW1zLmhpZGVDbGFzcyA9IE9iamVjdC5hc3NpZ24oe30sIGRlZmF1bHRQYXJhbXMuaGlkZUNsYXNzLCBwYXJhbXMuaGlkZUNsYXNzKTtcbiAgICByZXR1cm4gcGFyYW1zO1xuICB9O1xuXG4gIC8qKlxuICAgKiBAcGFyYW0ge1N3ZWV0QWxlcnQyfSBpbnN0YW5jZVxuICAgKiBAcmV0dXJucyB7RG9tQ2FjaGV9XG4gICAqL1xuICBjb25zdCBwb3B1bGF0ZURvbUNhY2hlID0gaW5zdGFuY2UgPT4ge1xuICAgIGNvbnN0IGRvbUNhY2hlID0ge1xuICAgICAgcG9wdXA6IGdldFBvcHVwKCksXG4gICAgICBjb250YWluZXI6IGdldENvbnRhaW5lcigpLFxuICAgICAgYWN0aW9uczogZ2V0QWN0aW9ucygpLFxuICAgICAgY29uZmlybUJ1dHRvbjogZ2V0Q29uZmlybUJ1dHRvbigpLFxuICAgICAgZGVueUJ1dHRvbjogZ2V0RGVueUJ1dHRvbigpLFxuICAgICAgY2FuY2VsQnV0dG9uOiBnZXRDYW5jZWxCdXR0b24oKSxcbiAgICAgIGxvYWRlcjogZ2V0TG9hZGVyKCksXG4gICAgICBjbG9zZUJ1dHRvbjogZ2V0Q2xvc2VCdXR0b24oKSxcbiAgICAgIHZhbGlkYXRpb25NZXNzYWdlOiBnZXRWYWxpZGF0aW9uTWVzc2FnZSgpLFxuICAgICAgcHJvZ3Jlc3NTdGVwczogZ2V0UHJvZ3Jlc3NTdGVwcygpXG4gICAgfTtcbiAgICBwcml2YXRlUHJvcHMuZG9tQ2FjaGUuc2V0KGluc3RhbmNlLCBkb21DYWNoZSk7XG4gICAgcmV0dXJuIGRvbUNhY2hlO1xuICB9O1xuXG4gIC8qKlxuICAgKiBAcGFyYW0ge0dsb2JhbFN0YXRlfSBnbG9iYWxTdGF0ZVxuICAgKiBAcGFyYW0ge1N3ZWV0QWxlcnRPcHRpb25zfSBpbm5lclBhcmFtc1xuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBkaXNtaXNzV2l0aFxuICAgKi9cbiAgY29uc3Qgc2V0dXBUaW1lciA9IChnbG9iYWxTdGF0ZSwgaW5uZXJQYXJhbXMsIGRpc21pc3NXaXRoKSA9PiB7XG4gICAgY29uc3QgdGltZXJQcm9ncmVzc0JhciA9IGdldFRpbWVyUHJvZ3Jlc3NCYXIoKTtcbiAgICBoaWRlKHRpbWVyUHJvZ3Jlc3NCYXIpO1xuICAgIGlmIChpbm5lclBhcmFtcy50aW1lcikge1xuICAgICAgZ2xvYmFsU3RhdGUudGltZW91dCA9IG5ldyBUaW1lcigoKSA9PiB7XG4gICAgICAgIGRpc21pc3NXaXRoKCd0aW1lcicpO1xuICAgICAgICBkZWxldGUgZ2xvYmFsU3RhdGUudGltZW91dDtcbiAgICAgIH0sIGlubmVyUGFyYW1zLnRpbWVyKTtcbiAgICAgIGlmIChpbm5lclBhcmFtcy50aW1lclByb2dyZXNzQmFyKSB7XG4gICAgICAgIHNob3codGltZXJQcm9ncmVzc0Jhcik7XG4gICAgICAgIGFwcGx5Q3VzdG9tQ2xhc3ModGltZXJQcm9ncmVzc0JhciwgaW5uZXJQYXJhbXMsICd0aW1lclByb2dyZXNzQmFyJyk7XG4gICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgIGlmIChnbG9iYWxTdGF0ZS50aW1lb3V0ICYmIGdsb2JhbFN0YXRlLnRpbWVvdXQucnVubmluZykge1xuICAgICAgICAgICAgLy8gdGltZXIgY2FuIGJlIGFscmVhZHkgc3RvcHBlZCBvciB1bnNldCBhdCB0aGlzIHBvaW50XG4gICAgICAgICAgICBhbmltYXRlVGltZXJQcm9ncmVzc0Jhcihpbm5lclBhcmFtcy50aW1lcik7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7RG9tQ2FjaGV9IGRvbUNhY2hlXG4gICAqIEBwYXJhbSB7U3dlZXRBbGVydE9wdGlvbnN9IGlubmVyUGFyYW1zXG4gICAqL1xuICBjb25zdCBpbml0Rm9jdXMgPSAoZG9tQ2FjaGUsIGlubmVyUGFyYW1zKSA9PiB7XG4gICAgaWYgKGlubmVyUGFyYW1zLnRvYXN0KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmICghY2FsbElmRnVuY3Rpb24oaW5uZXJQYXJhbXMuYWxsb3dFbnRlcktleSkpIHtcbiAgICAgIGJsdXJBY3RpdmVFbGVtZW50KCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmICghZm9jdXNCdXR0b24oZG9tQ2FjaGUsIGlubmVyUGFyYW1zKSkge1xuICAgICAgc2V0Rm9jdXMoLTEsIDEpO1xuICAgIH1cbiAgfTtcblxuICAvKipcbiAgICogQHBhcmFtIHtEb21DYWNoZX0gZG9tQ2FjaGVcbiAgICogQHBhcmFtIHtTd2VldEFsZXJ0T3B0aW9uc30gaW5uZXJQYXJhbXNcbiAgICogQHJldHVybnMge2Jvb2xlYW59XG4gICAqL1xuICBjb25zdCBmb2N1c0J1dHRvbiA9IChkb21DYWNoZSwgaW5uZXJQYXJhbXMpID0+IHtcbiAgICBpZiAoaW5uZXJQYXJhbXMuZm9jdXNEZW55ICYmIGlzVmlzaWJsZSQxKGRvbUNhY2hlLmRlbnlCdXR0b24pKSB7XG4gICAgICBkb21DYWNoZS5kZW55QnV0dG9uLmZvY3VzKCk7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgaWYgKGlubmVyUGFyYW1zLmZvY3VzQ2FuY2VsICYmIGlzVmlzaWJsZSQxKGRvbUNhY2hlLmNhbmNlbEJ1dHRvbikpIHtcbiAgICAgIGRvbUNhY2hlLmNhbmNlbEJ1dHRvbi5mb2N1cygpO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIGlmIChpbm5lclBhcmFtcy5mb2N1c0NvbmZpcm0gJiYgaXNWaXNpYmxlJDEoZG9tQ2FjaGUuY29uZmlybUJ1dHRvbikpIHtcbiAgICAgIGRvbUNhY2hlLmNvbmZpcm1CdXR0b24uZm9jdXMoKTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG4gIH07XG4gIGNvbnN0IGJsdXJBY3RpdmVFbGVtZW50ID0gKCkgPT4ge1xuICAgIGlmIChkb2N1bWVudC5hY3RpdmVFbGVtZW50IGluc3RhbmNlb2YgSFRNTEVsZW1lbnQgJiYgdHlwZW9mIGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQuYmx1ciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgZG9jdW1lbnQuYWN0aXZlRWxlbWVudC5ibHVyKCk7XG4gICAgfVxuICB9O1xuXG4gIC8vIERlYXIgcnVzc2lhbiB1c2VycyB2aXNpdGluZyBydXNzaWFuIHNpdGVzLiBMZXQncyBoYXZlIGZ1bi5cbiAgaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIC9ecnVcXGIvLnRlc3QobmF2aWdhdG9yLmxhbmd1YWdlKSAmJiBsb2NhdGlvbi5ob3N0Lm1hdGNoKC9cXC4ocnV8c3V8eG4tLXAxYWkpJC8pKSB7XG4gICAgY29uc3Qgbm93ID0gbmV3IERhdGUoKTtcbiAgICBjb25zdCBpbml0aWF0aW9uRGF0ZSA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKCdzd2FsLWluaXRpYXRpb24nKTtcbiAgICBpZiAoIWluaXRpYXRpb25EYXRlKSB7XG4gICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSgnc3dhbC1pbml0aWF0aW9uJywgYCR7bm93fWApO1xuICAgIH0gZWxzZSBpZiAoKG5vdy5nZXRUaW1lKCkgLSBEYXRlLnBhcnNlKGluaXRpYXRpb25EYXRlKSkgLyAoMTAwMCAqIDYwICogNjAgKiAyNCkgPiAzKSB7XG4gICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgZG9jdW1lbnQuYm9keS5zdHlsZS5wb2ludGVyRXZlbnRzID0gJ25vbmUnO1xuICAgICAgICBjb25zdCB1a3JhaW5pYW5BbnRoZW0gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdhdWRpbycpO1xuICAgICAgICB1a3JhaW5pYW5BbnRoZW0uc3JjID0gJ2h0dHBzOi8vZmxhZy1naW1uLnJ1L3dwLWNvbnRlbnQvdXBsb2Fkcy8yMDIxLzA5L1VrcmFpbmEubXAzJztcbiAgICAgICAgdWtyYWluaWFuQW50aGVtLmxvb3AgPSB0cnVlO1xuICAgICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKHVrcmFpbmlhbkFudGhlbSk7XG4gICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgIHVrcmFpbmlhbkFudGhlbS5wbGF5KCkuY2F0Y2goKCkgPT4ge1xuICAgICAgICAgICAgLy8gaWdub3JlXG4gICAgICAgICAgfSk7XG4gICAgICAgIH0sIDI1MDApO1xuICAgICAgfSwgNTAwKTtcbiAgICB9XG4gIH1cblxuICAvLyBBc3NpZ24gaW5zdGFuY2UgbWV0aG9kcyBmcm9tIHNyYy9pbnN0YW5jZU1ldGhvZHMvKi5qcyB0byBwcm90b3R5cGVcbiAgT2JqZWN0LmFzc2lnbihTd2VldEFsZXJ0LnByb3RvdHlwZSwgaW5zdGFuY2VNZXRob2RzKTtcblxuICAvLyBBc3NpZ24gc3RhdGljIG1ldGhvZHMgZnJvbSBzcmMvc3RhdGljTWV0aG9kcy8qLmpzIHRvIGNvbnN0cnVjdG9yXG4gIE9iamVjdC5hc3NpZ24oU3dlZXRBbGVydCwgc3RhdGljTWV0aG9kcyk7XG5cbiAgLy8gUHJveHkgdG8gaW5zdGFuY2UgbWV0aG9kcyB0byBjb25zdHJ1Y3RvciwgZm9yIG5vdywgZm9yIGJhY2t3YXJkcyBjb21wYXRpYmlsaXR5XG4gIE9iamVjdC5rZXlzKGluc3RhbmNlTWV0aG9kcykuZm9yRWFjaChrZXkgPT4ge1xuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7Li4uYW55fSBhcmdzXG4gICAgICogQHJldHVybnMge2FueSB8IHVuZGVmaW5lZH1cbiAgICAgKi9cbiAgICBTd2VldEFsZXJ0W2tleV0gPSBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoY3VycmVudEluc3RhbmNlKSB7XG4gICAgICAgIHJldHVybiBjdXJyZW50SW5zdGFuY2Vba2V5XSguLi5hcmd1bWVudHMpO1xuICAgICAgfVxuICAgIH07XG4gIH0pO1xuICBTd2VldEFsZXJ0LkRpc21pc3NSZWFzb24gPSBEaXNtaXNzUmVhc29uO1xuICBTd2VldEFsZXJ0LnZlcnNpb24gPSAnMTEuNy4xJztcblxuICBjb25zdCBTd2FsID0gU3dlZXRBbGVydDtcbiAgLy8gQHRzLWlnbm9yZVxuICBTd2FsLmRlZmF1bHQgPSBTd2FsO1xuXG4gIHJldHVybiBTd2FsO1xuXG59KSk7XG5pZiAodHlwZW9mIHRoaXMgIT09ICd1bmRlZmluZWQnICYmIHRoaXMuU3dlZXRhbGVydDIpe3RoaXMuc3dhbCA9IHRoaXMuc3dlZXRBbGVydCA9IHRoaXMuU3dhbCA9IHRoaXMuU3dlZXRBbGVydCA9IHRoaXMuU3dlZXRhbGVydDJ9XG5cInVuZGVmaW5lZFwiIT10eXBlb2YgZG9jdW1lbnQmJmZ1bmN0aW9uKGUsdCl7dmFyIG49ZS5jcmVhdGVFbGVtZW50KFwic3R5bGVcIik7aWYoZS5nZXRFbGVtZW50c0J5VGFnTmFtZShcImhlYWRcIilbMF0uYXBwZW5kQ2hpbGQobiksbi5zdHlsZVNoZWV0KW4uc3R5bGVTaGVldC5kaXNhYmxlZHx8KG4uc3R5bGVTaGVldC5jc3NUZXh0PXQpO2Vsc2UgdHJ5e24uaW5uZXJIVE1MPXR9Y2F0Y2goZSl7bi5pbm5lclRleHQ9dH19KGRvY3VtZW50LFwiLnN3YWwyLXBvcHVwLnN3YWwyLXRvYXN0e2JveC1zaXppbmc6Ym9yZGVyLWJveDtncmlkLWNvbHVtbjoxLzQgIWltcG9ydGFudDtncmlkLXJvdzoxLzQgIWltcG9ydGFudDtncmlkLXRlbXBsYXRlLWNvbHVtbnM6bWluLWNvbnRlbnQgYXV0byBtaW4tY29udGVudDtwYWRkaW5nOjFlbTtvdmVyZmxvdy15OmhpZGRlbjtiYWNrZ3JvdW5kOiNmZmY7Ym94LXNoYWRvdzowIDAgMXB4IHJnYmEoMCwwLDAsLjA3NSksMCAxcHggMnB4IHJnYmEoMCwwLDAsLjA3NSksMXB4IDJweCA0cHggcmdiYSgwLDAsMCwuMDc1KSwxcHggM3B4IDhweCByZ2JhKDAsMCwwLC4wNzUpLDJweCA0cHggMTZweCByZ2JhKDAsMCwwLC4wNzUpO3BvaW50ZXItZXZlbnRzOmFsbH0uc3dhbDItcG9wdXAuc3dhbDItdG9hc3Q+KntncmlkLWNvbHVtbjoyfS5zd2FsMi1wb3B1cC5zd2FsMi10b2FzdCAuc3dhbDItdGl0bGV7bWFyZ2luOi41ZW0gMWVtO3BhZGRpbmc6MDtmb250LXNpemU6MWVtO3RleHQtYWxpZ246aW5pdGlhbH0uc3dhbDItcG9wdXAuc3dhbDItdG9hc3QgLnN3YWwyLWxvYWRpbmd7anVzdGlmeS1jb250ZW50OmNlbnRlcn0uc3dhbDItcG9wdXAuc3dhbDItdG9hc3QgLnN3YWwyLWlucHV0e2hlaWdodDoyZW07bWFyZ2luOi41ZW07Zm9udC1zaXplOjFlbX0uc3dhbDItcG9wdXAuc3dhbDItdG9hc3QgLnN3YWwyLXZhbGlkYXRpb24tbWVzc2FnZXtmb250LXNpemU6MWVtfS5zd2FsMi1wb3B1cC5zd2FsMi10b2FzdCAuc3dhbDItZm9vdGVye21hcmdpbjouNWVtIDAgMDtwYWRkaW5nOi41ZW0gMCAwO2ZvbnQtc2l6ZTouOGVtfS5zd2FsMi1wb3B1cC5zd2FsMi10b2FzdCAuc3dhbDItY2xvc2V7Z3JpZC1jb2x1bW46My8zO2dyaWQtcm93OjEvOTk7YWxpZ24tc2VsZjpjZW50ZXI7d2lkdGg6LjhlbTtoZWlnaHQ6LjhlbTttYXJnaW46MDtmb250LXNpemU6MmVtfS5zd2FsMi1wb3B1cC5zd2FsMi10b2FzdCAuc3dhbDItaHRtbC1jb250YWluZXJ7bWFyZ2luOi41ZW0gMWVtO3BhZGRpbmc6MDtvdmVyZmxvdzppbml0aWFsO2ZvbnQtc2l6ZToxZW07dGV4dC1hbGlnbjppbml0aWFsfS5zd2FsMi1wb3B1cC5zd2FsMi10b2FzdCAuc3dhbDItaHRtbC1jb250YWluZXI6ZW1wdHl7cGFkZGluZzowfS5zd2FsMi1wb3B1cC5zd2FsMi10b2FzdCAuc3dhbDItbG9hZGVye2dyaWQtY29sdW1uOjE7Z3JpZC1yb3c6MS85OTthbGlnbi1zZWxmOmNlbnRlcjt3aWR0aDoyZW07aGVpZ2h0OjJlbTttYXJnaW46LjI1ZW19LnN3YWwyLXBvcHVwLnN3YWwyLXRvYXN0IC5zd2FsMi1pY29ue2dyaWQtY29sdW1uOjE7Z3JpZC1yb3c6MS85OTthbGlnbi1zZWxmOmNlbnRlcjt3aWR0aDoyZW07bWluLXdpZHRoOjJlbTtoZWlnaHQ6MmVtO21hcmdpbjowIC41ZW0gMCAwfS5zd2FsMi1wb3B1cC5zd2FsMi10b2FzdCAuc3dhbDItaWNvbiAuc3dhbDItaWNvbi1jb250ZW50e2Rpc3BsYXk6ZmxleDthbGlnbi1pdGVtczpjZW50ZXI7Zm9udC1zaXplOjEuOGVtO2ZvbnQtd2VpZ2h0OmJvbGR9LnN3YWwyLXBvcHVwLnN3YWwyLXRvYXN0IC5zd2FsMi1pY29uLnN3YWwyLXN1Y2Nlc3MgLnN3YWwyLXN1Y2Nlc3MtcmluZ3t3aWR0aDoyZW07aGVpZ2h0OjJlbX0uc3dhbDItcG9wdXAuc3dhbDItdG9hc3QgLnN3YWwyLWljb24uc3dhbDItZXJyb3IgW2NsYXNzXj1zd2FsMi14LW1hcmstbGluZV17dG9wOi44NzVlbTt3aWR0aDoxLjM3NWVtfS5zd2FsMi1wb3B1cC5zd2FsMi10b2FzdCAuc3dhbDItaWNvbi5zd2FsMi1lcnJvciBbY2xhc3NePXN3YWwyLXgtbWFyay1saW5lXVtjbGFzcyQ9bGVmdF17bGVmdDouMzEyNWVtfS5zd2FsMi1wb3B1cC5zd2FsMi10b2FzdCAuc3dhbDItaWNvbi5zd2FsMi1lcnJvciBbY2xhc3NePXN3YWwyLXgtbWFyay1saW5lXVtjbGFzcyQ9cmlnaHRde3JpZ2h0Oi4zMTI1ZW19LnN3YWwyLXBvcHVwLnN3YWwyLXRvYXN0IC5zd2FsMi1hY3Rpb25ze2p1c3RpZnktY29udGVudDpmbGV4LXN0YXJ0O2hlaWdodDphdXRvO21hcmdpbjowO21hcmdpbi10b3A6LjVlbTtwYWRkaW5nOjAgLjVlbX0uc3dhbDItcG9wdXAuc3dhbDItdG9hc3QgLnN3YWwyLXN0eWxlZHttYXJnaW46LjI1ZW0gLjVlbTtwYWRkaW5nOi40ZW0gLjZlbTtmb250LXNpemU6MWVtfS5zd2FsMi1wb3B1cC5zd2FsMi10b2FzdCAuc3dhbDItc3VjY2Vzc3tib3JkZXItY29sb3I6I2E1ZGM4Nn0uc3dhbDItcG9wdXAuc3dhbDItdG9hc3QgLnN3YWwyLXN1Y2Nlc3MgW2NsYXNzXj1zd2FsMi1zdWNjZXNzLWNpcmN1bGFyLWxpbmVde3Bvc2l0aW9uOmFic29sdXRlO3dpZHRoOjEuNmVtO2hlaWdodDozZW07dHJhbnNmb3JtOnJvdGF0ZSg0NWRlZyk7Ym9yZGVyLXJhZGl1czo1MCV9LnN3YWwyLXBvcHVwLnN3YWwyLXRvYXN0IC5zd2FsMi1zdWNjZXNzIFtjbGFzc149c3dhbDItc3VjY2Vzcy1jaXJjdWxhci1saW5lXVtjbGFzcyQ9bGVmdF17dG9wOi0wLjhlbTtsZWZ0Oi0wLjVlbTt0cmFuc2Zvcm06cm90YXRlKC00NWRlZyk7dHJhbnNmb3JtLW9yaWdpbjoyZW0gMmVtO2JvcmRlci1yYWRpdXM6NGVtIDAgMCA0ZW19LnN3YWwyLXBvcHVwLnN3YWwyLXRvYXN0IC5zd2FsMi1zdWNjZXNzIFtjbGFzc149c3dhbDItc3VjY2Vzcy1jaXJjdWxhci1saW5lXVtjbGFzcyQ9cmlnaHRde3RvcDotMC4yNWVtO2xlZnQ6LjkzNzVlbTt0cmFuc2Zvcm0tb3JpZ2luOjAgMS41ZW07Ym9yZGVyLXJhZGl1czowIDRlbSA0ZW0gMH0uc3dhbDItcG9wdXAuc3dhbDItdG9hc3QgLnN3YWwyLXN1Y2Nlc3MgLnN3YWwyLXN1Y2Nlc3MtcmluZ3t3aWR0aDoyZW07aGVpZ2h0OjJlbX0uc3dhbDItcG9wdXAuc3dhbDItdG9hc3QgLnN3YWwyLXN1Y2Nlc3MgLnN3YWwyLXN1Y2Nlc3MtZml4e3RvcDowO2xlZnQ6LjQzNzVlbTt3aWR0aDouNDM3NWVtO2hlaWdodDoyLjY4NzVlbX0uc3dhbDItcG9wdXAuc3dhbDItdG9hc3QgLnN3YWwyLXN1Y2Nlc3MgW2NsYXNzXj1zd2FsMi1zdWNjZXNzLWxpbmVde2hlaWdodDouMzEyNWVtfS5zd2FsMi1wb3B1cC5zd2FsMi10b2FzdCAuc3dhbDItc3VjY2VzcyBbY2xhc3NePXN3YWwyLXN1Y2Nlc3MtbGluZV1bY2xhc3MkPXRpcF17dG9wOjEuMTI1ZW07bGVmdDouMTg3NWVtO3dpZHRoOi43NWVtfS5zd2FsMi1wb3B1cC5zd2FsMi10b2FzdCAuc3dhbDItc3VjY2VzcyBbY2xhc3NePXN3YWwyLXN1Y2Nlc3MtbGluZV1bY2xhc3MkPWxvbmdde3RvcDouOTM3NWVtO3JpZ2h0Oi4xODc1ZW07d2lkdGg6MS4zNzVlbX0uc3dhbDItcG9wdXAuc3dhbDItdG9hc3QgLnN3YWwyLXN1Y2Nlc3Muc3dhbDItaWNvbi1zaG93IC5zd2FsMi1zdWNjZXNzLWxpbmUtdGlwe2FuaW1hdGlvbjpzd2FsMi10b2FzdC1hbmltYXRlLXN1Y2Nlc3MtbGluZS10aXAgLjc1c30uc3dhbDItcG9wdXAuc3dhbDItdG9hc3QgLnN3YWwyLXN1Y2Nlc3Muc3dhbDItaWNvbi1zaG93IC5zd2FsMi1zdWNjZXNzLWxpbmUtbG9uZ3thbmltYXRpb246c3dhbDItdG9hc3QtYW5pbWF0ZS1zdWNjZXNzLWxpbmUtbG9uZyAuNzVzfS5zd2FsMi1wb3B1cC5zd2FsMi10b2FzdC5zd2FsMi1zaG93e2FuaW1hdGlvbjpzd2FsMi10b2FzdC1zaG93IC41c30uc3dhbDItcG9wdXAuc3dhbDItdG9hc3Quc3dhbDItaGlkZXthbmltYXRpb246c3dhbDItdG9hc3QtaGlkZSAuMXMgZm9yd2FyZHN9LnN3YWwyLWNvbnRhaW5lcntkaXNwbGF5OmdyaWQ7cG9zaXRpb246Zml4ZWQ7ei1pbmRleDoxMDYwO3RvcDowO3JpZ2h0OjA7Ym90dG9tOjA7bGVmdDowO2JveC1zaXppbmc6Ym9yZGVyLWJveDtncmlkLXRlbXBsYXRlLWFyZWFzOlxcXCJ0b3Atc3RhcnQgICAgIHRvcCAgICAgICAgICAgIHRvcC1lbmRcXFwiIFxcXCJjZW50ZXItc3RhcnQgIGNlbnRlciAgICAgICAgIGNlbnRlci1lbmRcXFwiIFxcXCJib3R0b20tc3RhcnQgIGJvdHRvbS1jZW50ZXIgIGJvdHRvbS1lbmRcXFwiO2dyaWQtdGVtcGxhdGUtcm93czptaW5tYXgobWluLWNvbnRlbnQsIGF1dG8pIG1pbm1heChtaW4tY29udGVudCwgYXV0bykgbWlubWF4KG1pbi1jb250ZW50LCBhdXRvKTtoZWlnaHQ6MTAwJTtwYWRkaW5nOi42MjVlbTtvdmVyZmxvdy14OmhpZGRlbjt0cmFuc2l0aW9uOmJhY2tncm91bmQtY29sb3IgLjFzOy13ZWJraXQtb3ZlcmZsb3ctc2Nyb2xsaW5nOnRvdWNofS5zd2FsMi1jb250YWluZXIuc3dhbDItYmFja2Ryb3Atc2hvdywuc3dhbDItY29udGFpbmVyLnN3YWwyLW5vYW5pbWF0aW9ue2JhY2tncm91bmQ6cmdiYSgwLDAsMCwuNCl9LnN3YWwyLWNvbnRhaW5lci5zd2FsMi1iYWNrZHJvcC1oaWRle2JhY2tncm91bmQ6cmdiYSgwLDAsMCwwKSAhaW1wb3J0YW50fS5zd2FsMi1jb250YWluZXIuc3dhbDItdG9wLXN0YXJ0LC5zd2FsMi1jb250YWluZXIuc3dhbDItY2VudGVyLXN0YXJ0LC5zd2FsMi1jb250YWluZXIuc3dhbDItYm90dG9tLXN0YXJ0e2dyaWQtdGVtcGxhdGUtY29sdW1uczptaW5tYXgoMCwgMWZyKSBhdXRvIGF1dG99LnN3YWwyLWNvbnRhaW5lci5zd2FsMi10b3AsLnN3YWwyLWNvbnRhaW5lci5zd2FsMi1jZW50ZXIsLnN3YWwyLWNvbnRhaW5lci5zd2FsMi1ib3R0b217Z3JpZC10ZW1wbGF0ZS1jb2x1bW5zOmF1dG8gbWlubWF4KDAsIDFmcikgYXV0b30uc3dhbDItY29udGFpbmVyLnN3YWwyLXRvcC1lbmQsLnN3YWwyLWNvbnRhaW5lci5zd2FsMi1jZW50ZXItZW5kLC5zd2FsMi1jb250YWluZXIuc3dhbDItYm90dG9tLWVuZHtncmlkLXRlbXBsYXRlLWNvbHVtbnM6YXV0byBhdXRvIG1pbm1heCgwLCAxZnIpfS5zd2FsMi1jb250YWluZXIuc3dhbDItdG9wLXN0YXJ0Pi5zd2FsMi1wb3B1cHthbGlnbi1zZWxmOnN0YXJ0fS5zd2FsMi1jb250YWluZXIuc3dhbDItdG9wPi5zd2FsMi1wb3B1cHtncmlkLWNvbHVtbjoyO2FsaWduLXNlbGY6c3RhcnQ7anVzdGlmeS1zZWxmOmNlbnRlcn0uc3dhbDItY29udGFpbmVyLnN3YWwyLXRvcC1lbmQ+LnN3YWwyLXBvcHVwLC5zd2FsMi1jb250YWluZXIuc3dhbDItdG9wLXJpZ2h0Pi5zd2FsMi1wb3B1cHtncmlkLWNvbHVtbjozO2FsaWduLXNlbGY6c3RhcnQ7anVzdGlmeS1zZWxmOmVuZH0uc3dhbDItY29udGFpbmVyLnN3YWwyLWNlbnRlci1zdGFydD4uc3dhbDItcG9wdXAsLnN3YWwyLWNvbnRhaW5lci5zd2FsMi1jZW50ZXItbGVmdD4uc3dhbDItcG9wdXB7Z3JpZC1yb3c6MjthbGlnbi1zZWxmOmNlbnRlcn0uc3dhbDItY29udGFpbmVyLnN3YWwyLWNlbnRlcj4uc3dhbDItcG9wdXB7Z3JpZC1jb2x1bW46MjtncmlkLXJvdzoyO2FsaWduLXNlbGY6Y2VudGVyO2p1c3RpZnktc2VsZjpjZW50ZXJ9LnN3YWwyLWNvbnRhaW5lci5zd2FsMi1jZW50ZXItZW5kPi5zd2FsMi1wb3B1cCwuc3dhbDItY29udGFpbmVyLnN3YWwyLWNlbnRlci1yaWdodD4uc3dhbDItcG9wdXB7Z3JpZC1jb2x1bW46MztncmlkLXJvdzoyO2FsaWduLXNlbGY6Y2VudGVyO2p1c3RpZnktc2VsZjplbmR9LnN3YWwyLWNvbnRhaW5lci5zd2FsMi1ib3R0b20tc3RhcnQ+LnN3YWwyLXBvcHVwLC5zd2FsMi1jb250YWluZXIuc3dhbDItYm90dG9tLWxlZnQ+LnN3YWwyLXBvcHVwe2dyaWQtY29sdW1uOjE7Z3JpZC1yb3c6MzthbGlnbi1zZWxmOmVuZH0uc3dhbDItY29udGFpbmVyLnN3YWwyLWJvdHRvbT4uc3dhbDItcG9wdXB7Z3JpZC1jb2x1bW46MjtncmlkLXJvdzozO2p1c3RpZnktc2VsZjpjZW50ZXI7YWxpZ24tc2VsZjplbmR9LnN3YWwyLWNvbnRhaW5lci5zd2FsMi1ib3R0b20tZW5kPi5zd2FsMi1wb3B1cCwuc3dhbDItY29udGFpbmVyLnN3YWwyLWJvdHRvbS1yaWdodD4uc3dhbDItcG9wdXB7Z3JpZC1jb2x1bW46MztncmlkLXJvdzozO2FsaWduLXNlbGY6ZW5kO2p1c3RpZnktc2VsZjplbmR9LnN3YWwyLWNvbnRhaW5lci5zd2FsMi1ncm93LXJvdz4uc3dhbDItcG9wdXAsLnN3YWwyLWNvbnRhaW5lci5zd2FsMi1ncm93LWZ1bGxzY3JlZW4+LnN3YWwyLXBvcHVwe2dyaWQtY29sdW1uOjEvNDt3aWR0aDoxMDAlfS5zd2FsMi1jb250YWluZXIuc3dhbDItZ3Jvdy1jb2x1bW4+LnN3YWwyLXBvcHVwLC5zd2FsMi1jb250YWluZXIuc3dhbDItZ3Jvdy1mdWxsc2NyZWVuPi5zd2FsMi1wb3B1cHtncmlkLXJvdzoxLzQ7YWxpZ24tc2VsZjpzdHJldGNofS5zd2FsMi1jb250YWluZXIuc3dhbDItbm8tdHJhbnNpdGlvbnt0cmFuc2l0aW9uOm5vbmUgIWltcG9ydGFudH0uc3dhbDItcG9wdXB7ZGlzcGxheTpub25lO3Bvc2l0aW9uOnJlbGF0aXZlO2JveC1zaXppbmc6Ym9yZGVyLWJveDtncmlkLXRlbXBsYXRlLWNvbHVtbnM6bWlubWF4KDAsIDEwMCUpO3dpZHRoOjMyZW07bWF4LXdpZHRoOjEwMCU7cGFkZGluZzowIDAgMS4yNWVtO2JvcmRlcjpub25lO2JvcmRlci1yYWRpdXM6NXB4O2JhY2tncm91bmQ6I2ZmZjtjb2xvcjojNTQ1NDU0O2ZvbnQtZmFtaWx5OmluaGVyaXQ7Zm9udC1zaXplOjFyZW19LnN3YWwyLXBvcHVwOmZvY3Vze291dGxpbmU6bm9uZX0uc3dhbDItcG9wdXAuc3dhbDItbG9hZGluZ3tvdmVyZmxvdy15OmhpZGRlbn0uc3dhbDItdGl0bGV7cG9zaXRpb246cmVsYXRpdmU7bWF4LXdpZHRoOjEwMCU7bWFyZ2luOjA7cGFkZGluZzouOGVtIDFlbSAwO2NvbG9yOmluaGVyaXQ7Zm9udC1zaXplOjEuODc1ZW07Zm9udC13ZWlnaHQ6NjAwO3RleHQtYWxpZ246Y2VudGVyO3RleHQtdHJhbnNmb3JtOm5vbmU7d29yZC13cmFwOmJyZWFrLXdvcmR9LnN3YWwyLWFjdGlvbnN7ZGlzcGxheTpmbGV4O3otaW5kZXg6MTtib3gtc2l6aW5nOmJvcmRlci1ib3g7ZmxleC13cmFwOndyYXA7YWxpZ24taXRlbXM6Y2VudGVyO2p1c3RpZnktY29udGVudDpjZW50ZXI7d2lkdGg6YXV0bzttYXJnaW46MS4yNWVtIGF1dG8gMDtwYWRkaW5nOjB9LnN3YWwyLWFjdGlvbnM6bm90KC5zd2FsMi1sb2FkaW5nKSAuc3dhbDItc3R5bGVkW2Rpc2FibGVkXXtvcGFjaXR5Oi40fS5zd2FsMi1hY3Rpb25zOm5vdCguc3dhbDItbG9hZGluZykgLnN3YWwyLXN0eWxlZDpob3ZlcntiYWNrZ3JvdW5kLWltYWdlOmxpbmVhci1ncmFkaWVudChyZ2JhKDAsIDAsIDAsIDAuMSksIHJnYmEoMCwgMCwgMCwgMC4xKSl9LnN3YWwyLWFjdGlvbnM6bm90KC5zd2FsMi1sb2FkaW5nKSAuc3dhbDItc3R5bGVkOmFjdGl2ZXtiYWNrZ3JvdW5kLWltYWdlOmxpbmVhci1ncmFkaWVudChyZ2JhKDAsIDAsIDAsIDAuMiksIHJnYmEoMCwgMCwgMCwgMC4yKSl9LnN3YWwyLWxvYWRlcntkaXNwbGF5Om5vbmU7YWxpZ24taXRlbXM6Y2VudGVyO2p1c3RpZnktY29udGVudDpjZW50ZXI7d2lkdGg6Mi4yZW07aGVpZ2h0OjIuMmVtO21hcmdpbjowIDEuODc1ZW07YW5pbWF0aW9uOnN3YWwyLXJvdGF0ZS1sb2FkaW5nIDEuNXMgbGluZWFyIDBzIGluZmluaXRlIG5vcm1hbDtib3JkZXItd2lkdGg6LjI1ZW07Ym9yZGVyLXN0eWxlOnNvbGlkO2JvcmRlci1yYWRpdXM6MTAwJTtib3JkZXItY29sb3I6IzI3NzhjNCByZ2JhKDAsMCwwLDApICMyNzc4YzQgcmdiYSgwLDAsMCwwKX0uc3dhbDItc3R5bGVke21hcmdpbjouMzEyNWVtO3BhZGRpbmc6LjYyNWVtIDEuMWVtO3RyYW5zaXRpb246Ym94LXNoYWRvdyAuMXM7Ym94LXNoYWRvdzowIDAgMCAzcHggcmdiYSgwLDAsMCwwKTtmb250LXdlaWdodDo1MDB9LnN3YWwyLXN0eWxlZDpub3QoW2Rpc2FibGVkXSl7Y3Vyc29yOnBvaW50ZXJ9LnN3YWwyLXN0eWxlZC5zd2FsMi1jb25maXJte2JvcmRlcjowO2JvcmRlci1yYWRpdXM6LjI1ZW07YmFja2dyb3VuZDppbml0aWFsO2JhY2tncm91bmQtY29sb3I6IzcwNjZlMDtjb2xvcjojZmZmO2ZvbnQtc2l6ZToxZW19LnN3YWwyLXN0eWxlZC5zd2FsMi1jb25maXJtOmZvY3Vze2JveC1zaGFkb3c6MCAwIDAgM3B4IHJnYmEoMTEyLDEwMiwyMjQsLjUpfS5zd2FsMi1zdHlsZWQuc3dhbDItZGVueXtib3JkZXI6MDtib3JkZXItcmFkaXVzOi4yNWVtO2JhY2tncm91bmQ6aW5pdGlhbDtiYWNrZ3JvdW5kLWNvbG9yOiNkYzM3NDE7Y29sb3I6I2ZmZjtmb250LXNpemU6MWVtfS5zd2FsMi1zdHlsZWQuc3dhbDItZGVueTpmb2N1c3tib3gtc2hhZG93OjAgMCAwIDNweCByZ2JhKDIyMCw1NSw2NSwuNSl9LnN3YWwyLXN0eWxlZC5zd2FsMi1jYW5jZWx7Ym9yZGVyOjA7Ym9yZGVyLXJhZGl1czouMjVlbTtiYWNrZ3JvdW5kOmluaXRpYWw7YmFja2dyb3VuZC1jb2xvcjojNmU3ODgxO2NvbG9yOiNmZmY7Zm9udC1zaXplOjFlbX0uc3dhbDItc3R5bGVkLnN3YWwyLWNhbmNlbDpmb2N1c3tib3gtc2hhZG93OjAgMCAwIDNweCByZ2JhKDExMCwxMjAsMTI5LC41KX0uc3dhbDItc3R5bGVkLnN3YWwyLWRlZmF1bHQtb3V0bGluZTpmb2N1c3tib3gtc2hhZG93OjAgMCAwIDNweCByZ2JhKDEwMCwxNTAsMjAwLC41KX0uc3dhbDItc3R5bGVkOmZvY3Vze291dGxpbmU6bm9uZX0uc3dhbDItc3R5bGVkOjotbW96LWZvY3VzLWlubmVye2JvcmRlcjowfS5zd2FsMi1mb290ZXJ7anVzdGlmeS1jb250ZW50OmNlbnRlcjttYXJnaW46MWVtIDAgMDtwYWRkaW5nOjFlbSAxZW0gMDtib3JkZXItdG9wOjFweCBzb2xpZCAjZWVlO2NvbG9yOmluaGVyaXQ7Zm9udC1zaXplOjFlbX0uc3dhbDItdGltZXItcHJvZ3Jlc3MtYmFyLWNvbnRhaW5lcntwb3NpdGlvbjphYnNvbHV0ZTtyaWdodDowO2JvdHRvbTowO2xlZnQ6MDtncmlkLWNvbHVtbjphdXRvICFpbXBvcnRhbnQ7b3ZlcmZsb3c6aGlkZGVuO2JvcmRlci1ib3R0b20tcmlnaHQtcmFkaXVzOjVweDtib3JkZXItYm90dG9tLWxlZnQtcmFkaXVzOjVweH0uc3dhbDItdGltZXItcHJvZ3Jlc3MtYmFye3dpZHRoOjEwMCU7aGVpZ2h0Oi4yNWVtO2JhY2tncm91bmQ6cmdiYSgwLDAsMCwuMil9LnN3YWwyLWltYWdle21heC13aWR0aDoxMDAlO21hcmdpbjoyZW0gYXV0byAxZW19LnN3YWwyLWNsb3Nle3otaW5kZXg6MjthbGlnbi1pdGVtczpjZW50ZXI7anVzdGlmeS1jb250ZW50OmNlbnRlcjt3aWR0aDoxLjJlbTtoZWlnaHQ6MS4yZW07bWFyZ2luLXRvcDowO21hcmdpbi1yaWdodDowO21hcmdpbi1ib3R0b206LTEuMmVtO3BhZGRpbmc6MDtvdmVyZmxvdzpoaWRkZW47dHJhbnNpdGlvbjpjb2xvciAuMXMsYm94LXNoYWRvdyAuMXM7Ym9yZGVyOm5vbmU7Ym9yZGVyLXJhZGl1czo1cHg7YmFja2dyb3VuZDpyZ2JhKDAsMCwwLDApO2NvbG9yOiNjY2M7Zm9udC1mYW1pbHk6c2VyaWY7Zm9udC1mYW1pbHk6bW9ub3NwYWNlO2ZvbnQtc2l6ZToyLjVlbTtjdXJzb3I6cG9pbnRlcjtqdXN0aWZ5LXNlbGY6ZW5kfS5zd2FsMi1jbG9zZTpob3Zlcnt0cmFuc2Zvcm06bm9uZTtiYWNrZ3JvdW5kOnJnYmEoMCwwLDAsMCk7Y29sb3I6I2YyNzQ3NH0uc3dhbDItY2xvc2U6Zm9jdXN7b3V0bGluZTpub25lO2JveC1zaGFkb3c6aW5zZXQgMCAwIDAgM3B4IHJnYmEoMTAwLDE1MCwyMDAsLjUpfS5zd2FsMi1jbG9zZTo6LW1vei1mb2N1cy1pbm5lcntib3JkZXI6MH0uc3dhbDItaHRtbC1jb250YWluZXJ7ei1pbmRleDoxO2p1c3RpZnktY29udGVudDpjZW50ZXI7bWFyZ2luOjFlbSAxLjZlbSAuM2VtO3BhZGRpbmc6MDtvdmVyZmxvdzphdXRvO2NvbG9yOmluaGVyaXQ7Zm9udC1zaXplOjEuMTI1ZW07Zm9udC13ZWlnaHQ6bm9ybWFsO2xpbmUtaGVpZ2h0Om5vcm1hbDt0ZXh0LWFsaWduOmNlbnRlcjt3b3JkLXdyYXA6YnJlYWstd29yZDt3b3JkLWJyZWFrOmJyZWFrLXdvcmR9LnN3YWwyLWlucHV0LC5zd2FsMi1maWxlLC5zd2FsMi10ZXh0YXJlYSwuc3dhbDItc2VsZWN0LC5zd2FsMi1yYWRpbywuc3dhbDItY2hlY2tib3h7bWFyZ2luOjFlbSAyZW0gM3B4fS5zd2FsMi1pbnB1dCwuc3dhbDItZmlsZSwuc3dhbDItdGV4dGFyZWF7Ym94LXNpemluZzpib3JkZXItYm94O3dpZHRoOmF1dG87dHJhbnNpdGlvbjpib3JkZXItY29sb3IgLjFzLGJveC1zaGFkb3cgLjFzO2JvcmRlcjoxcHggc29saWQgI2Q5ZDlkOTtib3JkZXItcmFkaXVzOi4xODc1ZW07YmFja2dyb3VuZDpyZ2JhKDAsMCwwLDApO2JveC1zaGFkb3c6aW5zZXQgMCAxcHggMXB4IHJnYmEoMCwwLDAsLjA2KSwwIDAgMCAzcHggcmdiYSgwLDAsMCwwKTtjb2xvcjppbmhlcml0O2ZvbnQtc2l6ZToxLjEyNWVtfS5zd2FsMi1pbnB1dC5zd2FsMi1pbnB1dGVycm9yLC5zd2FsMi1maWxlLnN3YWwyLWlucHV0ZXJyb3IsLnN3YWwyLXRleHRhcmVhLnN3YWwyLWlucHV0ZXJyb3J7Ym9yZGVyLWNvbG9yOiNmMjc0NzQgIWltcG9ydGFudDtib3gtc2hhZG93OjAgMCAycHggI2YyNzQ3NCAhaW1wb3J0YW50fS5zd2FsMi1pbnB1dDpmb2N1cywuc3dhbDItZmlsZTpmb2N1cywuc3dhbDItdGV4dGFyZWE6Zm9jdXN7Ym9yZGVyOjFweCBzb2xpZCAjYjRkYmVkO291dGxpbmU6bm9uZTtib3gtc2hhZG93Omluc2V0IDAgMXB4IDFweCByZ2JhKDAsMCwwLC4wNiksMCAwIDAgM3B4IHJnYmEoMTAwLDE1MCwyMDAsLjUpfS5zd2FsMi1pbnB1dDo6cGxhY2Vob2xkZXIsLnN3YWwyLWZpbGU6OnBsYWNlaG9sZGVyLC5zd2FsMi10ZXh0YXJlYTo6cGxhY2Vob2xkZXJ7Y29sb3I6I2NjY30uc3dhbDItcmFuZ2V7bWFyZ2luOjFlbSAyZW0gM3B4O2JhY2tncm91bmQ6I2ZmZn0uc3dhbDItcmFuZ2UgaW5wdXR7d2lkdGg6ODAlfS5zd2FsMi1yYW5nZSBvdXRwdXR7d2lkdGg6MjAlO2NvbG9yOmluaGVyaXQ7Zm9udC13ZWlnaHQ6NjAwO3RleHQtYWxpZ246Y2VudGVyfS5zd2FsMi1yYW5nZSBpbnB1dCwuc3dhbDItcmFuZ2Ugb3V0cHV0e2hlaWdodDoyLjYyNWVtO3BhZGRpbmc6MDtmb250LXNpemU6MS4xMjVlbTtsaW5lLWhlaWdodDoyLjYyNWVtfS5zd2FsMi1pbnB1dHtoZWlnaHQ6Mi42MjVlbTtwYWRkaW5nOjAgLjc1ZW19LnN3YWwyLWZpbGV7d2lkdGg6NzUlO21hcmdpbi1yaWdodDphdXRvO21hcmdpbi1sZWZ0OmF1dG87YmFja2dyb3VuZDpyZ2JhKDAsMCwwLDApO2ZvbnQtc2l6ZToxLjEyNWVtfS5zd2FsMi10ZXh0YXJlYXtoZWlnaHQ6Ni43NWVtO3BhZGRpbmc6Ljc1ZW19LnN3YWwyLXNlbGVjdHttaW4td2lkdGg6NTAlO21heC13aWR0aDoxMDAlO3BhZGRpbmc6LjM3NWVtIC42MjVlbTtiYWNrZ3JvdW5kOnJnYmEoMCwwLDAsMCk7Y29sb3I6aW5oZXJpdDtmb250LXNpemU6MS4xMjVlbX0uc3dhbDItcmFkaW8sLnN3YWwyLWNoZWNrYm94e2FsaWduLWl0ZW1zOmNlbnRlcjtqdXN0aWZ5LWNvbnRlbnQ6Y2VudGVyO2JhY2tncm91bmQ6I2ZmZjtjb2xvcjppbmhlcml0fS5zd2FsMi1yYWRpbyBsYWJlbCwuc3dhbDItY2hlY2tib3ggbGFiZWx7bWFyZ2luOjAgLjZlbTtmb250LXNpemU6MS4xMjVlbX0uc3dhbDItcmFkaW8gaW5wdXQsLnN3YWwyLWNoZWNrYm94IGlucHV0e2ZsZXgtc2hyaW5rOjA7bWFyZ2luOjAgLjRlbX0uc3dhbDItaW5wdXQtbGFiZWx7ZGlzcGxheTpmbGV4O2p1c3RpZnktY29udGVudDpjZW50ZXI7bWFyZ2luOjFlbSBhdXRvIDB9LnN3YWwyLXZhbGlkYXRpb24tbWVzc2FnZXthbGlnbi1pdGVtczpjZW50ZXI7anVzdGlmeS1jb250ZW50OmNlbnRlcjttYXJnaW46MWVtIDAgMDtwYWRkaW5nOi42MjVlbTtvdmVyZmxvdzpoaWRkZW47YmFja2dyb3VuZDojZjBmMGYwO2NvbG9yOiM2NjY7Zm9udC1zaXplOjFlbTtmb250LXdlaWdodDozMDB9LnN3YWwyLXZhbGlkYXRpb24tbWVzc2FnZTo6YmVmb3Jle2NvbnRlbnQ6XFxcIiFcXFwiO2Rpc3BsYXk6aW5saW5lLWJsb2NrO3dpZHRoOjEuNWVtO21pbi13aWR0aDoxLjVlbTtoZWlnaHQ6MS41ZW07bWFyZ2luOjAgLjYyNWVtO2JvcmRlci1yYWRpdXM6NTAlO2JhY2tncm91bmQtY29sb3I6I2YyNzQ3NDtjb2xvcjojZmZmO2ZvbnQtd2VpZ2h0OjYwMDtsaW5lLWhlaWdodDoxLjVlbTt0ZXh0LWFsaWduOmNlbnRlcn0uc3dhbDItaWNvbntwb3NpdGlvbjpyZWxhdGl2ZTtib3gtc2l6aW5nOmNvbnRlbnQtYm94O2p1c3RpZnktY29udGVudDpjZW50ZXI7d2lkdGg6NWVtO2hlaWdodDo1ZW07bWFyZ2luOjIuNWVtIGF1dG8gLjZlbTtib3JkZXI6MC4yNWVtIHNvbGlkIHJnYmEoMCwwLDAsMCk7Ym9yZGVyLXJhZGl1czo1MCU7Ym9yZGVyLWNvbG9yOiMwMDA7Zm9udC1mYW1pbHk6aW5oZXJpdDtsaW5lLWhlaWdodDo1ZW07Y3Vyc29yOmRlZmF1bHQ7dXNlci1zZWxlY3Q6bm9uZX0uc3dhbDItaWNvbiAuc3dhbDItaWNvbi1jb250ZW50e2Rpc3BsYXk6ZmxleDthbGlnbi1pdGVtczpjZW50ZXI7Zm9udC1zaXplOjMuNzVlbX0uc3dhbDItaWNvbi5zd2FsMi1lcnJvcntib3JkZXItY29sb3I6I2YyNzQ3NDtjb2xvcjojZjI3NDc0fS5zd2FsMi1pY29uLnN3YWwyLWVycm9yIC5zd2FsMi14LW1hcmt7cG9zaXRpb246cmVsYXRpdmU7ZmxleC1ncm93OjF9LnN3YWwyLWljb24uc3dhbDItZXJyb3IgW2NsYXNzXj1zd2FsMi14LW1hcmstbGluZV17ZGlzcGxheTpibG9jaztwb3NpdGlvbjphYnNvbHV0ZTt0b3A6Mi4zMTI1ZW07d2lkdGg6Mi45Mzc1ZW07aGVpZ2h0Oi4zMTI1ZW07Ym9yZGVyLXJhZGl1czouMTI1ZW07YmFja2dyb3VuZC1jb2xvcjojZjI3NDc0fS5zd2FsMi1pY29uLnN3YWwyLWVycm9yIFtjbGFzc149c3dhbDIteC1tYXJrLWxpbmVdW2NsYXNzJD1sZWZ0XXtsZWZ0OjEuMDYyNWVtO3RyYW5zZm9ybTpyb3RhdGUoNDVkZWcpfS5zd2FsMi1pY29uLnN3YWwyLWVycm9yIFtjbGFzc149c3dhbDIteC1tYXJrLWxpbmVdW2NsYXNzJD1yaWdodF17cmlnaHQ6MWVtO3RyYW5zZm9ybTpyb3RhdGUoLTQ1ZGVnKX0uc3dhbDItaWNvbi5zd2FsMi1lcnJvci5zd2FsMi1pY29uLXNob3d7YW5pbWF0aW9uOnN3YWwyLWFuaW1hdGUtZXJyb3ItaWNvbiAuNXN9LnN3YWwyLWljb24uc3dhbDItZXJyb3Iuc3dhbDItaWNvbi1zaG93IC5zd2FsMi14LW1hcmt7YW5pbWF0aW9uOnN3YWwyLWFuaW1hdGUtZXJyb3IteC1tYXJrIC41c30uc3dhbDItaWNvbi5zd2FsMi13YXJuaW5ne2JvcmRlci1jb2xvcjojZmFjZWE4O2NvbG9yOiNmOGJiODZ9LnN3YWwyLWljb24uc3dhbDItd2FybmluZy5zd2FsMi1pY29uLXNob3d7YW5pbWF0aW9uOnN3YWwyLWFuaW1hdGUtZXJyb3ItaWNvbiAuNXN9LnN3YWwyLWljb24uc3dhbDItd2FybmluZy5zd2FsMi1pY29uLXNob3cgLnN3YWwyLWljb24tY29udGVudHthbmltYXRpb246c3dhbDItYW5pbWF0ZS1pLW1hcmsgLjVzfS5zd2FsMi1pY29uLnN3YWwyLWluZm97Ym9yZGVyLWNvbG9yOiM5ZGUwZjY7Y29sb3I6IzNmYzNlZX0uc3dhbDItaWNvbi5zd2FsMi1pbmZvLnN3YWwyLWljb24tc2hvd3thbmltYXRpb246c3dhbDItYW5pbWF0ZS1lcnJvci1pY29uIC41c30uc3dhbDItaWNvbi5zd2FsMi1pbmZvLnN3YWwyLWljb24tc2hvdyAuc3dhbDItaWNvbi1jb250ZW50e2FuaW1hdGlvbjpzd2FsMi1hbmltYXRlLWktbWFyayAuOHN9LnN3YWwyLWljb24uc3dhbDItcXVlc3Rpb257Ym9yZGVyLWNvbG9yOiNjOWRhZTE7Y29sb3I6Izg3YWRiZH0uc3dhbDItaWNvbi5zd2FsMi1xdWVzdGlvbi5zd2FsMi1pY29uLXNob3d7YW5pbWF0aW9uOnN3YWwyLWFuaW1hdGUtZXJyb3ItaWNvbiAuNXN9LnN3YWwyLWljb24uc3dhbDItcXVlc3Rpb24uc3dhbDItaWNvbi1zaG93IC5zd2FsMi1pY29uLWNvbnRlbnR7YW5pbWF0aW9uOnN3YWwyLWFuaW1hdGUtcXVlc3Rpb24tbWFyayAuOHN9LnN3YWwyLWljb24uc3dhbDItc3VjY2Vzc3tib3JkZXItY29sb3I6I2E1ZGM4Njtjb2xvcjojYTVkYzg2fS5zd2FsMi1pY29uLnN3YWwyLXN1Y2Nlc3MgW2NsYXNzXj1zd2FsMi1zdWNjZXNzLWNpcmN1bGFyLWxpbmVde3Bvc2l0aW9uOmFic29sdXRlO3dpZHRoOjMuNzVlbTtoZWlnaHQ6Ny41ZW07dHJhbnNmb3JtOnJvdGF0ZSg0NWRlZyk7Ym9yZGVyLXJhZGl1czo1MCV9LnN3YWwyLWljb24uc3dhbDItc3VjY2VzcyBbY2xhc3NePXN3YWwyLXN1Y2Nlc3MtY2lyY3VsYXItbGluZV1bY2xhc3MkPWxlZnRde3RvcDotMC40Mzc1ZW07bGVmdDotMi4wNjM1ZW07dHJhbnNmb3JtOnJvdGF0ZSgtNDVkZWcpO3RyYW5zZm9ybS1vcmlnaW46My43NWVtIDMuNzVlbTtib3JkZXItcmFkaXVzOjcuNWVtIDAgMCA3LjVlbX0uc3dhbDItaWNvbi5zd2FsMi1zdWNjZXNzIFtjbGFzc149c3dhbDItc3VjY2Vzcy1jaXJjdWxhci1saW5lXVtjbGFzcyQ9cmlnaHRde3RvcDotMC42ODc1ZW07bGVmdDoxLjg3NWVtO3RyYW5zZm9ybTpyb3RhdGUoLTQ1ZGVnKTt0cmFuc2Zvcm0tb3JpZ2luOjAgMy43NWVtO2JvcmRlci1yYWRpdXM6MCA3LjVlbSA3LjVlbSAwfS5zd2FsMi1pY29uLnN3YWwyLXN1Y2Nlc3MgLnN3YWwyLXN1Y2Nlc3MtcmluZ3twb3NpdGlvbjphYnNvbHV0ZTt6LWluZGV4OjI7dG9wOi0wLjI1ZW07bGVmdDotMC4yNWVtO2JveC1zaXppbmc6Y29udGVudC1ib3g7d2lkdGg6MTAwJTtoZWlnaHQ6MTAwJTtib3JkZXI6LjI1ZW0gc29saWQgcmdiYSgxNjUsMjIwLDEzNCwuMyk7Ym9yZGVyLXJhZGl1czo1MCV9LnN3YWwyLWljb24uc3dhbDItc3VjY2VzcyAuc3dhbDItc3VjY2Vzcy1maXh7cG9zaXRpb246YWJzb2x1dGU7ei1pbmRleDoxO3RvcDouNWVtO2xlZnQ6MS42MjVlbTt3aWR0aDouNDM3NWVtO2hlaWdodDo1LjYyNWVtO3RyYW5zZm9ybTpyb3RhdGUoLTQ1ZGVnKX0uc3dhbDItaWNvbi5zd2FsMi1zdWNjZXNzIFtjbGFzc149c3dhbDItc3VjY2Vzcy1saW5lXXtkaXNwbGF5OmJsb2NrO3Bvc2l0aW9uOmFic29sdXRlO3otaW5kZXg6MjtoZWlnaHQ6LjMxMjVlbTtib3JkZXItcmFkaXVzOi4xMjVlbTtiYWNrZ3JvdW5kLWNvbG9yOiNhNWRjODZ9LnN3YWwyLWljb24uc3dhbDItc3VjY2VzcyBbY2xhc3NePXN3YWwyLXN1Y2Nlc3MtbGluZV1bY2xhc3MkPXRpcF17dG9wOjIuODc1ZW07bGVmdDouODEyNWVtO3dpZHRoOjEuNTYyNWVtO3RyYW5zZm9ybTpyb3RhdGUoNDVkZWcpfS5zd2FsMi1pY29uLnN3YWwyLXN1Y2Nlc3MgW2NsYXNzXj1zd2FsMi1zdWNjZXNzLWxpbmVdW2NsYXNzJD1sb25nXXt0b3A6Mi4zNzVlbTtyaWdodDouNWVtO3dpZHRoOjIuOTM3NWVtO3RyYW5zZm9ybTpyb3RhdGUoLTQ1ZGVnKX0uc3dhbDItaWNvbi5zd2FsMi1zdWNjZXNzLnN3YWwyLWljb24tc2hvdyAuc3dhbDItc3VjY2Vzcy1saW5lLXRpcHthbmltYXRpb246c3dhbDItYW5pbWF0ZS1zdWNjZXNzLWxpbmUtdGlwIC43NXN9LnN3YWwyLWljb24uc3dhbDItc3VjY2Vzcy5zd2FsMi1pY29uLXNob3cgLnN3YWwyLXN1Y2Nlc3MtbGluZS1sb25ne2FuaW1hdGlvbjpzd2FsMi1hbmltYXRlLXN1Y2Nlc3MtbGluZS1sb25nIC43NXN9LnN3YWwyLWljb24uc3dhbDItc3VjY2Vzcy5zd2FsMi1pY29uLXNob3cgLnN3YWwyLXN1Y2Nlc3MtY2lyY3VsYXItbGluZS1yaWdodHthbmltYXRpb246c3dhbDItcm90YXRlLXN1Y2Nlc3MtY2lyY3VsYXItbGluZSA0LjI1cyBlYXNlLWlufS5zd2FsMi1wcm9ncmVzcy1zdGVwc3tmbGV4LXdyYXA6d3JhcDthbGlnbi1pdGVtczpjZW50ZXI7bWF4LXdpZHRoOjEwMCU7bWFyZ2luOjEuMjVlbSBhdXRvO3BhZGRpbmc6MDtiYWNrZ3JvdW5kOnJnYmEoMCwwLDAsMCk7Zm9udC13ZWlnaHQ6NjAwfS5zd2FsMi1wcm9ncmVzcy1zdGVwcyBsaXtkaXNwbGF5OmlubGluZS1ibG9jaztwb3NpdGlvbjpyZWxhdGl2ZX0uc3dhbDItcHJvZ3Jlc3Mtc3RlcHMgLnN3YWwyLXByb2dyZXNzLXN0ZXB7ei1pbmRleDoyMDtmbGV4LXNocmluazowO3dpZHRoOjJlbTtoZWlnaHQ6MmVtO2JvcmRlci1yYWRpdXM6MmVtO2JhY2tncm91bmQ6IzI3NzhjNDtjb2xvcjojZmZmO2xpbmUtaGVpZ2h0OjJlbTt0ZXh0LWFsaWduOmNlbnRlcn0uc3dhbDItcHJvZ3Jlc3Mtc3RlcHMgLnN3YWwyLXByb2dyZXNzLXN0ZXAuc3dhbDItYWN0aXZlLXByb2dyZXNzLXN0ZXB7YmFja2dyb3VuZDojMjc3OGM0fS5zd2FsMi1wcm9ncmVzcy1zdGVwcyAuc3dhbDItcHJvZ3Jlc3Mtc3RlcC5zd2FsMi1hY3RpdmUtcHJvZ3Jlc3Mtc3RlcH4uc3dhbDItcHJvZ3Jlc3Mtc3RlcHtiYWNrZ3JvdW5kOiNhZGQ4ZTY7Y29sb3I6I2ZmZn0uc3dhbDItcHJvZ3Jlc3Mtc3RlcHMgLnN3YWwyLXByb2dyZXNzLXN0ZXAuc3dhbDItYWN0aXZlLXByb2dyZXNzLXN0ZXB+LnN3YWwyLXByb2dyZXNzLXN0ZXAtbGluZXtiYWNrZ3JvdW5kOiNhZGQ4ZTZ9LnN3YWwyLXByb2dyZXNzLXN0ZXBzIC5zd2FsMi1wcm9ncmVzcy1zdGVwLWxpbmV7ei1pbmRleDoxMDtmbGV4LXNocmluazowO3dpZHRoOjIuNWVtO2hlaWdodDouNGVtO21hcmdpbjowIC0xcHg7YmFja2dyb3VuZDojMjc3OGM0fVtjbGFzc149c3dhbDJdey13ZWJraXQtdGFwLWhpZ2hsaWdodC1jb2xvcjpyZ2JhKDAsMCwwLDApfS5zd2FsMi1zaG93e2FuaW1hdGlvbjpzd2FsMi1zaG93IC4zc30uc3dhbDItaGlkZXthbmltYXRpb246c3dhbDItaGlkZSAuMTVzIGZvcndhcmRzfS5zd2FsMi1ub2FuaW1hdGlvbnt0cmFuc2l0aW9uOm5vbmV9LnN3YWwyLXNjcm9sbGJhci1tZWFzdXJle3Bvc2l0aW9uOmFic29sdXRlO3RvcDotOTk5OXB4O3dpZHRoOjUwcHg7aGVpZ2h0OjUwcHg7b3ZlcmZsb3c6c2Nyb2xsfS5zd2FsMi1ydGwgLnN3YWwyLWNsb3Nle21hcmdpbi1yaWdodDppbml0aWFsO21hcmdpbi1sZWZ0OjB9LnN3YWwyLXJ0bCAuc3dhbDItdGltZXItcHJvZ3Jlc3MtYmFye3JpZ2h0OjA7bGVmdDphdXRvfUBrZXlmcmFtZXMgc3dhbDItdG9hc3Qtc2hvd3swJXt0cmFuc2Zvcm06dHJhbnNsYXRlWSgtMC42MjVlbSkgcm90YXRlWigyZGVnKX0zMyV7dHJhbnNmb3JtOnRyYW5zbGF0ZVkoMCkgcm90YXRlWigtMmRlZyl9NjYle3RyYW5zZm9ybTp0cmFuc2xhdGVZKDAuMzEyNWVtKSByb3RhdGVaKDJkZWcpfTEwMCV7dHJhbnNmb3JtOnRyYW5zbGF0ZVkoMCkgcm90YXRlWigwZGVnKX19QGtleWZyYW1lcyBzd2FsMi10b2FzdC1oaWRlezEwMCV7dHJhbnNmb3JtOnJvdGF0ZVooMWRlZyk7b3BhY2l0eTowfX1Aa2V5ZnJhbWVzIHN3YWwyLXRvYXN0LWFuaW1hdGUtc3VjY2Vzcy1saW5lLXRpcHswJXt0b3A6LjU2MjVlbTtsZWZ0Oi4wNjI1ZW07d2lkdGg6MH01NCV7dG9wOi4xMjVlbTtsZWZ0Oi4xMjVlbTt3aWR0aDowfTcwJXt0b3A6LjYyNWVtO2xlZnQ6LTAuMjVlbTt3aWR0aDoxLjYyNWVtfTg0JXt0b3A6MS4wNjI1ZW07bGVmdDouNzVlbTt3aWR0aDouNWVtfTEwMCV7dG9wOjEuMTI1ZW07bGVmdDouMTg3NWVtO3dpZHRoOi43NWVtfX1Aa2V5ZnJhbWVzIHN3YWwyLXRvYXN0LWFuaW1hdGUtc3VjY2Vzcy1saW5lLWxvbmd7MCV7dG9wOjEuNjI1ZW07cmlnaHQ6MS4zNzVlbTt3aWR0aDowfTY1JXt0b3A6MS4yNWVtO3JpZ2h0Oi45Mzc1ZW07d2lkdGg6MH04NCV7dG9wOi45Mzc1ZW07cmlnaHQ6MDt3aWR0aDoxLjEyNWVtfTEwMCV7dG9wOi45Mzc1ZW07cmlnaHQ6LjE4NzVlbTt3aWR0aDoxLjM3NWVtfX1Aa2V5ZnJhbWVzIHN3YWwyLXNob3d7MCV7dHJhbnNmb3JtOnNjYWxlKDAuNyl9NDUle3RyYW5zZm9ybTpzY2FsZSgxLjA1KX04MCV7dHJhbnNmb3JtOnNjYWxlKDAuOTUpfTEwMCV7dHJhbnNmb3JtOnNjYWxlKDEpfX1Aa2V5ZnJhbWVzIHN3YWwyLWhpZGV7MCV7dHJhbnNmb3JtOnNjYWxlKDEpO29wYWNpdHk6MX0xMDAle3RyYW5zZm9ybTpzY2FsZSgwLjUpO29wYWNpdHk6MH19QGtleWZyYW1lcyBzd2FsMi1hbmltYXRlLXN1Y2Nlc3MtbGluZS10aXB7MCV7dG9wOjEuMTg3NWVtO2xlZnQ6LjA2MjVlbTt3aWR0aDowfTU0JXt0b3A6MS4wNjI1ZW07bGVmdDouMTI1ZW07d2lkdGg6MH03MCV7dG9wOjIuMTg3NWVtO2xlZnQ6LTAuMzc1ZW07d2lkdGg6My4xMjVlbX04NCV7dG9wOjNlbTtsZWZ0OjEuMzEyNWVtO3dpZHRoOjEuMDYyNWVtfTEwMCV7dG9wOjIuODEyNWVtO2xlZnQ6LjgxMjVlbTt3aWR0aDoxLjU2MjVlbX19QGtleWZyYW1lcyBzd2FsMi1hbmltYXRlLXN1Y2Nlc3MtbGluZS1sb25nezAle3RvcDozLjM3NWVtO3JpZ2h0OjIuODc1ZW07d2lkdGg6MH02NSV7dG9wOjMuMzc1ZW07cmlnaHQ6Mi44NzVlbTt3aWR0aDowfTg0JXt0b3A6Mi4xODc1ZW07cmlnaHQ6MDt3aWR0aDozLjQzNzVlbX0xMDAle3RvcDoyLjM3NWVtO3JpZ2h0Oi41ZW07d2lkdGg6Mi45Mzc1ZW19fUBrZXlmcmFtZXMgc3dhbDItcm90YXRlLXN1Y2Nlc3MtY2lyY3VsYXItbGluZXswJXt0cmFuc2Zvcm06cm90YXRlKC00NWRlZyl9NSV7dHJhbnNmb3JtOnJvdGF0ZSgtNDVkZWcpfTEyJXt0cmFuc2Zvcm06cm90YXRlKC00MDVkZWcpfTEwMCV7dHJhbnNmb3JtOnJvdGF0ZSgtNDA1ZGVnKX19QGtleWZyYW1lcyBzd2FsMi1hbmltYXRlLWVycm9yLXgtbWFya3swJXttYXJnaW4tdG9wOjEuNjI1ZW07dHJhbnNmb3JtOnNjYWxlKDAuNCk7b3BhY2l0eTowfTUwJXttYXJnaW4tdG9wOjEuNjI1ZW07dHJhbnNmb3JtOnNjYWxlKDAuNCk7b3BhY2l0eTowfTgwJXttYXJnaW4tdG9wOi0wLjM3NWVtO3RyYW5zZm9ybTpzY2FsZSgxLjE1KX0xMDAle21hcmdpbi10b3A6MDt0cmFuc2Zvcm06c2NhbGUoMSk7b3BhY2l0eToxfX1Aa2V5ZnJhbWVzIHN3YWwyLWFuaW1hdGUtZXJyb3ItaWNvbnswJXt0cmFuc2Zvcm06cm90YXRlWCgxMDBkZWcpO29wYWNpdHk6MH0xMDAle3RyYW5zZm9ybTpyb3RhdGVYKDBkZWcpO29wYWNpdHk6MX19QGtleWZyYW1lcyBzd2FsMi1yb3RhdGUtbG9hZGluZ3swJXt0cmFuc2Zvcm06cm90YXRlKDBkZWcpfTEwMCV7dHJhbnNmb3JtOnJvdGF0ZSgzNjBkZWcpfX1Aa2V5ZnJhbWVzIHN3YWwyLWFuaW1hdGUtcXVlc3Rpb24tbWFya3swJXt0cmFuc2Zvcm06cm90YXRlWSgtMzYwZGVnKX0xMDAle3RyYW5zZm9ybTpyb3RhdGVZKDApfX1Aa2V5ZnJhbWVzIHN3YWwyLWFuaW1hdGUtaS1tYXJrezAle3RyYW5zZm9ybTpyb3RhdGVaKDQ1ZGVnKTtvcGFjaXR5OjB9MjUle3RyYW5zZm9ybTpyb3RhdGVaKC0yNWRlZyk7b3BhY2l0eTouNH01MCV7dHJhbnNmb3JtOnJvdGF0ZVooMTVkZWcpO29wYWNpdHk6Ljh9NzUle3RyYW5zZm9ybTpyb3RhdGVaKC01ZGVnKTtvcGFjaXR5OjF9MTAwJXt0cmFuc2Zvcm06cm90YXRlWCgwKTtvcGFjaXR5OjF9fWJvZHkuc3dhbDItc2hvd246bm90KC5zd2FsMi1uby1iYWNrZHJvcCk6bm90KC5zd2FsMi10b2FzdC1zaG93bil7b3ZlcmZsb3c6aGlkZGVufWJvZHkuc3dhbDItaGVpZ2h0LWF1dG97aGVpZ2h0OmF1dG8gIWltcG9ydGFudH1ib2R5LnN3YWwyLW5vLWJhY2tkcm9wIC5zd2FsMi1jb250YWluZXJ7YmFja2dyb3VuZC1jb2xvcjpyZ2JhKDAsMCwwLDApICFpbXBvcnRhbnQ7cG9pbnRlci1ldmVudHM6bm9uZX1ib2R5LnN3YWwyLW5vLWJhY2tkcm9wIC5zd2FsMi1jb250YWluZXIgLnN3YWwyLXBvcHVwe3BvaW50ZXItZXZlbnRzOmFsbH1ib2R5LnN3YWwyLW5vLWJhY2tkcm9wIC5zd2FsMi1jb250YWluZXIgLnN3YWwyLW1vZGFse2JveC1zaGFkb3c6MCAwIDEwcHggcmdiYSgwLDAsMCwuNCl9QG1lZGlhIHByaW50e2JvZHkuc3dhbDItc2hvd246bm90KC5zd2FsMi1uby1iYWNrZHJvcCk6bm90KC5zd2FsMi10b2FzdC1zaG93bil7b3ZlcmZsb3cteTpzY3JvbGwgIWltcG9ydGFudH1ib2R5LnN3YWwyLXNob3duOm5vdCguc3dhbDItbm8tYmFja2Ryb3ApOm5vdCguc3dhbDItdG9hc3Qtc2hvd24pPlthcmlhLWhpZGRlbj10cnVlXXtkaXNwbGF5Om5vbmV9Ym9keS5zd2FsMi1zaG93bjpub3QoLnN3YWwyLW5vLWJhY2tkcm9wKTpub3QoLnN3YWwyLXRvYXN0LXNob3duKSAuc3dhbDItY29udGFpbmVye3Bvc2l0aW9uOnN0YXRpYyAhaW1wb3J0YW50fX1ib2R5LnN3YWwyLXRvYXN0LXNob3duIC5zd2FsMi1jb250YWluZXJ7Ym94LXNpemluZzpib3JkZXItYm94O3dpZHRoOjM2MHB4O21heC13aWR0aDoxMDAlO2JhY2tncm91bmQtY29sb3I6cmdiYSgwLDAsMCwwKTtwb2ludGVyLWV2ZW50czpub25lfWJvZHkuc3dhbDItdG9hc3Qtc2hvd24gLnN3YWwyLWNvbnRhaW5lci5zd2FsMi10b3B7dG9wOjA7cmlnaHQ6YXV0bztib3R0b206YXV0bztsZWZ0OjUwJTt0cmFuc2Zvcm06dHJhbnNsYXRlWCgtNTAlKX1ib2R5LnN3YWwyLXRvYXN0LXNob3duIC5zd2FsMi1jb250YWluZXIuc3dhbDItdG9wLWVuZCxib2R5LnN3YWwyLXRvYXN0LXNob3duIC5zd2FsMi1jb250YWluZXIuc3dhbDItdG9wLXJpZ2h0e3RvcDowO3JpZ2h0OjA7Ym90dG9tOmF1dG87bGVmdDphdXRvfWJvZHkuc3dhbDItdG9hc3Qtc2hvd24gLnN3YWwyLWNvbnRhaW5lci5zd2FsMi10b3Atc3RhcnQsYm9keS5zd2FsMi10b2FzdC1zaG93biAuc3dhbDItY29udGFpbmVyLnN3YWwyLXRvcC1sZWZ0e3RvcDowO3JpZ2h0OmF1dG87Ym90dG9tOmF1dG87bGVmdDowfWJvZHkuc3dhbDItdG9hc3Qtc2hvd24gLnN3YWwyLWNvbnRhaW5lci5zd2FsMi1jZW50ZXItc3RhcnQsYm9keS5zd2FsMi10b2FzdC1zaG93biAuc3dhbDItY29udGFpbmVyLnN3YWwyLWNlbnRlci1sZWZ0e3RvcDo1MCU7cmlnaHQ6YXV0bztib3R0b206YXV0bztsZWZ0OjA7dHJhbnNmb3JtOnRyYW5zbGF0ZVkoLTUwJSl9Ym9keS5zd2FsMi10b2FzdC1zaG93biAuc3dhbDItY29udGFpbmVyLnN3YWwyLWNlbnRlcnt0b3A6NTAlO3JpZ2h0OmF1dG87Ym90dG9tOmF1dG87bGVmdDo1MCU7dHJhbnNmb3JtOnRyYW5zbGF0ZSgtNTAlLCAtNTAlKX1ib2R5LnN3YWwyLXRvYXN0LXNob3duIC5zd2FsMi1jb250YWluZXIuc3dhbDItY2VudGVyLWVuZCxib2R5LnN3YWwyLXRvYXN0LXNob3duIC5zd2FsMi1jb250YWluZXIuc3dhbDItY2VudGVyLXJpZ2h0e3RvcDo1MCU7cmlnaHQ6MDtib3R0b206YXV0bztsZWZ0OmF1dG87dHJhbnNmb3JtOnRyYW5zbGF0ZVkoLTUwJSl9Ym9keS5zd2FsMi10b2FzdC1zaG93biAuc3dhbDItY29udGFpbmVyLnN3YWwyLWJvdHRvbS1zdGFydCxib2R5LnN3YWwyLXRvYXN0LXNob3duIC5zd2FsMi1jb250YWluZXIuc3dhbDItYm90dG9tLWxlZnR7dG9wOmF1dG87cmlnaHQ6YXV0bztib3R0b206MDtsZWZ0OjB9Ym9keS5zd2FsMi10b2FzdC1zaG93biAuc3dhbDItY29udGFpbmVyLnN3YWwyLWJvdHRvbXt0b3A6YXV0bztyaWdodDphdXRvO2JvdHRvbTowO2xlZnQ6NTAlO3RyYW5zZm9ybTp0cmFuc2xhdGVYKC01MCUpfWJvZHkuc3dhbDItdG9hc3Qtc2hvd24gLnN3YWwyLWNvbnRhaW5lci5zd2FsMi1ib3R0b20tZW5kLGJvZHkuc3dhbDItdG9hc3Qtc2hvd24gLnN3YWwyLWNvbnRhaW5lci5zd2FsMi1ib3R0b20tcmlnaHR7dG9wOmF1dG87cmlnaHQ6MDtib3R0b206MDtsZWZ0OmF1dG99XCIpOyIsIi8vIFRoZSBtb2R1bGUgY2FjaGVcbnZhciBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18gPSB7fTtcblxuLy8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbmZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG5cdHZhciBjYWNoZWRNb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdO1xuXHRpZiAoY2FjaGVkTW9kdWxlICE9PSB1bmRlZmluZWQpIHtcblx0XHRyZXR1cm4gY2FjaGVkTW9kdWxlLmV4cG9ydHM7XG5cdH1cblx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcblx0dmFyIG1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0gPSB7XG5cdFx0aWQ6IG1vZHVsZUlkLFxuXHRcdC8vIG5vIG1vZHVsZS5sb2FkZWQgbmVlZGVkXG5cdFx0ZXhwb3J0czoge31cblx0fTtcblxuXHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cblx0X193ZWJwYWNrX21vZHVsZXNfX1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cblx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcblx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufVxuXG4iLCIvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuX193ZWJwYWNrX3JlcXVpcmVfXy5uID0gKG1vZHVsZSkgPT4ge1xuXHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cblx0XHQoKSA9PiAobW9kdWxlWydkZWZhdWx0J10pIDpcblx0XHQoKSA9PiAobW9kdWxlKTtcblx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgeyBhOiBnZXR0ZXIgfSk7XG5cdHJldHVybiBnZXR0ZXI7XG59OyIsIi8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb25zIGZvciBoYXJtb255IGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18uZCA9IChleHBvcnRzLCBkZWZpbml0aW9uKSA9PiB7XG5cdGZvcih2YXIga2V5IGluIGRlZmluaXRpb24pIHtcblx0XHRpZihfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZGVmaW5pdGlvbiwga2V5KSAmJiAhX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIGtleSkpIHtcblx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBrZXksIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBkZWZpbml0aW9uW2tleV0gfSk7XG5cdFx0fVxuXHR9XG59OyIsIl9fd2VicGFja19yZXF1aXJlX18ubyA9IChvYmosIHByb3ApID0+IChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wKSkiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLm5jID0gdW5kZWZpbmVkOyIsIlxuICAgICAgaW1wb3J0IEFQSSBmcm9tIFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiO1xuICAgICAgaW1wb3J0IGRvbUFQSSBmcm9tIFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlRG9tQVBJLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0Rm4gZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzXCI7XG4gICAgICBpbXBvcnQgc2V0QXR0cmlidXRlcyBmcm9tIFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3NldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcy5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydFN0eWxlRWxlbWVudCBmcm9tIFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydFN0eWxlRWxlbWVudC5qc1wiO1xuICAgICAgaW1wb3J0IHN0eWxlVGFnVHJhbnNmb3JtRm4gZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qc1wiO1xuICAgICAgaW1wb3J0IGNvbnRlbnQsICogYXMgbmFtZWRFeHBvcnQgZnJvbSBcIiEhLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9zdHlsZS5jc3NcIjtcbiAgICAgIFxuICAgICAgXG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuc3R5bGVUYWdUcmFuc2Zvcm0gPSBzdHlsZVRhZ1RyYW5zZm9ybUZuO1xub3B0aW9ucy5zZXRBdHRyaWJ1dGVzID0gc2V0QXR0cmlidXRlcztcblxuICAgICAgb3B0aW9ucy5pbnNlcnQgPSBpbnNlcnRGbi5iaW5kKG51bGwsIFwiaGVhZFwiKTtcbiAgICBcbm9wdGlvbnMuZG9tQVBJID0gZG9tQVBJO1xub3B0aW9ucy5pbnNlcnRTdHlsZUVsZW1lbnQgPSBpbnNlcnRTdHlsZUVsZW1lbnQ7XG5cbnZhciB1cGRhdGUgPSBBUEkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5leHBvcnQgKiBmcm9tIFwiISEuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL3N0eWxlLmNzc1wiO1xuICAgICAgIGV4cG9ydCBkZWZhdWx0IGNvbnRlbnQgJiYgY29udGVudC5sb2NhbHMgPyBjb250ZW50LmxvY2FscyA6IHVuZGVmaW5lZDtcbiIsIlxuZXhwb3J0IGxldCB0YXNrcyA9IFtdO1xuXG5leHBvcnQgZnVuY3Rpb24gYWRkVGFzayAoKSB7XG4gIGNvbnNvbGUubG9nKCdDcmVhdGluZyBhIHRhc2shJyk7XG4gIHRhc2tzLnB1c2gobmV3IFRhc2soYCR7dGl0bGUudmFsdWV9YCwgYCR7ZHVlRGF0ZS52YWx1ZX1gLCBgJHtwcmlvcml0eS52YWx1ZX1gLCBgJHtkZXNjcmlwdGlvbi52YWx1ZX1gLCB0YXNrcy5sZW5ndGgpKTtcbn1cblxud2luZG93LmFkZFRhc2sgPSBhZGRUYXNrO1xud2luZG93LnRhc2tzID0gdGFza3M7XG5cbmV4cG9ydCBjbGFzcyBUYXNrIHtcbiAgY29uc3RydWN0b3IgKG5hbWUsIGR1ZURhdGUsIHByaW9yaXR5LCBkZXNjcmlwdGlvbiwgaWQpIHtcbiAgICB0aGlzLm5hbWUgPSBuYW1lO1xuICAgIHRoaXMuZHVlRGF0ZSA9IGR1ZURhdGU7XG4gICAgdGhpcy5wcmlvcml0eSA9IHByaW9yaXR5O1xuICAgIHRoaXMuZGVzY3JpcHRpb24gPSBkZXNjcmlwdGlvbjtcbiAgICB0aGlzLmlkID0gaWQ7XG4gIH1cbn0iLCJcbmltcG9ydCBTd2FsIGZyb20gJ3N3ZWV0YWxlcnQyJztcblxuZXhwb3J0IGZ1bmN0aW9uIGdlbmVyYXRlTGF5b3V0KCkge1xuICBjb25zb2xlLmxvZygnR2VuZXJhdGluZyBhIHBhZ2UhJyk7XG4gIGNvbnN0IGNvbnRlbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnY29udGVudCcpO1xuXG4gIGNvbnN0IHNpZGVCYXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgc2lkZUJhci5zZXRBdHRyaWJ1dGUoJ2lkJywgJ3NpZGUtYmFyJyk7XG4gIGNvbnN0IGZpbHRlclRhYnMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgZmlsdGVyVGFicy5zZXRBdHRyaWJ1dGUoJ2lkJywgJ2ZpbHRlci10YWJzJyk7XG4gIGNvbnN0IHRhc2tMaXN0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gIHRhc2tMaXN0LnNldEF0dHJpYnV0ZSgnaWQnLCAndGFzay1saXN0Jyk7XG5cbiAgc2lkZUJhci5hcHBlbmRDaGlsZChmaWx0ZXJUYWJzKTtcbiAgc2lkZUJhci5hcHBlbmRDaGlsZCh0YXNrTGlzdCk7XG5cbiAgY29uc3QgaW5mbyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICBpbmZvLnNldEF0dHJpYnV0ZSgnaWQnLCAndGFzay1pbmZvJyk7XG5cbiAgY29udGVudC5hcHBlbmRDaGlsZChzaWRlQmFyKTtcbiAgY29udGVudC5hcHBlbmRDaGlsZChpbmZvKTtcblxuICBjb25zdCBmaWx0ZXJzID0gWydUb2RheScsICdVcGNvbWluZycsICdQYXN0IER1ZScsICdBbnl0aW1lJywgJ0FsbCBUYXNrcyddO1xuXG4gIGNvbnN0IGZpbHRlckxpc3QgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd1bCcpO1xuXG4gIGxldCBsaXN0RWxlbWVudDtcbiAgbGV0IGxpc3RIZWFkZXI7XG5cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBmaWx0ZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgbGlzdEVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdsaScpO1xuICAgIGxpc3RIZWFkZXIgPSBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShmaWx0ZXJzW2ldKTtcbiAgICBsaXN0RWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2lkJywgYCR7ZmlsdGVyc1tpXS5yZXBsYWNlKC9cXHMvZywgXCItXCIpfWApO1xuICAgIGxpc3RFbGVtZW50LmFwcGVuZENoaWxkKGxpc3RIZWFkZXIpO1xuICAgIGZpbHRlckxpc3QuYXBwZW5kQ2hpbGQobGlzdEVsZW1lbnQpO1xuICB9XG5cbiAgZmlsdGVyVGFicy5hcHBlbmRDaGlsZChmaWx0ZXJMaXN0KTtcblxuICBmb3IgKGxldCBpID0gMDsgaSA8IGZpbHRlcnMubGVuZ3RoOyBpKyspIHtcbiAgICBmaWx0ZXJMaXN0ZW5lcnMoZmlsdGVyc1tpXSk7XG4gIH1cblxufVxuXG5mdW5jdGlvbiBmaWx0ZXJMaXN0ZW5lcnMgKGZpbHRlcikge1xuICBsZXQgdGFiID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoYCR7ZmlsdGVyLnJlcGxhY2UoL1xccy9nLCBcIi1cIil9YCk7XG4gIHRhYi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcbiAgICBjb25zb2xlLmxvZyhgWW91IGNsaWNrZWQgb24gJHtmaWx0ZXJ9YClcbiAgICBpZiAoZmlsdGVyID09PSAnQWxsIFRhc2tzJykge1xuICAgICAgbG9hZFRhc2tzKHRhc2tzKTtcbiAgICB9XG4gIH0pO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gbG9hZFRhc2tzICh0YXNrcykge1xuICBjb25zb2xlLmxvZygnSSBhbSBsb2FkaW5nIHRhc2tzIScpO1xuXG4gIGNvbnN0IHRhc2tJbmZvID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3Rhc2staW5mbycpO1xuXG4gIGNsZWFyVGFza1dpbmRvdyh0YXNrSW5mbyk7XG5cbiAgaWYgKHRhc2tzLmxlbmd0aCA9PT0gMCkge1xuICAgIGNvbnNvbGUubG9nKCdObyB0YXNrcyBmb3VuZCEnKTtcbiAgICBTd2FsLmZpcmUoe1xuICAgICAgdGl0bGU6ICdZb3UgZG8gbm90IGhhdmUgYW55IHRhc2tzLiBXb3VsZCB5b3UgbGlrZSB0byBjcmVhdGUgb25lPycsXG4gICAgICBpY29uOiAncXVlc3Rpb24nLFxuICAgICAgc2hvd0Nsb3NlQnV0dG9uOiB0cnVlLFxuICAgICAgc2hvd0RlbnlCdXR0b246IHRydWUsXG4gICAgICBmb2N1c0NvbmZpcm06IGZhbHNlLFxuICAgICAgY29uZmlybUJ1dHRvblRleHQ6ICdZZXMnLFxuICAgICAgZGVueUJ1dHRvblRleHQ6ICdObycsXG4gICAgfSkudGhlbigocmVzdWx0KSA9PiB7XG4gICAgICBpZiAocmVzdWx0LmlzQ29uZmlybWVkKSB7XG4gICAgICAgIGFkZFRhc2tQYWdlICgpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIGNvbnN0IG5vVGFza3MgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdoMScpO1xuICAgIG5vVGFza3MuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoJ05vIHRhc2tzIGZvdW5kIScpKTtcbiAgICB0YXNrSW5mby5hcHBlbmRDaGlsZChub1Rhc2tzKTtcbiAgICByZXR1cm47XG4gIH1cblxuICBjb25zdCB0YXNrTGlzdEhlYWRlciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2gxJyk7XG4gIHRhc2tMaXN0SGVhZGVyLmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKCdZb3VyIFRhc2tzJykpO1xuICB0YXNrTGlzdEhlYWRlci5zZXRBdHRyaWJ1dGUoJ2dyaWQtcm93JywgJzEnKTtcblxuICBjb25zdCB0YXNrTGlzdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICB0YXNrTGlzdC5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgJ3Rhc2tzJyk7XG4gIHRhc2tMaXN0LnNldEF0dHJpYnV0ZSgnZ3JpZC1yb3cnLCAnMicpO1xuXG4gIHRhc2tJbmZvLmFwcGVuZENoaWxkKHRhc2tMaXN0SGVhZGVyKTtcbiAgdGFza0luZm8uYXBwZW5kQ2hpbGQodGFza0xpc3QpO1xuXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgdGFza3MubGVuZ3RoOyBpKyspIHtcbiAgICBsZXQgdGFza05hbWUgPSB0YXNrc1tpXS5uYW1lO1xuICAgIGxldCB0YXNrRHVlRGF0ZSA9IHRhc2tzW2ldLmR1ZURhdGU7XG4gICAgbGV0IHRhc2tQcmlvcml0eSA9IHRhc2tzW2ldLnByaW9yaXR5O1xuICAgIGxldCB0YXNrRGVzY3JpcHRpb24gPSB0YXNrc1tpXS5kZXNjcmlwdGlvbjtcblxuICAgIGxldCBjYXJkID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgY2FyZC5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgJ2NhcmQnKTtcblxuICAgIGxldCBjYXJkTmFtZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2gzJyk7XG4gICAgY2FyZE5hbWUuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUodGFza05hbWUpKTtcbiAgICBjYXJkTmFtZS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcbiAgICAgIGRpc3BsYXlUYXNrKHRhc2tzW2ldKTtcbiAgICB9KTtcblxuICAgIGxldCBjYXJkRGVzY3JpcHRpb24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdwJyk7XG4gICAgY2FyZERlc2NyaXB0aW9uLmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKHRhc2tEZXNjcmlwdGlvbikpO1xuXG4gICAgbGV0IGNhcmRGb290ZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICBsZXQgY2FyZFByaW9yaXR5ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgY2FyZFByaW9yaXR5LmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKHRhc2tQcmlvcml0eSkpO1xuICAgIGxldCBjYXJkRHVlRGF0ZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIGNhcmREdWVEYXRlLmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKHRhc2tEdWVEYXRlKSk7XG5cbiAgICBjYXJkRm9vdGVyLmFwcGVuZChjYXJkUHJpb3JpdHkpO1xuICAgIGNhcmRGb290ZXIuYXBwZW5kKGNhcmREdWVEYXRlKTtcblxuICAgIGNhcmQuYXBwZW5kQ2hpbGQoY2FyZE5hbWUpO1xuICAgIGNhcmQuYXBwZW5kQ2hpbGQoY2FyZERlc2NyaXB0aW9uKTtcbiAgICBjYXJkLmFwcGVuZENoaWxkKGNhcmRGb290ZXIpO1xuXG4gICAgdGFza0xpc3QuYXBwZW5kQ2hpbGQoY2FyZCk7XG4gIH1cbn1cblxuZnVuY3Rpb24gYWRkVGFza1BhZ2UgKCkge1xuICBjb25zb2xlLmxvZyhcIkxldCdzIGFkZCBvbmUhXCIpO1xuICBjb25zdCB0YXNrSW5mbyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCd0YXNrLWluZm8nKTtcblxuICBjbGVhclRhc2tXaW5kb3codGFza0luZm8pO1xuXG4gIGNvbnN0IHRhc2tIZWFkZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdoMScpO1xuICB0YXNrSGVhZGVyLmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKCdDb21wbGV0ZSB0aGlzIGZvcm0gdG8gYWRkIGEgbmV3IHRhc2snKSk7XG4gIHRhc2tIZWFkZXIuc2V0QXR0cmlidXRlKCdncmlkLXJvdycsICcxJyk7XG5cbiAgY29uc3QgdGFza0Zvcm0gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdmb3JtJyk7XG4gIHRhc2tGb3JtLnNldEF0dHJpYnV0ZSgnaWQnLCAndGFza0Zvcm0nKTtcbiAgdGFza0Zvcm0uc2V0QXR0cmlidXRlKCdvblN1Ym1pdCcsICdldmVudC5wcmV2ZW50RGVmYXVsdCgpICYgbWFuYWdlVGFza3MoKScpO1xuICB0YXNrRm9ybS5zZXRBdHRyaWJ1dGUoJ2dyaWQtcm93JywgJzInKTtcblxuICB0YXNrSW5mby5hcHBlbmRDaGlsZCh0YXNrSGVhZGVyKTtcbiAgdGFza0luZm8uYXBwZW5kQ2hpbGQodGFza0Zvcm0pO1xuXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgNTsgaSsrKSB7XG4gICAgbGV0IGZvcm1Cb3ggPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICBmb3JtQm94LnNldEF0dHJpYnV0ZSgnY2xhc3MnLCAnZGF0YScpO1xuICAgIHRhc2tGb3JtLmFwcGVuZENoaWxkKGZvcm1Cb3gpO1xuICB9XG5cbiAgLy8gY3JlYXRlIGdyaWQgc28gZm9ybSBlbnRyeSBlbGVtZW50cyBhcmUgc2VwYXJhdGUgYW5kIGNhbiBiZSByZWFkIGJ5IHRoZSB1c2VyLlxuXG4gIC8vIGNyZWF0ZSBmb3JtIHN1Ym1pdCBidXR0b25cblxuICBjb25zdCBzdWJtaXRCdXR0b24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpbnB1dCcpO1xuICBzdWJtaXRCdXR0b24uc2V0QXR0cmlidXRlKCd0eXBlJywgJ3N1Ym1pdCcpO1xuICBzdWJtaXRCdXR0b24uc2V0QXR0cmlidXRlKCd2YWx1ZScsICdTdWJtaXQnKTtcbiAgc3VibWl0QnV0dG9uLnNldEF0dHJpYnV0ZSgnaWQnLCAnc3VibWl0Jyk7XG4gIHN1Ym1pdEJ1dHRvbi5zZXRBdHRyaWJ1dGUoJ25hbWUnLCAnc3VibWl0Jyk7XG5cbiAgLy8gY3JlYXRlIHRpdGxlIGlucHV0XG5cbiAgY29uc3QgdGl0bGVMYWJlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2xhYmVsJyk7XG4gIHRpdGxlTGFiZWwuaHRtbEZvciA9ICd0aXRsZSc7XG4gIHRpdGxlTGFiZWwuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoJ1RpdGxlOiAnKSk7XG5cbiAgY29uc3QgdGl0bGVJbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2lucHV0Jyk7XG4gIHRpdGxlSW5wdXQuc2V0QXR0cmlidXRlKCd0eXBlJywgJ3RleHQnKTtcbiAgdGl0bGVJbnB1dC5zZXRBdHRyaWJ1dGUoJ2lkJywgJ3RpdGxlJyk7XG4gIHRpdGxlSW5wdXQuc2V0QXR0cmlidXRlKCduYW1lJywgJ3RpdGxlJyk7XG4gIHRpdGxlSW5wdXQucmVxdWlyZWQgPSB0cnVlO1xuXG4gIC8vIGNyZWF0ZSBkdWUgZGF0ZSBpbnB1dFxuXG4gIGNvbnN0IGR1ZURhdGVMYWJlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2xhYmVsJyk7XG4gIGR1ZURhdGVMYWJlbC5odG1sRm9yID0gJ2R1ZURhdGUnO1xuICBkdWVEYXRlTGFiZWwuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoJ0R1ZSBEYXRlOiAnKSk7XG4gIFxuICBjb25zdCBkdWVEYXRlSW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpbnB1dCcpO1xuICBkdWVEYXRlSW5wdXQuc2V0QXR0cmlidXRlKCd0eXBlJywgJ2RhdGUnKTtcbiAgZHVlRGF0ZUlucHV0LnNldEF0dHJpYnV0ZSgnaWQnLCAnZHVlRGF0ZScpO1xuICBkdWVEYXRlSW5wdXQuc2V0QXR0cmlidXRlKCduYW1lJywgJ2R1ZURhdGUnKTtcbiAgZHVlRGF0ZUlucHV0LnJlcXVpcmVkID0gdHJ1ZTtcblxuICAvLyBjcmVhdGUgcHJpb3JpdHkgaW5wdXRcblxuICBjb25zdCBwcmlvcml0eUxhYmVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnbGFiZWwnKTtcbiAgcHJpb3JpdHlMYWJlbC5odG1sRm9yID0gJ3ByaW9yaXR5JztcbiAgcHJpb3JpdHlMYWJlbC5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZSgnUHJpb3JpdHk6ICcpKTtcbiAgXG4gIGNvbnN0IHByaW9yaXR5SW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzZWxlY3QnKTtcbiAgcHJpb3JpdHlJbnB1dC5zZXRBdHRyaWJ1dGUoJ2lkJywgJ3ByaW9yaXR5Jyk7XG4gIHByaW9yaXR5SW5wdXQuc2V0QXR0cmlidXRlKCduYW1lJywgJ3ByaW9yaXR5Jyk7XG4gIHByaW9yaXR5SW5wdXQucmVxdWlyZWQgPSB0cnVlO1xuXG4gIGNvbnN0IHByaW9yaXR5Tm9uZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ29wdGlvbicpO1xuICBwcmlvcml0eU5vbmUudmFsdWUgPSAnbm9uZSc7XG4gIHByaW9yaXR5Tm9uZS5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZSgnTm9uZScpKTtcblxuICBjb25zdCBwcmlvcml0eUxvdyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ29wdGlvbicpO1xuICBwcmlvcml0eUxvdy52YWx1ZSA9ICdsb3cnO1xuICBwcmlvcml0eUxvdy5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZSgnTG93JykpO1xuXG4gIGNvbnN0IHByaW9yaXR5TWVkaXVtID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnb3B0aW9uJyk7XG4gIHByaW9yaXR5TWVkaXVtLnZhbHVlID0gJ21lZGl1bSc7XG4gIHByaW9yaXR5TWVkaXVtLmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKCdNZWRpdW0nKSk7IFxuXG4gIGNvbnN0IHByaW9yaXR5SGlnaCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ29wdGlvbicpO1xuICBwcmlvcml0eUhpZ2gudmFsdWUgPSAnaGlnaCc7XG4gIHByaW9yaXR5SGlnaC5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZSgnSGlnaCcpKTtcblxuICBwcmlvcml0eUlucHV0LmFwcGVuZENoaWxkKHByaW9yaXR5Tm9uZSk7XG4gIHByaW9yaXR5SW5wdXQuYXBwZW5kQ2hpbGQocHJpb3JpdHlMb3cpO1xuICBwcmlvcml0eUlucHV0LmFwcGVuZENoaWxkKHByaW9yaXR5TWVkaXVtKTtcbiAgcHJpb3JpdHlJbnB1dC5hcHBlbmRDaGlsZChwcmlvcml0eUhpZ2gpO1xuXG4gIC8vIGNyZWF0ZSBkZXNjcmlwdGlvbiBpbnB1dFxuXG4gIGNvbnN0IGRlc2NyaXB0aW9uTGFiZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdsYWJlbCcpO1xuICBkZXNjcmlwdGlvbkxhYmVsLmh0bWxGb3IgPSAnZGVzY3JpcHRpb24nO1xuICBkZXNjcmlwdGlvbkxhYmVsLmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKCdEZXNjcmlwdGlvbjogJykpO1xuXG4gIGNvbnN0IGRlc2NyaXB0aW9uSW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd0ZXh0YXJlYScpO1xuICBkZXNjcmlwdGlvbklucHV0LnNldEF0dHJpYnV0ZSgnaWQnLCAnZGVzY3JpcHRpb24nKTtcbiAgZGVzY3JpcHRpb25JbnB1dC5zZXRBdHRyaWJ1dGUoJ25hbWUnLCAnZGVzY3JpcHRpb24nKTtcbiAgZGVzY3JpcHRpb25JbnB1dC5zZXRBdHRyaWJ1dGUoJ3Jvd3MnLCAnMycpO1xuICBkZXNjcmlwdGlvbklucHV0LnNldEF0dHJpYnV0ZSgnY29scycsICc3NScpO1xuICBkZXNjcmlwdGlvbklucHV0LnJlcXVpcmVkID0gdHJ1ZTtcblxuICAvLyBhcHBlbmQgZm9ybSBlbGVtZW50c1xuXG4gIHRhc2tGb3JtLmNoaWxkTm9kZXNbMF0uYXBwZW5kQ2hpbGQoc3VibWl0QnV0dG9uKTtcblxuICB0YXNrRm9ybS5jaGlsZE5vZGVzWzFdLmFwcGVuZENoaWxkKHRpdGxlTGFiZWwpO1xuICB0YXNrRm9ybS5jaGlsZE5vZGVzWzFdLmFwcGVuZENoaWxkKHRpdGxlSW5wdXQpO1xuXG4gIHRhc2tGb3JtLmNoaWxkTm9kZXNbMl0uYXBwZW5kQ2hpbGQoZHVlRGF0ZUxhYmVsKTtcbiAgdGFza0Zvcm0uY2hpbGROb2Rlc1syXS5hcHBlbmRDaGlsZChkdWVEYXRlSW5wdXQpO1xuXG4gIHRhc2tGb3JtLmNoaWxkTm9kZXNbM10uYXBwZW5kQ2hpbGQocHJpb3JpdHlMYWJlbCk7XG4gIHRhc2tGb3JtLmNoaWxkTm9kZXNbM10uYXBwZW5kQ2hpbGQocHJpb3JpdHlJbnB1dCk7XG5cbiAgdGFza0Zvcm0uY2hpbGROb2Rlc1s0XS5hcHBlbmRDaGlsZChkZXNjcmlwdGlvbkxhYmVsKTtcbiAgdGFza0Zvcm0uY2hpbGROb2Rlc1s0XS5hcHBlbmRDaGlsZChkZXNjcmlwdGlvbklucHV0KTtcbn1cblxuZnVuY3Rpb24gYWRkQW5vdGhlclRhc2soKSB7XG4gIFN3YWwuZmlyZSh7XG4gICAgdGl0bGU6ICdUYXNrIGFkZGVkLCB3b3VsZCB5b3UgbGlrZSB0byBhZGQgYW5vdGhlcj8nLFxuICAgIGljb246ICdxdWVzdGlvbicsXG4gICAgc2hvd0Nsb3NlQnV0dG9uOiB0cnVlLFxuICAgIHNob3dEZW55QnV0dG9uOiB0cnVlLFxuICAgIGZvY3VzQ29uZmlybTogZmFsc2UsXG4gICAgY29uZmlybUJ1dHRvblRleHQ6ICdZZXMsIEkgaGF2ZSBtb3JlIHRhc2tzJyxcbiAgICBkZW55QnV0dG9uVGV4dDogJ05vLCBzaG93IG15IHRhc2tzJyxcbiAgfSkudGhlbigocmVzdWx0KSA9PiB7XG4gICAgaWYgKHJlc3VsdC5pc0NvbmZpcm1lZCkge1xuICAgICAgYWRkVGFza1BhZ2UoKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICBsb2FkVGFza3ModGFza3MpO1xuICAgIH1cbiAgfSk7XG59XG5cbndpbmRvdy5hZGRBbm90aGVyVGFzayA9IGFkZEFub3RoZXJUYXNrO1xuXG5mdW5jdGlvbiBjbGVhclRhc2tXaW5kb3cgKHRhc2tJbmZvKSB7XG4gIGxldCBmaXJzdCA9IHRhc2tJbmZvLmZpcnN0RWxlbWVudENoaWxkO1xuICB3aGlsZSAoZmlyc3QpIHtcbiAgICBmaXJzdC5yZW1vdmUoKTtcbiAgICBmaXJzdCA9IHRhc2tJbmZvLmZpcnN0RWxlbWVudENoaWxkO1xuICB9XG59XG5cbndpbmRvdy5jbGVhclRhc2tXaW5kb3cgPSBjbGVhclRhc2tXaW5kb3c7XG5cbmZ1bmN0aW9uIG1hbmFnZVRhc2tzICgpIHtcbiAgYWRkVGFzaygpO1xuICBhZGRBbm90aGVyVGFzaygpO1xufVxuXG53aW5kb3cubWFuYWdlVGFza3MgPSBtYW5hZ2VUYXNrcztcblxuZnVuY3Rpb24gZGlzcGxheVRhc2sgKHRhc2spIHtcbiAgY29uc3QgdGFza0luZm8gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgndGFzay1pbmZvJyk7XG4gIGNsZWFyVGFza1dpbmRvdyh0YXNrSW5mbyk7XG5cbiAgY29uc3QgdGFza0hlYWRlciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2gxJyk7XG4gIHRhc2tIZWFkZXIuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoYCR7dGFzay5uYW1lfWApKTtcbiAgdGFza0hlYWRlci5zdHlsZS5ncmlkUm93ID0gJzEnO1xuXG4gIGNvbnN0IHRhc2tEYXRhID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gIHRhc2tEYXRhLnN0eWxlLmdyaWRSb3cgPSAnMic7XG4gIHRhc2tEYXRhLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCAndGFzay1kYXRhJyk7XG5cbiAgdGFza0luZm8uYXBwZW5kQ2hpbGQodGFza0hlYWRlcik7XG4gIHRhc2tJbmZvLmFwcGVuZENoaWxkKHRhc2tEYXRhKTtcblxuICBjb25zdCB0YXNrRHVlRGF0ZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICB0YXNrRHVlRGF0ZS5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShgRHVlOiAke3Rhc2suZHVlRGF0ZX1gKSk7XG4gIHRhc2tEdWVEYXRlLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCAndGFzay1kYXRlJyk7XG5cbiAgY29uc3QgdGFza1ByaW9yaXR5ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gIHRhc2tQcmlvcml0eS5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShgUHJpb3JpdHk6ICR7dGFzay5wcmlvcml0eX1gKSk7XG4gIHRhc2tQcmlvcml0eS5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgJ3Rhc2stcHJpb3JpdHknKTtcblxuICBjb25zdCB0YXNrRGVzY3JpcHRpb24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgdGFza0Rlc2NyaXB0aW9uLmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGAgRGVzY3JpcHRpb246ICR7dGFzay5kZXNjcmlwdGlvbn1gKSk7XG4gIHRhc2tEZXNjcmlwdGlvbi5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgJ3Rhc2stZGVzY3JpcHRpb24nKTtcblxuICBjb25zdCB0YXNrRGVsZXRlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gIHRhc2tEZWxldGUuaW5uZXJIVE1MID0gJzxpIGNsYXNzID0gXCJtYXRlcmlhbC1pY29uc1wiPmRlbGV0ZTwvaT4nO1xuICB0YXNrRGVsZXRlLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCAnZGVsZXRlLWljb24nKTtcbiAgdGFza0RlbGV0ZS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcbiAgICBTd2FsLmZpcmUoe1xuICAgICAgdGl0bGU6ICdBcmUgeW91IHN1cmUgeW91IHdhbnQgdG8gZGVsZXRlIHRoaXMgdGFzaz8nLFxuICAgICAgdGV4dDogXCJZb3Ugd29uJ3QgYmUgYWJsZSB0byByZXZlcnQgdGhpcyFcIixcbiAgICAgIGljb246ICd3YXJuaW5nJyxcbiAgICAgIHNob3dDYW5jZWxCdXR0b246IHRydWUsXG4gICAgICBjb25maXJtQnV0dG9uQ29sb3I6ICcjMzA4NWQ2JyxcbiAgICAgIGNhbmNlbEJ1dHRvbkNvbG9yOiAnI2QzMycsXG4gICAgICBjb25maXJtQnV0dG9uVGV4dDogJ1llcywgZGVsZXRlIGl0ISdcbiAgICB9KS50aGVuKChyZXN1bHQpID0+IHtcbiAgICAgIGlmIChyZXN1bHQuaXNDb25maXJtZWQpIHtcbiAgICAgICAgU3dhbC5maXJlKFxuICAgICAgICAgICdEZWxldGVkIScsXG4gICAgICAgICAgJ1lvdXIgZmlsZSBoYXMgYmVlbiBkZWxldGVkLicsXG4gICAgICAgICAgJ3N1Y2Nlc3MnXG4gICAgICAgIClcbiAgICAgIH1cbiAgICB9KVxuICB9KTtcblxuICB0YXNrRGF0YS5hcHBlbmRDaGlsZCh0YXNrRHVlRGF0ZSk7XG4gIHRhc2tEYXRhLmFwcGVuZENoaWxkKHRhc2tQcmlvcml0eSk7XG4gIHRhc2tEYXRhLmFwcGVuZENoaWxkKHRhc2tEZXNjcmlwdGlvbik7XG4gIHRhc2tEYXRhLmFwcGVuZENoaWxkKHRhc2tEZWxldGUpO1xufSIsImltcG9ydCAnLi9zdHlsZS5jc3MnO1xuaW1wb3J0IHsgYWRkVGFzayB9IGZyb20gJy4vdGFza0xvZ2ljJztcbmltcG9ydCB7IHRhc2tzIH0gZnJvbSAnLi90YXNrTG9naWMnO1xuXG5pbXBvcnQgeyBnZW5lcmF0ZUxheW91dCB9IGZyb20gJy4vcGFnZU1hbmFnZXInO1xuaW1wb3J0IHsgbG9hZFRhc2tzIH0gZnJvbSAnLi9wYWdlTWFuYWdlcic7XG5cbndpbmRvdy5vbmxvYWQgPSBmdW5jdGlvbigpIHtcbiAgICBnZW5lcmF0ZUxheW91dCgpO1xuICAgIGxvYWRUYXNrcyh0YXNrcyk7XG59OyJdLCJuYW1lcyI6WyJfX19DU1NfTE9BREVSX0VYUE9SVF9fXyIsInB1c2giLCJtb2R1bGUiLCJpZCIsImV4cG9ydHMiLCJjc3NXaXRoTWFwcGluZ1RvU3RyaW5nIiwibGlzdCIsInRvU3RyaW5nIiwidGhpcyIsIm1hcCIsIml0ZW0iLCJjb250ZW50IiwibmVlZExheWVyIiwiY29uY2F0IiwibGVuZ3RoIiwiam9pbiIsImkiLCJtb2R1bGVzIiwibWVkaWEiLCJkZWR1cGUiLCJzdXBwb3J0cyIsImxheWVyIiwidW5kZWZpbmVkIiwiYWxyZWFkeUltcG9ydGVkTW9kdWxlcyIsImsiLCJfayIsImNzc01hcHBpbmciLCJidG9hIiwiYmFzZTY0IiwidW5lc2NhcGUiLCJlbmNvZGVVUklDb21wb25lbnQiLCJKU09OIiwic3RyaW5naWZ5IiwiZGF0YSIsInNvdXJjZU1hcHBpbmciLCJzdHlsZXNJbkRPTSIsImdldEluZGV4QnlJZGVudGlmaWVyIiwiaWRlbnRpZmllciIsInJlc3VsdCIsIm1vZHVsZXNUb0RvbSIsIm9wdGlvbnMiLCJpZENvdW50TWFwIiwiaWRlbnRpZmllcnMiLCJiYXNlIiwiY291bnQiLCJpbmRleEJ5SWRlbnRpZmllciIsIm9iaiIsImNzcyIsInNvdXJjZU1hcCIsInJlZmVyZW5jZXMiLCJ1cGRhdGVyIiwiYWRkRWxlbWVudFN0eWxlIiwiYnlJbmRleCIsInNwbGljZSIsImFwaSIsImRvbUFQSSIsInVwZGF0ZSIsIm5ld09iaiIsInJlbW92ZSIsImxhc3RJZGVudGlmaWVycyIsIm5ld0xpc3QiLCJpbmRleCIsIm5ld0xhc3RJZGVudGlmaWVycyIsIl9pIiwiX2luZGV4IiwibWVtbyIsImluc2VydCIsInN0eWxlIiwidGFyZ2V0Iiwic3R5bGVUYXJnZXQiLCJkb2N1bWVudCIsInF1ZXJ5U2VsZWN0b3IiLCJ3aW5kb3ciLCJIVE1MSUZyYW1lRWxlbWVudCIsImNvbnRlbnREb2N1bWVudCIsImhlYWQiLCJlIiwiZ2V0VGFyZ2V0IiwiRXJyb3IiLCJhcHBlbmRDaGlsZCIsImVsZW1lbnQiLCJjcmVhdGVFbGVtZW50Iiwic2V0QXR0cmlidXRlcyIsImF0dHJpYnV0ZXMiLCJzdHlsZUVsZW1lbnQiLCJub25jZSIsInNldEF0dHJpYnV0ZSIsImluc2VydFN0eWxlRWxlbWVudCIsInN0eWxlVGFnVHJhbnNmb3JtIiwiYXBwbHkiLCJwYXJlbnROb2RlIiwicmVtb3ZlQ2hpbGQiLCJyZW1vdmVTdHlsZUVsZW1lbnQiLCJzdHlsZVNoZWV0IiwiY3NzVGV4dCIsImZpcnN0Q2hpbGQiLCJjcmVhdGVUZXh0Tm9kZSIsInByaXZhdGVQcm9wcyIsImF3YWl0aW5nUHJvbWlzZSIsIldlYWtNYXAiLCJwcm9taXNlIiwiaW5uZXJQYXJhbXMiLCJkb21DYWNoZSIsInByZWZpeCIsIml0ZW1zIiwic3dhbENsYXNzZXMiLCJpY29uVHlwZXMiLCJjb25zb2xlUHJlZml4IiwiY2FwaXRhbGl6ZUZpcnN0TGV0dGVyIiwic3RyIiwiY2hhckF0IiwidG9VcHBlckNhc2UiLCJzbGljZSIsIndhcm4iLCJtZXNzYWdlIiwiY29uc29sZSIsImVycm9yIiwicHJldmlvdXNXYXJuT25jZU1lc3NhZ2VzIiwid2FybkFib3V0RGVwcmVjYXRpb24iLCJkZXByZWNhdGVkUGFyYW0iLCJ1c2VJbnN0ZWFkIiwiaW5jbHVkZXMiLCJjYWxsSWZGdW5jdGlvbiIsImFyZyIsImhhc1RvUHJvbWlzZUZuIiwidG9Qcm9taXNlIiwiYXNQcm9taXNlIiwiUHJvbWlzZSIsInJlc29sdmUiLCJpc1Byb21pc2UiLCJnZXRDb250YWluZXIiLCJib2R5IiwiY29udGFpbmVyIiwiZWxlbWVudEJ5U2VsZWN0b3IiLCJzZWxlY3RvclN0cmluZyIsImVsZW1lbnRCeUNsYXNzIiwiY2xhc3NOYW1lIiwiZ2V0UG9wdXAiLCJwb3B1cCIsImdldEljb24iLCJpY29uIiwiZ2V0VGl0bGUiLCJ0aXRsZSIsImdldEh0bWxDb250YWluZXIiLCJnZXRJbWFnZSIsImltYWdlIiwiZ2V0UHJvZ3Jlc3NTdGVwcyIsImdldFZhbGlkYXRpb25NZXNzYWdlIiwiZ2V0Q29uZmlybUJ1dHRvbiIsImFjdGlvbnMiLCJjb25maXJtIiwiZ2V0Q2FuY2VsQnV0dG9uIiwiY2FuY2VsIiwiZ2V0RGVueUJ1dHRvbiIsImRlbnkiLCJnZXRMb2FkZXIiLCJsb2FkZXIiLCJnZXRBY3Rpb25zIiwiZ2V0Rm9vdGVyIiwiZm9vdGVyIiwiZ2V0VGltZXJQcm9ncmVzc0JhciIsImdldENsb3NlQnV0dG9uIiwiY2xvc2UiLCJnZXRGb2N1c2FibGVFbGVtZW50cyIsImZvY3VzYWJsZUVsZW1lbnRzV2l0aFRhYmluZGV4IiwiQXJyYXkiLCJmcm9tIiwicXVlcnlTZWxlY3RvckFsbCIsInNvcnQiLCJhIiwiYiIsInRhYmluZGV4QSIsInBhcnNlSW50IiwiZ2V0QXR0cmlidXRlIiwidGFiaW5kZXhCIiwib3RoZXJGb2N1c2FibGVFbGVtZW50cyIsImZpbHRlciIsImVsIiwiYXJyIiwiaW5kZXhPZiIsInVuaXF1ZUFycmF5IiwiaXNWaXNpYmxlJDEiLCJpc01vZGFsIiwiaGFzQ2xhc3MiLCJzaG93biIsImlzVG9hc3QiLCJ0b2FzdCIsInN0YXRlcyIsInByZXZpb3VzQm9keVBhZGRpbmciLCJzZXRJbm5lckh0bWwiLCJlbGVtIiwiaHRtbCIsInRleHRDb250ZW50IiwicGFyc2VkIiwiRE9NUGFyc2VyIiwicGFyc2VGcm9tU3RyaW5nIiwiY2hpbGROb2RlcyIsImZvckVhY2giLCJjaGlsZCIsIkhUTUxWaWRlb0VsZW1lbnQiLCJIVE1MQXVkaW9FbGVtZW50IiwiY2xvbmVOb2RlIiwiY2xhc3NMaXN0Iiwic3BsaXQiLCJjb250YWlucyIsImFwcGx5Q3VzdG9tQ2xhc3MiLCJwYXJhbXMiLCJPYmplY3QiLCJ2YWx1ZXMiLCJzaG93Q2xhc3MiLCJyZW1vdmVDdXN0b21DbGFzc2VzIiwiY3VzdG9tQ2xhc3MiLCJhZGRDbGFzcyIsImdldElucHV0JDEiLCJpbnB1dENsYXNzIiwiY2hlY2tib3giLCJyYWRpbyIsInJhbmdlIiwiaW5wdXQiLCJmb2N1c0lucHV0IiwiZm9jdXMiLCJ0eXBlIiwidmFsIiwidmFsdWUiLCJ0b2dnbGVDbGFzcyIsImNvbmRpdGlvbiIsIkJvb2xlYW4iLCJpc0FycmF5IiwiYWRkIiwicmVtb3ZlQ2xhc3MiLCJnZXREaXJlY3RDaGlsZEJ5Q2xhc3MiLCJjaGlsZHJlbiIsIkhUTUxFbGVtZW50IiwiYXBwbHlOdW1lcmljYWxTdHlsZSIsInByb3BlcnR5IiwicmVtb3ZlUHJvcGVydHkiLCJzaG93IiwiZGlzcGxheSIsImFyZ3VtZW50cyIsImhpZGUiLCJzZXRTdHlsZSIsInBhcmVudCIsInNlbGVjdG9yIiwidG9nZ2xlIiwib2Zmc2V0V2lkdGgiLCJvZmZzZXRIZWlnaHQiLCJnZXRDbGllbnRSZWN0cyIsImlzU2Nyb2xsYWJsZSIsInNjcm9sbEhlaWdodCIsImNsaWVudEhlaWdodCIsImhhc0Nzc0FuaW1hdGlvbiIsImdldENvbXB1dGVkU3R5bGUiLCJhbmltRHVyYXRpb24iLCJwYXJzZUZsb2F0IiwiZ2V0UHJvcGVydHlWYWx1ZSIsInRyYW5zRHVyYXRpb24iLCJhbmltYXRlVGltZXJQcm9ncmVzc0JhciIsInRpbWVyIiwicmVzZXQiLCJ0aW1lclByb2dyZXNzQmFyIiwidHJhbnNpdGlvbiIsIndpZHRoIiwic2V0VGltZW91dCIsImdsb2JhbFN0YXRlIiwicmVzdG9yZUFjdGl2ZUVsZW1lbnQiLCJyZXR1cm5Gb2N1cyIsIngiLCJzY3JvbGxYIiwieSIsInNjcm9sbFkiLCJyZXN0b3JlRm9jdXNUaW1lb3V0IiwicHJldmlvdXNBY3RpdmVFbGVtZW50Iiwic2Nyb2xsVG8iLCJpc05vZGVFbnYiLCJzd2VldEhUTUwiLCJmaWxlIiwic2VsZWN0IiwibGFiZWwiLCJ0ZXh0YXJlYSIsInJlcGxhY2UiLCJyZXNldFZhbGlkYXRpb25NZXNzYWdlJDEiLCJjdXJyZW50SW5zdGFuY2UiLCJyZXNldFZhbGlkYXRpb25NZXNzYWdlIiwiaW5pdCIsIm9sZENvbnRhaW5lckV4aXN0ZWQiLCJvbGRDb250YWluZXIiLCJkb2N1bWVudEVsZW1lbnQiLCJyZXNldE9sZENvbnRhaW5lciIsInRhcmdldEVsZW1lbnQiLCJzZXR1cEFjY2Vzc2liaWxpdHkiLCJkaXJlY3Rpb24iLCJydGwiLCJzZXR1cFJUTCIsInJhbmdlT3V0cHV0Iiwib25pbnB1dCIsIm9uY2hhbmdlIiwiYWRkSW5wdXRDaGFuZ2VMaXN0ZW5lcnMiLCJwYXJzZUh0bWxUb0NvbnRhaW5lciIsInBhcmFtIiwiaGFuZGxlT2JqZWN0IiwianF1ZXJ5IiwiaGFuZGxlSnF1ZXJ5RWxlbSIsImFuaW1hdGlvbkVuZEV2ZW50IiwidGVzdEVsIiwidHJhbnNFbmRFdmVudE5hbWVzIiwiV2Via2l0QW5pbWF0aW9uIiwiYW5pbWF0aW9uIiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwicmVuZGVyQWN0aW9ucyIsImluc3RhbmNlIiwic2hvd0NvbmZpcm1CdXR0b24iLCJzaG93RGVueUJ1dHRvbiIsInNob3dDYW5jZWxCdXR0b24iLCJjb25maXJtQnV0dG9uIiwiZGVueUJ1dHRvbiIsImNhbmNlbEJ1dHRvbiIsInJlbmRlckJ1dHRvbiIsImJ1dHRvbnNTdHlsaW5nIiwic3R5bGVkIiwiY29uZmlybUJ1dHRvbkNvbG9yIiwiYmFja2dyb3VuZENvbG9yIiwiZGVueUJ1dHRvbkNvbG9yIiwiY2FuY2VsQnV0dG9uQ29sb3IiLCJoYW5kbGVCdXR0b25zU3R5bGluZyIsInJldmVyc2VCdXR0b25zIiwiaW5zZXJ0QmVmb3JlIiwicmVuZGVyQnV0dG9ucyIsImxvYWRlckh0bWwiLCJidXR0b24iLCJidXR0b25UeXBlIiwicmVuZGVyQ29udGFpbmVyIiwiYmFja2Ryb3AiLCJiYWNrZ3JvdW5kIiwiaGFuZGxlQmFja2Ryb3BQYXJhbSIsInBvc2l0aW9uIiwiY2VudGVyIiwiaGFuZGxlUG9zaXRpb25QYXJhbSIsImdyb3ciLCJncm93Q2xhc3MiLCJoYW5kbGVHcm93UGFyYW0iLCJpbnB1dENsYXNzZXMiLCJzaG93SW5wdXQiLCJyZW5kZXJJbnB1dFR5cGUiLCJpbnB1dENvbnRhaW5lciIsImdldElucHV0Q29udGFpbmVyIiwiaW5wdXRBdXRvRm9jdXMiLCJpbnB1dEF0dHJpYnV0ZXMiLCJhdHRyTmFtZSIsIm5hbWUiLCJyZW1vdmVBdHRyaWJ1dGUiLCJyZW1vdmVBdHRyaWJ1dGVzIiwiYXR0ciIsInNldEN1c3RvbUNsYXNzIiwic2V0SW5wdXRQbGFjZWhvbGRlciIsInBsYWNlaG9sZGVyIiwiaW5wdXRQbGFjZWhvbGRlciIsInNldElucHV0TGFiZWwiLCJwcmVwZW5kVG8iLCJpbnB1dExhYmVsIiwibGFiZWxDbGFzcyIsImlubmVyVGV4dCIsImluc2VydEFkamFjZW50RWxlbWVudCIsImlucHV0VHlwZSIsImNoZWNrQW5kU2V0SW5wdXRWYWx1ZSIsImlucHV0VmFsdWUiLCJ0ZXh0IiwiZW1haWwiLCJwYXNzd29yZCIsIm51bWJlciIsInRlbCIsInVybCIsInJhbmdlSW5wdXQiLCJkaXNhYmxlZCIsInNlbGVjdGVkIiwiY2hlY2tib3hDb250YWluZXIiLCJjaGVja2VkIiwiaW5pdGlhbFBvcHVwV2lkdGgiLCJNdXRhdGlvbk9ic2VydmVyIiwidGV4dGFyZWFXaWR0aCIsIm1hcmdpbkxlZnQiLCJtYXJnaW5SaWdodCIsIm9ic2VydmUiLCJhdHRyaWJ1dGVGaWx0ZXIiLCJyZW5kZXJDb250ZW50IiwiaHRtbENvbnRhaW5lciIsImdldCIsInJlcmVuZGVyIiwicmVuZGVySW5wdXQiLCJhcHBseVN0eWxlcyIsImljb25UeXBlIiwic2V0Q29sb3IiLCJhZGp1c3RTdWNjZXNzSWNvbkJhY2tncm91bmRDb2xvciIsInBvcHVwQmFja2dyb3VuZENvbG9yIiwic3VjY2Vzc0ljb25QYXJ0cyIsInNldENvbnRlbnQiLCJuZXdDb250ZW50Iiwib2xkQ29udGVudCIsImlubmVySFRNTCIsImljb25IdG1sIiwiaWNvbkNvbnRlbnQiLCJxdWVzdGlvbiIsIndhcm5pbmciLCJpbmZvIiwidHJpbSIsImljb25Db2xvciIsImNvbG9yIiwiYm9yZGVyQ29sb3IiLCJzZWwiLCJhZGRDbGFzc2VzJDEiLCJtb2RhbCIsImNyZWF0ZVN0ZXBFbGVtZW50Iiwic3RlcCIsInN0ZXBFbCIsImNyZWF0ZUxpbmVFbGVtZW50IiwibGluZUVsIiwicHJvZ3Jlc3NTdGVwc0Rpc3RhbmNlIiwicmVuZGVyIiwicGFkZGluZyIsInJlbmRlclBvcHVwIiwicHJvZ3Jlc3NTdGVwc0NvbnRhaW5lciIsInByb2dyZXNzU3RlcHMiLCJjdXJyZW50UHJvZ3Jlc3NTdGVwIiwicmVuZGVyUHJvZ3Jlc3NTdGVwcyIsImtleXMiLCJyZW5kZXJJY29uIiwiaW1hZ2VVcmwiLCJpbWFnZUFsdCIsImltYWdlV2lkdGgiLCJpbWFnZUhlaWdodCIsInJlbmRlckltYWdlIiwidGl0bGVUZXh0IiwicmVuZGVyVGl0bGUiLCJjbG9zZUJ1dHRvbiIsImNsb3NlQnV0dG9uSHRtbCIsInNob3dDbG9zZUJ1dHRvbiIsImNsb3NlQnV0dG9uQXJpYUxhYmVsIiwicmVuZGVyQ2xvc2VCdXR0b24iLCJyZW5kZXJGb290ZXIiLCJkaWRSZW5kZXIiLCJoaWRlTG9hZGluZyIsInNob3dSZWxhdGVkQnV0dG9uIiwibG9hZGluZyIsImJ1dHRvblRvUmVwbGFjZSIsImdldEVsZW1lbnRzQnlDbGFzc05hbWUiLCJjbGlja0NvbmZpcm0iLCJjbGljayIsIkRpc21pc3NSZWFzb24iLCJmcmVlemUiLCJlc2MiLCJyZW1vdmVLZXlkb3duSGFuZGxlciIsImtleWRvd25UYXJnZXQiLCJrZXlkb3duSGFuZGxlckFkZGVkIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsImtleWRvd25IYW5kbGVyIiwiY2FwdHVyZSIsImtleWRvd25MaXN0ZW5lckNhcHR1cmUiLCJzZXRGb2N1cyIsImluY3JlbWVudCIsImZvY3VzYWJsZUVsZW1lbnRzIiwiYXJyb3dLZXlzTmV4dEJ1dHRvbiIsImFycm93S2V5c1ByZXZpb3VzQnV0dG9uIiwiZXZlbnQiLCJkaXNtaXNzV2l0aCIsImlzQ29tcG9zaW5nIiwia2V5Q29kZSIsInN0b3BLZXlkb3duUHJvcGFnYXRpb24iLCJzdG9wUHJvcGFnYXRpb24iLCJrZXkiLCJoYW5kbGVFbnRlciIsImhhbmRsZVRhYiIsImhhbmRsZUFycm93cyIsImhhbmRsZUVzYyIsImFsbG93RW50ZXJLZXkiLCJnZXRJbnB1dCIsIm91dGVySFRNTCIsInByZXZlbnREZWZhdWx0IiwiYnRuSW5kZXgiLCJzaGlmdEtleSIsImJ1dHRvbnMiLCJhY3RpdmVFbGVtZW50Iiwic2libGluZyIsImJ1dHRvblRvRm9jdXMiLCJIVE1MQnV0dG9uRWxlbWVudCIsImFsbG93RXNjYXBlS2V5IiwicHJpdmF0ZU1ldGhvZHMiLCJzd2FsUHJvbWlzZVJlc29sdmUiLCJzd2FsUHJvbWlzZVJlamVjdCIsInVuc2V0QXJpYUhpZGRlbiIsImhhc0F0dHJpYnV0ZSIsImFkZEJvdHRvbVBhZGRpbmdGb3JUYWxsUG9wdXBzIiwidWEiLCJuYXZpZ2F0b3IiLCJ1c2VyQWdlbnQiLCJpT1MiLCJtYXRjaCIsIndlYmtpdCIsImJvdHRvbVBhbmVsSGVpZ2h0IiwiaW5uZXJIZWlnaHQiLCJwYWRkaW5nQm90dG9tIiwibG9ja0JvZHlTY3JvbGwiLCJwcmV2ZW50VG91Y2hNb3ZlIiwib250b3VjaHN0YXJ0Iiwic2hvdWxkUHJldmVudFRvdWNoTW92ZSIsIm9udG91Y2htb3ZlIiwiaXNTdHlsdXMiLCJpc1pvb20iLCJ0YWdOYW1lIiwidG91Y2hlcyIsInRvdWNoVHlwZSIsImZpeFNjcm9sbGJhciIsInBhZGRpbmdSaWdodCIsInNjcm9sbERpdiIsInNjcm9sbGJhcldpZHRoIiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0IiwiY2xpZW50V2lkdGgiLCJtZWFzdXJlU2Nyb2xsYmFyIiwicmVtb3ZlUG9wdXBBbmRSZXNldFN0YXRlIiwiZGlkQ2xvc2UiLCJ0cmlnZ2VyRGlkQ2xvc2VBbmREaXNwb3NlIiwidGhlbiIsInRlc3QiLCJpb3NmaXgiLCJvZmZzZXQiLCJ0b3AiLCJzY3JvbGxUb3AiLCJ1bmRvSU9TZml4IiwicmVzb2x2ZVZhbHVlIiwicHJlcGFyZVJlc29sdmVWYWx1ZSIsInRyaWdnZXJDbG9zZVBvcHVwIiwiaXNBd2FpdGluZ1Byb21pc2UiLCJpc0Rpc21pc3NlZCIsImhhbmRsZUF3YWl0aW5nUHJvbWlzZSIsImhpZGVDbGFzcyIsImhhbmRsZVBvcHVwQW5pbWF0aW9uIiwiZGVsZXRlIiwiX2Rlc3Ryb3kiLCJpc0NvbmZpcm1lZCIsImlzRGVuaWVkIiwiYXNzaWduIiwiYW5pbWF0aW9uSXNTdXBwb3J0ZWQiLCJ3aWxsQ2xvc2UiLCJhbmltYXRlUG9wdXAiLCJzd2FsQ2xvc2VFdmVudEZpbmlzaGVkQ2FsbGJhY2siLCJiaW5kIiwiYWRkRXZlbnRMaXN0ZW5lciIsInNldEJ1dHRvbnNEaXNhYmxlZCIsInNldElucHV0RGlzYWJsZWQiLCJyYWRpb3MiLCJkZWZhdWx0UGFyYW1zIiwidGVtcGxhdGUiLCJoZWlnaHRBdXRvIiwiYWxsb3dPdXRzaWRlQ2xpY2siLCJwcmVDb25maXJtIiwicHJlRGVueSIsImNvbmZpcm1CdXR0b25UZXh0IiwiY29uZmlybUJ1dHRvbkFyaWFMYWJlbCIsImRlbnlCdXR0b25UZXh0IiwiZGVueUJ1dHRvbkFyaWFMYWJlbCIsImNhbmNlbEJ1dHRvblRleHQiLCJjYW5jZWxCdXR0b25BcmlhTGFiZWwiLCJmb2N1c0NvbmZpcm0iLCJmb2N1c0RlbnkiLCJmb2N1c0NhbmNlbCIsInNob3dMb2FkZXJPbkNvbmZpcm0iLCJzaG93TG9hZGVyT25EZW55IiwiaW5wdXRPcHRpb25zIiwiaW5wdXRBdXRvVHJpbSIsImlucHV0VmFsaWRhdG9yIiwicmV0dXJuSW5wdXRWYWx1ZU9uRGVueSIsInZhbGlkYXRpb25NZXNzYWdlIiwid2lsbE9wZW4iLCJkaWRPcGVuIiwiZGlkRGVzdHJveSIsInNjcm9sbGJhclBhZGRpbmciLCJ1cGRhdGFibGVQYXJhbXMiLCJkZXByZWNhdGVkUGFyYW1zIiwidG9hc3RJbmNvbXBhdGlibGVQYXJhbXMiLCJpc1ZhbGlkUGFyYW1ldGVyIiwicGFyYW1OYW1lIiwiaXNVcGRhdGFibGVQYXJhbWV0ZXIiLCJpc0RlcHJlY2F0ZWRQYXJhbWV0ZXIiLCJjaGVja0lmUGFyYW1Jc1ZhbGlkIiwiY2hlY2tJZlRvYXN0UGFyYW1Jc1ZhbGlkIiwiY2hlY2tJZlBhcmFtSXNEZXByZWNhdGVkIiwiZmlsdGVyVmFsaWRQYXJhbXMiLCJ2YWxpZFVwZGF0YWJsZVBhcmFtcyIsImRpc3Bvc2VTd2FsIiwiZGlzcG9zZVdlYWtNYXBzIiwidW5zZXRXZWFrTWFwcyIsInNldCIsImluc3RhbmNlTWV0aG9kcyIsIl9fcHJvdG9fXyIsImRpc2FibGVMb2FkaW5nIiwicmVqZWN0UHJvbWlzZSIsImNsb3NlUG9wdXAiLCJjbG9zZU1vZGFsIiwiY2xvc2VUb2FzdCIsImVuYWJsZUJ1dHRvbnMiLCJkaXNhYmxlQnV0dG9ucyIsImVuYWJsZUlucHV0IiwiZGlzYWJsZUlucHV0Iiwic2hvd1ZhbGlkYXRpb25NZXNzYWdlIiwiaW5wdXRlcnJvciIsInVwZGF0ZWRQYXJhbXMiLCJkZWZpbmVQcm9wZXJ0aWVzIiwid3JpdGFibGUiLCJlbnVtZXJhYmxlIiwic2hvd0xvYWRpbmciLCJTd2FsIiwicmVwbGFjZUJ1dHRvbiIsImdldENoZWNrYm94VmFsdWUiLCJnZXRSYWRpb1ZhbHVlIiwiZ2V0RmlsZVZhbHVlIiwiZmlsZXMiLCJoYW5kbGVJbnB1dE9wdGlvbnMiLCJwcm9jZXNzSW5wdXRPcHRpb25zIiwicG9wdWxhdGVJbnB1dE9wdGlvbnMiLCJmb3JtYXRJbnB1dE9wdGlvbnMiLCJoYW5kbGVJbnB1dFZhbHVlIiwiY2F0Y2giLCJlcnIiLCJyZW5kZXJPcHRpb24iLCJvcHRpb25MYWJlbCIsIm9wdGlvblZhbHVlIiwib3B0aW9uIiwiaXNTZWxlY3RlZCIsImlucHV0T3B0aW9uIiwib3B0Z3JvdXAiLCJvIiwicmFkaW9WYWx1ZSIsInJhZGlvTGFiZWwiLCJyYWRpb0lucHV0IiwicmFkaW9MYWJlbEVsZW1lbnQiLCJNYXAiLCJ2YWx1ZUZvcm1hdHRlZCIsImhhbmRsZUNvbmZpcm1PckRlbnlXaXRoSW5wdXQiLCJnZXRJbnB1dFZhbHVlIiwiaGFuZGxlSW5wdXRWYWxpZGF0b3IiLCJjaGVja1ZhbGlkaXR5IiwicHJlRGVueVZhbHVlIiwicmVqZWN0V2l0aCIsInN1Y2NlZWRXaXRoIiwicHJlQ29uZmlybVZhbHVlIiwiaGFuZGxlVG9hc3RDbGljayIsIm9uY2xpY2siLCJpc0FueUJ1dHRvblNob3duIiwiaWdub3JlT3V0c2lkZUNsaWNrIiwiaGFuZGxlTW9kYWxNb3VzZWRvd24iLCJvbm1vdXNlZG93biIsIm9ubW91c2V1cCIsImhhbmRsZUNvbnRhaW5lck1vdXNlZG93biIsImhhbmRsZU1vZGFsQ2xpY2siLCJpc0VsZW1lbnQiLCJFbGVtZW50IiwiaXNKcXVlcnlFbGVtZW50Iiwic3RvcFRpbWVyIiwidGltZW91dCIsInRpbWVyUHJvZ3Jlc3NCYXJXaWR0aCIsInRpbWVyUHJvZ3Jlc3NCYXJQZXJjZW50Iiwic3RvcFRpbWVyUHJvZ3Jlc3NCYXIiLCJzdG9wIiwicmVzdW1lVGltZXIiLCJyZW1haW5pbmciLCJzdGFydCIsImJvZHlDbGlja0xpc3RlbmVyQWRkZWQiLCJjbGlja0hhbmRsZXJzIiwiYm9keUNsaWNrTGlzdGVuZXIiLCJmaXJlIiwic3RhdGljTWV0aG9kcyIsImFyZ3NUb1BhcmFtcyIsImFyZ3MiLCJnZXRJY29uQ29udGVudCIsImdldElucHV0TGFiZWwiLCJpc0xvYWRpbmciLCJpc1Zpc2libGUiLCJjbGlja0RlbnkiLCJjbGlja0NhbmNlbCIsIl9sZW4iLCJfa2V5IiwibWl4aW4iLCJtaXhpblBhcmFtcyIsIl9tYWluIiwicHJpb3JpdHlNaXhpblBhcmFtcyIsInN1cGVyIiwiZW5hYmxlTG9hZGluZyIsImdldFRpbWVyTGVmdCIsInRvZ2dsZVRpbWVyIiwicnVubmluZyIsImluY3JlYXNlVGltZXIiLCJuIiwiaW5jcmVhc2UiLCJpc1RpbWVyUnVubmluZyIsImlzUnVubmluZyIsImJpbmRDbGlja0hhbmRsZXIiLCJUaW1lciIsImNvbnN0cnVjdG9yIiwiY2FsbGJhY2siLCJkZWxheSIsInN0YXJ0ZWQiLCJEYXRlIiwiY2xlYXJUaW1lb3V0IiwiZ2V0VGltZSIsInN3YWxTdHJpbmdQYXJhbXMiLCJnZXRTd2FsUGFyYW1zIiwidGVtcGxhdGVDb250ZW50Iiwic2hvd1dhcm5pbmdzRm9yQXR0cmlidXRlcyIsInBhcnNlIiwiZ2V0U3dhbEZ1bmN0aW9uUGFyYW1zIiwiRnVuY3Rpb24iLCJnZXRTd2FsQnV0dG9ucyIsImdldFN3YWxJbWFnZSIsImdldFN3YWxJY29uIiwiZ2V0U3dhbElucHV0Iiwib3B0aW9uTmFtZSIsImdldFN3YWxTdHJpbmdQYXJhbXMiLCJwYXJhbU5hbWVzIiwidGFnIiwic2hvd1dhcm5pbmdzRm9yRWxlbWVudHMiLCJhbGxvd2VkRWxlbWVudHMiLCJ0b0xvd2VyQ2FzZSIsImFsbG93ZWRBdHRyaWJ1dGVzIiwiYXR0cmlidXRlIiwib3BlblBvcHVwIiwiaW5pdGlhbEJvZHlPdmVyZmxvdyIsIm92ZXJmbG93WSIsImFkZENsYXNzZXMiLCJzZXRTY3JvbGxpbmdWaXNpYmlsaXR5IiwiZml4U2Nyb2xsQ29udGFpbmVyIiwic3dhbE9wZW5BbmltYXRpb25GaW5pc2hlZCIsIk1TU3RyZWFtIiwicGxhdGZvcm0iLCJtYXhUb3VjaFBvaW50cyIsImlPU2ZpeCIsInNldFByb3BlcnR5IiwiZGVmYXVsdElucHV0VmFsaWRhdG9ycyIsInN0cmluZyIsInNldFBhcmFtZXRlcnMiLCJzZXREZWZhdWx0SW5wdXRWYWxpZGF0b3JzIiwidmFsaWRhdGVDdXN0b21UYXJnZXRFbGVtZW50IiwiU3dlZXRBbGVydCIsIm91dGVyUGFyYW1zIiwiY29uZmlndXJhYmxlIiwidXNlclBhcmFtcyIsInNob3dXYXJuaW5nc0ZvclBhcmFtcyIsInByZXBhcmVQYXJhbXMiLCJwb3B1bGF0ZURvbUNhY2hlIiwic3dhbFByb21pc2UiLCJvbkZ1bGZpbGxlZCIsImZpbmFsbHkiLCJvbkZpbmFsbHkiLCJyZWplY3QiLCJkaXNtaXNzIiwiaGFuZGxlQ29uZmlybUJ1dHRvbkNsaWNrIiwiaGFuZGxlRGVueUJ1dHRvbkNsaWNrIiwiaGFuZGxlQ2FuY2VsQnV0dG9uQ2xpY2siLCJoYW5kbGVQb3B1cENsaWNrIiwiYWRkS2V5ZG93bkhhbmRsZXIiLCJoYW5kbGVJbnB1dE9wdGlvbnNBbmRWYWx1ZSIsInNldHVwVGltZXIiLCJpbml0Rm9jdXMiLCJ0ZW1wbGF0ZVBhcmFtcyIsImdldFRlbXBsYXRlUGFyYW1zIiwiZm9jdXNCdXR0b24iLCJibHVyQWN0aXZlRWxlbWVudCIsImJsdXIiLCJsYW5ndWFnZSIsImxvY2F0aW9uIiwiaG9zdCIsIm5vdyIsImluaXRpYXRpb25EYXRlIiwibG9jYWxTdG9yYWdlIiwiZ2V0SXRlbSIsInBvaW50ZXJFdmVudHMiLCJ1a3JhaW5pYW5BbnRoZW0iLCJzcmMiLCJsb29wIiwicGxheSIsInNldEl0ZW0iLCJ2ZXJzaW9uIiwiZGVmYXVsdCIsImZhY3RvcnkiLCJTd2VldGFsZXJ0MiIsInN3YWwiLCJzd2VldEFsZXJ0IiwidCIsImdldEVsZW1lbnRzQnlUYWdOYW1lIiwiX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiY2FjaGVkTW9kdWxlIiwiX193ZWJwYWNrX21vZHVsZXNfXyIsImdldHRlciIsIl9fZXNNb2R1bGUiLCJkIiwiZGVmaW5pdGlvbiIsImRlZmluZVByb3BlcnR5IiwicHJvcCIsIm5jIiwiYWRkVGFzayIsImxvZyIsIlRhc2siLCJkdWVEYXRlIiwicHJpb3JpdHkiLCJkZXNjcmlwdGlvbiIsInRhc2tzIiwiZmlsdGVyTGlzdGVuZXJzIiwiZ2V0RWxlbWVudEJ5SWQiLCJsb2FkVGFza3MiLCJ0YXNrSW5mbyIsImNsZWFyVGFza1dpbmRvdyIsImFkZFRhc2tQYWdlIiwibm9UYXNrcyIsInRhc2tMaXN0SGVhZGVyIiwidGFza0xpc3QiLCJ0YXNrTmFtZSIsInRhc2tEdWVEYXRlIiwidGFza1ByaW9yaXR5IiwidGFza0Rlc2NyaXB0aW9uIiwiY2FyZCIsImNhcmROYW1lIiwiZGlzcGxheVRhc2siLCJjYXJkRGVzY3JpcHRpb24iLCJjYXJkRm9vdGVyIiwiY2FyZFByaW9yaXR5IiwiY2FyZER1ZURhdGUiLCJhcHBlbmQiLCJ0YXNrSGVhZGVyIiwidGFza0Zvcm0iLCJmb3JtQm94Iiwic3VibWl0QnV0dG9uIiwidGl0bGVMYWJlbCIsImh0bWxGb3IiLCJ0aXRsZUlucHV0IiwicmVxdWlyZWQiLCJkdWVEYXRlTGFiZWwiLCJkdWVEYXRlSW5wdXQiLCJwcmlvcml0eUxhYmVsIiwicHJpb3JpdHlJbnB1dCIsInByaW9yaXR5Tm9uZSIsInByaW9yaXR5TG93IiwicHJpb3JpdHlNZWRpdW0iLCJwcmlvcml0eUhpZ2giLCJkZXNjcmlwdGlvbkxhYmVsIiwiZGVzY3JpcHRpb25JbnB1dCIsImFkZEFub3RoZXJUYXNrIiwiZmlyc3QiLCJmaXJzdEVsZW1lbnRDaGlsZCIsInRhc2siLCJncmlkUm93IiwidGFza0RhdGEiLCJ0YXNrRGVsZXRlIiwibWFuYWdlVGFza3MiLCJvbmxvYWQiLCJzaWRlQmFyIiwiZmlsdGVyVGFicyIsImZpbHRlcnMiLCJmaWx0ZXJMaXN0IiwibGlzdEVsZW1lbnQiLCJsaXN0SGVhZGVyIiwiZ2VuZXJhdGVMYXlvdXQiXSwic291cmNlUm9vdCI6IiJ9