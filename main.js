(()=>{var e={426:(e,t,n)=>{"use strict";n.d(t,{Z:()=>r});var o=n(537),a=n.n(o),s=n(645),i=n.n(s)()(a());i.push([e.id,'#content {\n    display: grid !important;\n    grid-template-columns: 1fr 3fr;\n    grid-template-rows: 1fr 4fr;\n\n    position: fixed;\n    top: 0;\n    right: 0;\n    bottom: 0;\n    left: 0;\n}\n\n#side-bar {\n    background-color: grey;\n\n    grid-column: 1 / 2;\n    grid-row: 1 / -1;\n    \n    display: grid;\n    grid-template-rows: 1fr 4fr;\n}\n\n#filter-tabs {\n    border-bottom: solid 5px darkgray;\n    grid-row: 1 / 2;\n}\n\n#filter-tabs > ul, #project-tabs > ul {\n    list-style: none;\n    padding: 0;\n    margin-left: 40px;\n    display: grid;\n    gap: 24px;\n}\n\nli {\n    padding: 0;\n    margin: 0;\n    cursor: pointer;\n}\n\nli > ul {\n    padding-left: 10px;\n    margin: 0;\n    list-style: none;\n}\n\n#project-tabs {\n    grid-row: 2 / -1;\n}\n\n#task-info {\n    background-color: white;\n    padding: 10px;\n\n    grid-column: 2;\n    grid-row: 1 / -1;\n\n   display: grid;\n   grid-template-rows: 100px 1fr;\n}\n\n#task-info > h1 {\n    position: relative;\n    top: 20px;\n    left: 20px;\n}\n\nform {\n    display: grid;\n    grid-template-columns: 1fr 1fr 1fr;\n    grid-template-rows: 50px 100px 100px;\n    border: solid 2px grey;\n}\n\nform > div {\n    border: solid 1px grey;\n}\n\n.data {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    padding: 10px;\n}\n\n.data:first-child {\n    grid-column: 1 / 2;\n    grid-row: 1;\n    padding: 5px;\n    border: 0px;\n}\n\n.data:nth-child(2) {\n    grid-column: 3;\n    grid-row: 1;\n    padding: 5px;\n    border: 0px;\n}\n\n.data:nth-child(3) {\n    grid-column: 1 / 2;\n    grid-row: 2;\n}\n\n.data:nth-child(4) {\n    grid-column: 2 / 3;\n    grid-row: 2;\n}\n\n.data:nth-child(5) {\n    grid-column: 3 / 3;\n    grid-row: 2;\n}\n\n.data:last-child {\n    grid-column: 1 / -1;\n    grid-row: 3;\n}\n\nlabel {\n    padding-right: 10px;\n}\n\ninput, textarea, select {\n    appearance: none;\n}\n\ninput:focus {\n    border: lightblue solid;\n}\n\ninput[type="submit"] {\n    appearance: none;\n    padding: 5px 20px;\n    border-radius: 10px;\n    background-color: rgb(36, 27, 134);\n    border: 1px solid rgb(36, 27, 134);\n    color: white;\n    cursor: pointer;\n}\n\n.tasks {\n    display: grid;\n    grid-template-rows: 250px 250px 250px;\n    grid-template-columns: 1fr 1fr 1fr;\n    gap: 30px;\n    padding: 20px;\n    grid-column: 1;\n    grid-row: 2 / -1;\n    color: black;\n    overflow: auto;\n}\n    \n.card {\n    background-color: grey;\n    padding: 10px;\n    border: 5px solid rgb(36, 27, 134);\n    border-left: 15px solid rgb(36, 27, 134);\n    border-radius: 10px;\n\n    display: grid;\n    grid-template-rows: 50px 100px 50px;\n    \n}\n\n.card > h3 {\n    position: relative;\n    left: 10px;\n    top: 10px;\n    grid-row: 1;\n    cursor: pointer;\n}\n\n.card > p {\n    position: relative;\n    left: 10px;\n    grid-row: 2;\n    width: 75%;\n}\n\n.card > div {\n    position: relative;\n    grid-row: 3;\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n    gap: 20px;\n    padding-right: 20px;\n}\n\n.task-data {\n    height: 300px;\n    width: 500px;\n    display: grid;\n    grid-template-columns: 3fr 1fr;\n    grid-template-rows: 50px 200px 50px;\n    position: relative;\n    left: 20px;\n    border: solid 5px grey;\n    padding: 10px;\n    border-radius: 10px;\n}\n\n.task-date {\n    grid-row: 1;\n    grid-column: 1;\n    position: relative;\n    top: 10px;\n}\n\n.task-priority {\n    grid-row: 1;\n    grid-column: 2;\n    position: relative;\n    top: 10px;\n}\n\n.task-description {\n    grid-row: 2;\n    grid-column: 1 / -1;\n    border: 2px solid grey;\n    padding: 10px;\n}\n\n.delete-icon {\n    grid-row: 3;\n    grid-column: 1 / -1;\n    position: relative;\n    top: 20px;\n    cursor: pointer;\n}',"",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA;IACI,wBAAwB;IACxB,8BAA8B;IAC9B,2BAA2B;;IAE3B,eAAe;IACf,MAAM;IACN,QAAQ;IACR,SAAS;IACT,OAAO;AACX;;AAEA;IACI,sBAAsB;;IAEtB,kBAAkB;IAClB,gBAAgB;;IAEhB,aAAa;IACb,2BAA2B;AAC/B;;AAEA;IACI,iCAAiC;IACjC,eAAe;AACnB;;AAEA;IACI,gBAAgB;IAChB,UAAU;IACV,iBAAiB;IACjB,aAAa;IACb,SAAS;AACb;;AAEA;IACI,UAAU;IACV,SAAS;IACT,eAAe;AACnB;;AAEA;IACI,kBAAkB;IAClB,SAAS;IACT,gBAAgB;AACpB;;AAEA;IACI,gBAAgB;AACpB;;AAEA;IACI,uBAAuB;IACvB,aAAa;;IAEb,cAAc;IACd,gBAAgB;;GAEjB,aAAa;GACb,6BAA6B;AAChC;;AAEA;IACI,kBAAkB;IAClB,SAAS;IACT,UAAU;AACd;;AAEA;IACI,aAAa;IACb,kCAAkC;IAClC,oCAAoC;IACpC,sBAAsB;AAC1B;;AAEA;IACI,sBAAsB;AAC1B;;AAEA;IACI,aAAa;IACb,uBAAuB;IACvB,mBAAmB;IACnB,aAAa;AACjB;;AAEA;IACI,kBAAkB;IAClB,WAAW;IACX,YAAY;IACZ,WAAW;AACf;;AAEA;IACI,cAAc;IACd,WAAW;IACX,YAAY;IACZ,WAAW;AACf;;AAEA;IACI,kBAAkB;IAClB,WAAW;AACf;;AAEA;IACI,kBAAkB;IAClB,WAAW;AACf;;AAEA;IACI,kBAAkB;IAClB,WAAW;AACf;;AAEA;IACI,mBAAmB;IACnB,WAAW;AACf;;AAEA;IACI,mBAAmB;AACvB;;AAEA;IACI,gBAAgB;AACpB;;AAEA;IACI,uBAAuB;AAC3B;;AAEA;IACI,gBAAgB;IAChB,iBAAiB;IACjB,mBAAmB;IACnB,kCAAkC;IAClC,kCAAkC;IAClC,YAAY;IACZ,eAAe;AACnB;;AAEA;IACI,aAAa;IACb,qCAAqC;IACrC,kCAAkC;IAClC,SAAS;IACT,aAAa;IACb,cAAc;IACd,gBAAgB;IAChB,YAAY;IACZ,cAAc;AAClB;;AAEA;IACI,sBAAsB;IACtB,aAAa;IACb,kCAAkC;IAClC,wCAAwC;IACxC,mBAAmB;;IAEnB,aAAa;IACb,mCAAmC;;AAEvC;;AAEA;IACI,kBAAkB;IAClB,UAAU;IACV,SAAS;IACT,WAAW;IACX,eAAe;AACnB;;AAEA;IACI,kBAAkB;IAClB,UAAU;IACV,WAAW;IACX,UAAU;AACd;;AAEA;IACI,kBAAkB;IAClB,WAAW;IACX,aAAa;IACb,mBAAmB;IACnB,8BAA8B;IAC9B,SAAS;IACT,mBAAmB;AACvB;;AAEA;IACI,aAAa;IACb,YAAY;IACZ,aAAa;IACb,8BAA8B;IAC9B,mCAAmC;IACnC,kBAAkB;IAClB,UAAU;IACV,sBAAsB;IACtB,aAAa;IACb,mBAAmB;AACvB;;AAEA;IACI,WAAW;IACX,cAAc;IACd,kBAAkB;IAClB,SAAS;AACb;;AAEA;IACI,WAAW;IACX,cAAc;IACd,kBAAkB;IAClB,SAAS;AACb;;AAEA;IACI,WAAW;IACX,mBAAmB;IACnB,sBAAsB;IACtB,aAAa;AACjB;;AAEA;IACI,WAAW;IACX,mBAAmB;IACnB,kBAAkB;IAClB,SAAS;IACT,eAAe;AACnB",sourcesContent:['#content {\n    display: grid !important;\n    grid-template-columns: 1fr 3fr;\n    grid-template-rows: 1fr 4fr;\n\n    position: fixed;\n    top: 0;\n    right: 0;\n    bottom: 0;\n    left: 0;\n}\n\n#side-bar {\n    background-color: grey;\n\n    grid-column: 1 / 2;\n    grid-row: 1 / -1;\n    \n    display: grid;\n    grid-template-rows: 1fr 4fr;\n}\n\n#filter-tabs {\n    border-bottom: solid 5px darkgray;\n    grid-row: 1 / 2;\n}\n\n#filter-tabs > ul, #project-tabs > ul {\n    list-style: none;\n    padding: 0;\n    margin-left: 40px;\n    display: grid;\n    gap: 24px;\n}\n\nli {\n    padding: 0;\n    margin: 0;\n    cursor: pointer;\n}\n\nli > ul {\n    padding-left: 10px;\n    margin: 0;\n    list-style: none;\n}\n\n#project-tabs {\n    grid-row: 2 / -1;\n}\n\n#task-info {\n    background-color: white;\n    padding: 10px;\n\n    grid-column: 2;\n    grid-row: 1 / -1;\n\n   display: grid;\n   grid-template-rows: 100px 1fr;\n}\n\n#task-info > h1 {\n    position: relative;\n    top: 20px;\n    left: 20px;\n}\n\nform {\n    display: grid;\n    grid-template-columns: 1fr 1fr 1fr;\n    grid-template-rows: 50px 100px 100px;\n    border: solid 2px grey;\n}\n\nform > div {\n    border: solid 1px grey;\n}\n\n.data {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    padding: 10px;\n}\n\n.data:first-child {\n    grid-column: 1 / 2;\n    grid-row: 1;\n    padding: 5px;\n    border: 0px;\n}\n\n.data:nth-child(2) {\n    grid-column: 3;\n    grid-row: 1;\n    padding: 5px;\n    border: 0px;\n}\n\n.data:nth-child(3) {\n    grid-column: 1 / 2;\n    grid-row: 2;\n}\n\n.data:nth-child(4) {\n    grid-column: 2 / 3;\n    grid-row: 2;\n}\n\n.data:nth-child(5) {\n    grid-column: 3 / 3;\n    grid-row: 2;\n}\n\n.data:last-child {\n    grid-column: 1 / -1;\n    grid-row: 3;\n}\n\nlabel {\n    padding-right: 10px;\n}\n\ninput, textarea, select {\n    appearance: none;\n}\n\ninput:focus {\n    border: lightblue solid;\n}\n\ninput[type="submit"] {\n    appearance: none;\n    padding: 5px 20px;\n    border-radius: 10px;\n    background-color: rgb(36, 27, 134);\n    border: 1px solid rgb(36, 27, 134);\n    color: white;\n    cursor: pointer;\n}\n\n.tasks {\n    display: grid;\n    grid-template-rows: 250px 250px 250px;\n    grid-template-columns: 1fr 1fr 1fr;\n    gap: 30px;\n    padding: 20px;\n    grid-column: 1;\n    grid-row: 2 / -1;\n    color: black;\n    overflow: auto;\n}\n    \n.card {\n    background-color: grey;\n    padding: 10px;\n    border: 5px solid rgb(36, 27, 134);\n    border-left: 15px solid rgb(36, 27, 134);\n    border-radius: 10px;\n\n    display: grid;\n    grid-template-rows: 50px 100px 50px;\n    \n}\n\n.card > h3 {\n    position: relative;\n    left: 10px;\n    top: 10px;\n    grid-row: 1;\n    cursor: pointer;\n}\n\n.card > p {\n    position: relative;\n    left: 10px;\n    grid-row: 2;\n    width: 75%;\n}\n\n.card > div {\n    position: relative;\n    grid-row: 3;\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n    gap: 20px;\n    padding-right: 20px;\n}\n\n.task-data {\n    height: 300px;\n    width: 500px;\n    display: grid;\n    grid-template-columns: 3fr 1fr;\n    grid-template-rows: 50px 200px 50px;\n    position: relative;\n    left: 20px;\n    border: solid 5px grey;\n    padding: 10px;\n    border-radius: 10px;\n}\n\n.task-date {\n    grid-row: 1;\n    grid-column: 1;\n    position: relative;\n    top: 10px;\n}\n\n.task-priority {\n    grid-row: 1;\n    grid-column: 2;\n    position: relative;\n    top: 10px;\n}\n\n.task-description {\n    grid-row: 2;\n    grid-column: 1 / -1;\n    border: 2px solid grey;\n    padding: 10px;\n}\n\n.delete-icon {\n    grid-row: 3;\n    grid-column: 1 / -1;\n    position: relative;\n    top: 20px;\n    cursor: pointer;\n}'],sourceRoot:""}]);const r=i},645:e=>{"use strict";e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n="",o=void 0!==t[5];return t[4]&&(n+="@supports (".concat(t[4],") {")),t[2]&&(n+="@media ".concat(t[2]," {")),o&&(n+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),n+=e(t),o&&(n+="}"),t[2]&&(n+="}"),t[4]&&(n+="}"),n})).join("")},t.i=function(e,n,o,a,s){"string"==typeof e&&(e=[[null,e,void 0]]);var i={};if(o)for(var r=0;r<this.length;r++){var l=this[r][0];null!=l&&(i[l]=!0)}for(var c=0;c<e.length;c++){var d=[].concat(e[c]);o&&i[d[0]]||(void 0!==s&&(void 0===d[5]||(d[1]="@layer".concat(d[5].length>0?" ".concat(d[5]):""," {").concat(d[1],"}")),d[5]=s),n&&(d[2]?(d[1]="@media ".concat(d[2]," {").concat(d[1],"}"),d[2]=n):d[2]=n),a&&(d[4]?(d[1]="@supports (".concat(d[4],") {").concat(d[1],"}"),d[4]=a):d[4]="".concat(a)),t.push(d))}},t}},537:e=>{"use strict";e.exports=function(e){var t=e[1],n=e[3];if(!n)return t;if("function"==typeof btoa){var o=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),a="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(o),s="/*# ".concat(a," */");return[t].concat([s]).join("\n")}return[t].join("\n")}},379:e=>{"use strict";var t=[];function n(e){for(var n=-1,o=0;o<t.length;o++)if(t[o].identifier===e){n=o;break}return n}function o(e,o){for(var s={},i=[],r=0;r<e.length;r++){var l=e[r],c=o.base?l[0]+o.base:l[0],d=s[c]||0,u="".concat(c," ").concat(d);s[c]=d+1;var p=n(u),m={css:l[1],media:l[2],sourceMap:l[3],supports:l[4],layer:l[5]};if(-1!==p)t[p].references++,t[p].updater(m);else{var g=a(m,o);o.byIndex=r,t.splice(r,0,{identifier:u,updater:g,references:1})}i.push(u)}return i}function a(e,t){var n=t.domAPI(t);return n.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;n.update(e=t)}else n.remove()}}e.exports=function(e,a){var s=o(e=e||[],a=a||{});return function(e){e=e||[];for(var i=0;i<s.length;i++){var r=n(s[i]);t[r].references--}for(var l=o(e,a),c=0;c<s.length;c++){var d=n(s[c]);0===t[d].references&&(t[d].updater(),t.splice(d,1))}s=l}}},569:e=>{"use strict";var t={};e.exports=function(e,n){var o=function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}(e);if(!o)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");o.appendChild(n)}},216:e=>{"use strict";e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},565:(e,t,n)=>{"use strict";e.exports=function(e){var t=n.nc;t&&e.setAttribute("nonce",t)}},795:e=>{"use strict";e.exports=function(e){var t=e.insertStyleElement(e);return{update:function(n){!function(e,t,n){var o="";n.supports&&(o+="@supports (".concat(n.supports,") {")),n.media&&(o+="@media ".concat(n.media," {"));var a=void 0!==n.layer;a&&(o+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),o+=n.css,a&&(o+="}"),n.media&&(o+="}"),n.supports&&(o+="}");var s=n.sourceMap;s&&"undefined"!=typeof btoa&&(o+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(s))))," */")),t.styleTagTransform(o,e,t.options)}(t,e,n)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},589:e=>{"use strict";e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}},455:function(e){e.exports=function(){"use strict";var e={awaitingPromise:new WeakMap,promise:new WeakMap,innerParams:new WeakMap,domCache:new WeakMap};const t=e=>{const t={};for(const n in e)t[e[n]]="swal2-"+e[n];return t},n=t(["container","shown","height-auto","iosfix","popup","modal","no-backdrop","no-transition","toast","toast-shown","show","hide","close","title","html-container","actions","confirm","deny","cancel","default-outline","footer","icon","icon-content","image","input","file","range","select","radio","checkbox","label","textarea","inputerror","input-label","validation-message","progress-steps","active-progress-step","progress-step","progress-step-line","loader","loading","styled","top","top-start","top-end","top-left","top-right","center","center-start","center-end","center-left","center-right","bottom","bottom-start","bottom-end","bottom-left","bottom-right","grow-row","grow-column","grow-fullscreen","rtl","timer-progress-bar","timer-progress-bar-container","scrollbar-measure","icon-success","icon-warning","icon-info","icon-question","icon-error"]),o=t(["success","warning","info","question","error"]),a="SweetAlert2:",s=e=>e.charAt(0).toUpperCase()+e.slice(1),i=e=>{console.warn(`${a} ${"object"==typeof e?e.join(" "):e}`)},r=e=>{console.error(`${a} ${e}`)},l=[],c=(e,t)=>{var n;n=`"${e}" is deprecated and will be removed in the next major release. Please use "${t}" instead.`,l.includes(n)||(l.push(n),i(n))},d=e=>"function"==typeof e?e():e,u=e=>e&&"function"==typeof e.toPromise,p=e=>u(e)?e.toPromise():Promise.resolve(e),m=e=>e&&Promise.resolve(e)===e,g=()=>document.body.querySelector(`.${n.container}`),w=e=>{const t=g();return t?t.querySelector(e):null},h=e=>w(`.${e}`),f=()=>h(n.popup),b=()=>h(n.icon),A=()=>h(n.title),y=()=>h(n["html-container"]),C=()=>h(n.image),v=()=>h(n["progress-steps"]),x=()=>h(n["validation-message"]),k=()=>w(`.${n.actions} .${n.confirm}`),B=()=>w(`.${n.actions} .${n.cancel}`),I=()=>w(`.${n.actions} .${n.deny}`),E=()=>w(`.${n.loader}`),T=()=>h(n.actions),$=()=>h(n.footer),P=()=>h(n["timer-progress-bar"]),S=()=>h(n.close),j=()=>{const e=Array.from(f().querySelectorAll('[tabindex]:not([tabindex="-1"]):not([tabindex="0"])')).sort(((e,t)=>{const n=parseInt(e.getAttribute("tabindex")),o=parseInt(t.getAttribute("tabindex"));return n>o?1:n<o?-1:0})),t=Array.from(f().querySelectorAll('\n  a[href],\n  area[href],\n  input:not([disabled]),\n  select:not([disabled]),\n  textarea:not([disabled]),\n  button:not([disabled]),\n  iframe,\n  object,\n  embed,\n  [tabindex="0"],\n  [contenteditable],\n  audio[controls],\n  video[controls],\n  summary\n')).filter((e=>"-1"!==e.getAttribute("tabindex")));return(e=>{const t=[];for(let n=0;n<e.length;n++)-1===t.indexOf(e[n])&&t.push(e[n]);return t})(e.concat(t)).filter((e=>K(e)))},L=()=>D(document.body,n.shown)&&!D(document.body,n["toast-shown"])&&!D(document.body,n["no-backdrop"]),O=()=>f()&&D(f(),n.toast),N={previousBodyPadding:null},M=(e,t)=>{if(e.textContent="",t){const n=(new DOMParser).parseFromString(t,"text/html");Array.from(n.querySelector("head").childNodes).forEach((t=>{e.appendChild(t)})),Array.from(n.querySelector("body").childNodes).forEach((t=>{t instanceof HTMLVideoElement||t instanceof HTMLAudioElement?e.appendChild(t.cloneNode(!0)):e.appendChild(t)}))}},D=(e,t)=>{if(!t)return!1;const n=t.split(/\s+/);for(let t=0;t<n.length;t++)if(!e.classList.contains(n[t]))return!1;return!0},q=(e,t,a)=>{if(((e,t)=>{Array.from(e.classList).forEach((a=>{Object.values(n).includes(a)||Object.values(o).includes(a)||Object.values(t.showClass).includes(a)||e.classList.remove(a)}))})(e,t),t.customClass&&t.customClass[a]){if("string"!=typeof t.customClass[a]&&!t.customClass[a].forEach)return void i(`Invalid type of customClass.${a}! Expected string or iterable object, got "${typeof t.customClass[a]}"`);V(e,t.customClass[a])}},z=(e,t)=>{if(!t)return null;switch(t){case"select":case"textarea":case"file":return e.querySelector(`.${n.popup} > .${n[t]}`);case"checkbox":return e.querySelector(`.${n.popup} > .${n.checkbox} input`);case"radio":return e.querySelector(`.${n.popup} > .${n.radio} input:checked`)||e.querySelector(`.${n.popup} > .${n.radio} input:first-child`);case"range":return e.querySelector(`.${n.popup} > .${n.range} input`);default:return e.querySelector(`.${n.popup} > .${n.input}`)}},H=e=>{if(e.focus(),"file"!==e.type){const t=e.value;e.value="",e.value=t}},W=(e,t,n)=>{e&&t&&("string"==typeof t&&(t=t.split(/\s+/).filter(Boolean)),t.forEach((t=>{Array.isArray(e)?e.forEach((e=>{n?e.classList.add(t):e.classList.remove(t)})):n?e.classList.add(t):e.classList.remove(t)})))},V=(e,t)=>{W(e,t,!0)},U=(e,t)=>{W(e,t,!1)},Y=(e,t)=>{const n=Array.from(e.children);for(let e=0;e<n.length;e++){const o=n[e];if(o instanceof HTMLElement&&D(o,t))return o}},F=(e,t,n)=>{n===`${parseInt(n)}`&&(n=parseInt(n)),n||0===parseInt(n)?e.style[t]="number"==typeof n?`${n}px`:n:e.style.removeProperty(t)},R=function(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"flex";e.style.display=t},Z=e=>{e.style.display="none"},_=(e,t,n,o)=>{const a=e.querySelector(t);a&&(a.style[n]=o)},X=function(e,t){t?R(e,arguments.length>2&&void 0!==arguments[2]?arguments[2]:"flex"):Z(e)},K=e=>!(!e||!(e.offsetWidth||e.offsetHeight||e.getClientRects().length)),J=e=>!!(e.scrollHeight>e.clientHeight),G=e=>{const t=window.getComputedStyle(e),n=parseFloat(t.getPropertyValue("animation-duration")||"0"),o=parseFloat(t.getPropertyValue("transition-duration")||"0");return n>0||o>0},Q=function(e){let t=arguments.length>1&&void 0!==arguments[1]&&arguments[1];const n=P();K(n)&&(t&&(n.style.transition="none",n.style.width="100%"),setTimeout((()=>{n.style.transition=`width ${e/1e3}s linear`,n.style.width="0%"}),10))},ee={},te=e=>new Promise((t=>{if(!e)return t();const n=window.scrollX,o=window.scrollY;ee.restoreFocusTimeout=setTimeout((()=>{ee.previousActiveElement instanceof HTMLElement?(ee.previousActiveElement.focus(),ee.previousActiveElement=null):document.body&&document.body.focus(),t()}),100),window.scrollTo(n,o)})),ne=()=>"undefined"==typeof window||"undefined"==typeof document,oe=`\n <div aria-labelledby="${n.title}" aria-describedby="${n["html-container"]}" class="${n.popup}" tabindex="-1">\n   <button type="button" class="${n.close}"></button>\n   <ul class="${n["progress-steps"]}"></ul>\n   <div class="${n.icon}"></div>\n   <img class="${n.image}" />\n   <h2 class="${n.title}" id="${n.title}"></h2>\n   <div class="${n["html-container"]}" id="${n["html-container"]}"></div>\n   <input class="${n.input}" />\n   <input type="file" class="${n.file}" />\n   <div class="${n.range}">\n     <input type="range" />\n     <output></output>\n   </div>\n   <select class="${n.select}"></select>\n   <div class="${n.radio}"></div>\n   <label for="${n.checkbox}" class="${n.checkbox}">\n     <input type="checkbox" />\n     <span class="${n.label}"></span>\n   </label>\n   <textarea class="${n.textarea}"></textarea>\n   <div class="${n["validation-message"]}" id="${n["validation-message"]}"></div>\n   <div class="${n.actions}">\n     <div class="${n.loader}"></div>\n     <button type="button" class="${n.confirm}"></button>\n     <button type="button" class="${n.deny}"></button>\n     <button type="button" class="${n.cancel}"></button>\n   </div>\n   <div class="${n.footer}"></div>\n   <div class="${n["timer-progress-bar-container"]}">\n     <div class="${n["timer-progress-bar"]}"></div>\n   </div>\n </div>\n`.replace(/(^|\n)\s*/g,""),ae=()=>{ee.currentInstance.resetValidationMessage()},se=e=>{const t=(()=>{const e=g();return!!e&&(e.remove(),U([document.documentElement,document.body],[n["no-backdrop"],n["toast-shown"],n["has-column"]]),!0)})();if(ne())return void r("SweetAlert2 requires document to initialize");const o=document.createElement("div");o.className=n.container,t&&V(o,n["no-transition"]),M(o,oe);const a="string"==typeof(s=e.target)?document.querySelector(s):s;var s;a.appendChild(o),(e=>{const t=f();t.setAttribute("role",e.toast?"alert":"dialog"),t.setAttribute("aria-live",e.toast?"polite":"assertive"),e.toast||t.setAttribute("aria-modal","true")})(e),(e=>{"rtl"===window.getComputedStyle(e).direction&&V(g(),n.rtl)})(a),(()=>{const e=f(),t=Y(e,n.input),o=Y(e,n.file),a=e.querySelector(`.${n.range} input`),s=e.querySelector(`.${n.range} output`),i=Y(e,n.select),r=e.querySelector(`.${n.checkbox} input`),l=Y(e,n.textarea);t.oninput=ae,o.onchange=ae,i.onchange=ae,r.onchange=ae,l.oninput=ae,a.oninput=()=>{ae(),s.value=a.value},a.onchange=()=>{ae(),s.value=a.value}})()},ie=(e,t)=>{e instanceof HTMLElement?t.appendChild(e):"object"==typeof e?re(e,t):e&&M(t,e)},re=(e,t)=>{e.jquery?le(t,e):M(t,e.toString())},le=(e,t)=>{if(e.textContent="",0 in t)for(let n=0;n in t;n++)e.appendChild(t[n].cloneNode(!0));else e.appendChild(t.cloneNode(!0))},ce=(()=>{if(ne())return!1;const e=document.createElement("div"),t={WebkitAnimation:"webkitAnimationEnd",animation:"animationend"};for(const n in t)if(Object.prototype.hasOwnProperty.call(t,n)&&void 0!==e.style[n])return t[n];return!1})(),de=(e,t)=>{const o=T(),a=E();t.showConfirmButton||t.showDenyButton||t.showCancelButton?R(o):Z(o),q(o,t,"actions"),function(e,t,o){const a=k(),s=I(),i=B();ue(a,"confirm",o),ue(s,"deny",o),ue(i,"cancel",o),function(e,t,o,a){a.buttonsStyling?(V([e,t,o],n.styled),a.confirmButtonColor&&(e.style.backgroundColor=a.confirmButtonColor,V(e,n["default-outline"])),a.denyButtonColor&&(t.style.backgroundColor=a.denyButtonColor,V(t,n["default-outline"])),a.cancelButtonColor&&(o.style.backgroundColor=a.cancelButtonColor,V(o,n["default-outline"]))):U([e,t,o],n.styled)}(a,s,i,o),o.reverseButtons&&(o.toast?(e.insertBefore(i,a),e.insertBefore(s,a)):(e.insertBefore(i,t),e.insertBefore(s,t),e.insertBefore(a,t)))}(o,a,t),M(a,t.loaderHtml),q(a,t,"loader")};function ue(e,t,o){X(e,o[`show${s(t)}Button`],"inline-block"),M(e,o[`${t}ButtonText`]),e.setAttribute("aria-label",o[`${t}ButtonAriaLabel`]),e.className=n[t],q(e,o,`${t}Button`),V(e,o[`${t}ButtonClass`])}const pe=(e,t)=>{const o=g();o&&(function(e,t){"string"==typeof t?e.style.background=t:t||V([document.documentElement,document.body],n["no-backdrop"])}(o,t.backdrop),function(e,t){t in n?V(e,n[t]):(i('The "position" parameter is not valid, defaulting to "center"'),V(e,n.center))}(o,t.position),function(e,t){if(t&&"string"==typeof t){const o=`grow-${t}`;o in n&&V(e,n[o])}}(o,t.grow),q(o,t,"container"))};const me=["input","file","range","select","radio","checkbox","textarea"],ge=e=>{if(!Ce[e.input])return void r(`Unexpected type of input! Expected "text", "email", "password", "number", "tel", "select", "radio", "checkbox", "textarea", "file" or "url", got "${e.input}"`);const t=Ae(e.input),n=Ce[e.input](t,e);R(t),e.inputAutoFocus&&setTimeout((()=>{H(n)}))},we=(e,t)=>{const n=z(f(),e);if(n){(e=>{for(let t=0;t<e.attributes.length;t++){const n=e.attributes[t].name;["type","value","style"].includes(n)||e.removeAttribute(n)}})(n);for(const e in t)n.setAttribute(e,t[e])}},he=e=>{const t=Ae(e.input);"object"==typeof e.customClass&&V(t,e.customClass.input)},fe=(e,t)=>{e.placeholder&&!t.inputPlaceholder||(e.placeholder=t.inputPlaceholder)},be=(e,t,o)=>{if(o.inputLabel){e.id=n.input;const a=document.createElement("label"),s=n["input-label"];a.setAttribute("for",e.id),a.className=s,"object"==typeof o.customClass&&V(a,o.customClass.inputLabel),a.innerText=o.inputLabel,t.insertAdjacentElement("beforebegin",a)}},Ae=e=>Y(f(),n[e]||n.input),ye=(e,t)=>{["string","number"].includes(typeof t)?e.value=`${t}`:m(t)||i(`Unexpected type of inputValue! Expected "string", "number" or "Promise", got "${typeof t}"`)},Ce={};Ce.text=Ce.email=Ce.password=Ce.number=Ce.tel=Ce.url=(e,t)=>(ye(e,t.inputValue),be(e,e,t),fe(e,t),e.type=t.input,e),Ce.file=(e,t)=>(be(e,e,t),fe(e,t),e),Ce.range=(e,t)=>{const n=e.querySelector("input"),o=e.querySelector("output");return ye(n,t.inputValue),n.type=t.input,ye(o,t.inputValue),be(n,e,t),e},Ce.select=(e,t)=>{if(e.textContent="",t.inputPlaceholder){const n=document.createElement("option");M(n,t.inputPlaceholder),n.value="",n.disabled=!0,n.selected=!0,e.appendChild(n)}return be(e,e,t),e},Ce.radio=e=>(e.textContent="",e),Ce.checkbox=(e,t)=>{const o=z(f(),"checkbox");o.value="1",o.id=n.checkbox,o.checked=Boolean(t.inputValue);const a=e.querySelector("span");return M(a,t.inputPlaceholder),o},Ce.textarea=(e,t)=>{ye(e,t.inputValue),fe(e,t),be(e,e,t);return setTimeout((()=>{if("MutationObserver"in window){const t=parseInt(window.getComputedStyle(f()).width);new MutationObserver((()=>{const n=e.offsetWidth+(o=e,parseInt(window.getComputedStyle(o).marginLeft)+parseInt(window.getComputedStyle(o).marginRight));var o;f().style.width=n>t?`${n}px`:null})).observe(e,{attributes:!0,attributeFilter:["style"]})}})),e};const ve=(t,o)=>{const a=y();q(a,o,"htmlContainer"),o.html?(ie(o.html,a),R(a,"block")):o.text?(a.textContent=o.text,R(a,"block")):Z(a),((t,o)=>{const a=f(),s=e.innerParams.get(t),i=!s||o.input!==s.input;me.forEach((e=>{const t=Y(a,n[e]);we(e,o.inputAttributes),t.className=n[e],i&&Z(t)})),o.input&&(i&&ge(o),he(o))})(t,o)},xe=(e,t)=>{for(const n in o)t.icon!==n&&U(e,o[n]);V(e,o[t.icon]),Ie(e,t),ke(),q(e,t,"icon")},ke=()=>{const e=f(),t=window.getComputedStyle(e).getPropertyValue("background-color"),n=e.querySelectorAll("[class^=swal2-success-circular-line], .swal2-success-fix");for(let e=0;e<n.length;e++)n[e].style.backgroundColor=t},Be=(e,t)=>{let n,o=e.innerHTML;t.iconHtml?n=Ee(t.iconHtml):"success"===t.icon?(n='\n  <div class="swal2-success-circular-line-left"></div>\n  <span class="swal2-success-line-tip"></span> <span class="swal2-success-line-long"></span>\n  <div class="swal2-success-ring"></div> <div class="swal2-success-fix"></div>\n  <div class="swal2-success-circular-line-right"></div>\n',o=o.replace(/ style=".*?"/g,"")):n="error"===t.icon?'\n  <span class="swal2-x-mark">\n    <span class="swal2-x-mark-line-left"></span>\n    <span class="swal2-x-mark-line-right"></span>\n  </span>\n':Ee({question:"?",warning:"!",info:"i"}[t.icon]),o.trim()!==n.trim()&&M(e,n)},Ie=(e,t)=>{if(t.iconColor){e.style.color=t.iconColor,e.style.borderColor=t.iconColor;for(const n of[".swal2-success-line-tip",".swal2-success-line-long",".swal2-x-mark-line-left",".swal2-x-mark-line-right"])_(e,n,"backgroundColor",t.iconColor);_(e,".swal2-success-ring","borderColor",t.iconColor)}},Ee=e=>`<div class="${n["icon-content"]}">${e}</div>`,Te=(e,t)=>{e.className=`${n.popup} ${K(e)?t.showClass.popup:""}`,t.toast?(V([document.documentElement,document.body],n["toast-shown"]),V(e,n.toast)):V(e,n.modal),q(e,t,"popup"),"string"==typeof t.customClass&&V(e,t.customClass),t.icon&&V(e,n[`icon-${t.icon}`])},$e=e=>{const t=document.createElement("li");return V(t,n["progress-step"]),M(t,e),t},Pe=e=>{const t=document.createElement("li");return V(t,n["progress-step-line"]),e.progressStepsDistance&&F(t,"width",e.progressStepsDistance),t},Se=(t,a)=>{((e,t)=>{const n=g(),o=f();t.toast?(F(n,"width",t.width),o.style.width="100%",o.insertBefore(E(),b())):F(o,"width",t.width),F(o,"padding",t.padding),t.color&&(o.style.color=t.color),t.background&&(o.style.background=t.background),Z(x()),Te(o,t)})(0,a),pe(0,a),((e,t)=>{const o=v();t.progressSteps&&0!==t.progressSteps.length?(R(o),o.textContent="",t.currentProgressStep>=t.progressSteps.length&&i("Invalid currentProgressStep parameter, it should be less than progressSteps.length (currentProgressStep like JS arrays starts from 0)"),t.progressSteps.forEach(((e,a)=>{const s=$e(e);if(o.appendChild(s),a===t.currentProgressStep&&V(s,n["active-progress-step"]),a!==t.progressSteps.length-1){const e=Pe(t);o.appendChild(e)}}))):Z(o)})(0,a),((t,n)=>{const a=e.innerParams.get(t),s=b();if(a&&n.icon===a.icon)return Be(s,n),void xe(s,n);if(n.icon||n.iconHtml){if(n.icon&&-1===Object.keys(o).indexOf(n.icon))return r(`Unknown icon! Expected "success", "error", "warning", "info" or "question", got "${n.icon}"`),void Z(s);R(s),Be(s,n),xe(s,n),V(s,n.showClass.icon)}else Z(s)})(t,a),((e,t)=>{const o=C();t.imageUrl?(R(o,""),o.setAttribute("src",t.imageUrl),o.setAttribute("alt",t.imageAlt),F(o,"width",t.imageWidth),F(o,"height",t.imageHeight),o.className=n.image,q(o,t,"image")):Z(o)})(0,a),((e,t)=>{const n=A();X(n,t.title||t.titleText,"block"),t.title&&ie(t.title,n),t.titleText&&(n.innerText=t.titleText),q(n,t,"title")})(0,a),((e,t)=>{const n=S();M(n,t.closeButtonHtml),q(n,t,"closeButton"),X(n,t.showCloseButton),n.setAttribute("aria-label",t.closeButtonAriaLabel)})(0,a),ve(t,a),de(0,a),((e,t)=>{const n=$();X(n,t.footer),t.footer&&ie(t.footer,n),q(n,t,"footer")})(0,a),"function"==typeof a.didRender&&a.didRender(f())};function je(){const t=e.innerParams.get(this);if(!t)return;const o=e.domCache.get(this);Z(o.loader),O()?t.icon&&R(b()):Le(o),U([o.popup,o.actions],n.loading),o.popup.removeAttribute("aria-busy"),o.popup.removeAttribute("data-loading"),o.confirmButton.disabled=!1,o.denyButton.disabled=!1,o.cancelButton.disabled=!1}const Le=e=>{const t=e.popup.getElementsByClassName(e.loader.getAttribute("data-button-to-replace"));t.length?R(t[0],"inline-block"):!K(k())&&!K(I())&&!K(B())&&Z(e.actions)};const Oe=()=>k()&&k().click(),Ne=Object.freeze({cancel:"cancel",backdrop:"backdrop",close:"close",esc:"esc",timer:"timer"}),Me=e=>{e.keydownTarget&&e.keydownHandlerAdded&&(e.keydownTarget.removeEventListener("keydown",e.keydownHandler,{capture:e.keydownListenerCapture}),e.keydownHandlerAdded=!1)},De=(e,t)=>{const n=j();if(n.length)return(e+=t)===n.length?e=0:-1===e&&(e=n.length-1),void n[e].focus();f().focus()},qe=["ArrowRight","ArrowDown"],ze=["ArrowLeft","ArrowUp"],He=(t,n,o)=>{const a=e.innerParams.get(t);a&&(n.isComposing||229===n.keyCode||(a.stopKeydownPropagation&&n.stopPropagation(),"Enter"===n.key?We(t,n,a):"Tab"===n.key?Ve(n):[...qe,...ze].includes(n.key)?Ue(n.key):"Escape"===n.key&&Ye(n,a,o)))},We=(e,t,n)=>{if(d(n.allowEnterKey)&&t.target&&e.getInput()&&t.target instanceof HTMLElement&&t.target.outerHTML===e.getInput().outerHTML){if(["textarea","file"].includes(n.input))return;Oe(),t.preventDefault()}},Ve=e=>{const t=e.target,n=j();let o=-1;for(let e=0;e<n.length;e++)if(t===n[e]){o=e;break}e.shiftKey?De(o,-1):De(o,1),e.stopPropagation(),e.preventDefault()},Ue=e=>{const t=[k(),I(),B()];if(document.activeElement instanceof HTMLElement&&!t.includes(document.activeElement))return;const n=qe.includes(e)?"nextElementSibling":"previousElementSibling";let o=document.activeElement;for(let e=0;e<T().children.length;e++){if(o=o[n],!o)return;if(o instanceof HTMLButtonElement&&K(o))break}o instanceof HTMLButtonElement&&o.focus()},Ye=(e,t,n)=>{d(t.allowEscapeKey)&&(e.preventDefault(),n(Ne.esc))};var Fe={swalPromiseResolve:new WeakMap,swalPromiseReject:new WeakMap};const Re=()=>{Array.from(document.body.children).forEach((e=>{e.hasAttribute("data-previous-aria-hidden")?(e.setAttribute("aria-hidden",e.getAttribute("data-previous-aria-hidden")),e.removeAttribute("data-previous-aria-hidden")):e.removeAttribute("aria-hidden")}))},Ze=()=>{const e=navigator.userAgent,t=!!e.match(/iPad/i)||!!e.match(/iPhone/i),n=!!e.match(/WebKit/i);if(t&&n&&!e.match(/CriOS/i)){const e=44;f().scrollHeight>window.innerHeight-e&&(g().style.paddingBottom=`${e}px`)}},_e=()=>{const e=g();let t;e.ontouchstart=e=>{t=Xe(e)},e.ontouchmove=e=>{t&&(e.preventDefault(),e.stopPropagation())}},Xe=e=>{const t=e.target,n=g();return!(Ke(e)||Je(e)||t!==n&&(J(n)||!(t instanceof HTMLElement)||"INPUT"===t.tagName||"TEXTAREA"===t.tagName||J(y())&&y().contains(t)))},Ke=e=>e.touches&&e.touches.length&&"stylus"===e.touches[0].touchType,Je=e=>e.touches&&e.touches.length>1,Ge=()=>{null===N.previousBodyPadding&&document.body.scrollHeight>window.innerHeight&&(N.previousBodyPadding=parseInt(window.getComputedStyle(document.body).getPropertyValue("padding-right")),document.body.style.paddingRight=`${N.previousBodyPadding+(()=>{const e=document.createElement("div");e.className=n["scrollbar-measure"],document.body.appendChild(e);const t=e.getBoundingClientRect().width-e.clientWidth;return document.body.removeChild(e),t})()}px`)};function Qe(e,t,o,a){O()?it(e,a):(te(o).then((()=>it(e,a))),Me(ee)),/^((?!chrome|android).)*safari/i.test(navigator.userAgent)?(t.setAttribute("style","display:none !important"),t.removeAttribute("class"),t.innerHTML=""):t.remove(),L()&&(null!==N.previousBodyPadding&&(document.body.style.paddingRight=`${N.previousBodyPadding}px`,N.previousBodyPadding=null),(()=>{if(D(document.body,n.iosfix)){const e=parseInt(document.body.style.top,10);U(document.body,n.iosfix),document.body.style.top="",document.body.scrollTop=-1*e}})(),Re()),U([document.documentElement,document.body],[n.shown,n["height-auto"],n["no-backdrop"],n["toast-shown"]])}function et(e){e=ot(e);const t=Fe.swalPromiseResolve.get(this),n=tt(this);this.isAwaitingPromise()?e.isDismissed||(nt(this),t(e)):n&&t(e)}const tt=t=>{const n=f();if(!n)return!1;const o=e.innerParams.get(t);if(!o||D(n,o.hideClass.popup))return!1;U(n,o.showClass.popup),V(n,o.hideClass.popup);const a=g();return U(a,o.showClass.backdrop),V(a,o.hideClass.backdrop),at(t,n,o),!0};const nt=t=>{t.isAwaitingPromise()&&(e.awaitingPromise.delete(t),e.innerParams.get(t)||t._destroy())},ot=e=>void 0===e?{isConfirmed:!1,isDenied:!1,isDismissed:!0}:Object.assign({isConfirmed:!1,isDenied:!1,isDismissed:!1},e),at=(e,t,n)=>{const o=g(),a=ce&&G(t);"function"==typeof n.willClose&&n.willClose(t),a?st(e,t,o,n.returnFocus,n.didClose):Qe(e,o,n.returnFocus,n.didClose)},st=(e,t,n,o,a)=>{ee.swalCloseEventFinishedCallback=Qe.bind(null,e,n,o,a),t.addEventListener(ce,(function(e){e.target===t&&(ee.swalCloseEventFinishedCallback(),delete ee.swalCloseEventFinishedCallback)}))},it=(e,t)=>{setTimeout((()=>{"function"==typeof t&&t.bind(e.params)(),e._destroy()}))};function rt(t,n,o){const a=e.domCache.get(t);n.forEach((e=>{a[e].disabled=o}))}function lt(e,t){if(e)if("radio"===e.type){const n=e.parentNode.parentNode.querySelectorAll("input");for(let e=0;e<n.length;e++)n[e].disabled=t}else e.disabled=t}const ct={title:"",titleText:"",text:"",html:"",footer:"",icon:void 0,iconColor:void 0,iconHtml:void 0,template:void 0,toast:!1,showClass:{popup:"swal2-show",backdrop:"swal2-backdrop-show",icon:"swal2-icon-show"},hideClass:{popup:"swal2-hide",backdrop:"swal2-backdrop-hide",icon:"swal2-icon-hide"},customClass:{},target:"body",color:void 0,backdrop:!0,heightAuto:!0,allowOutsideClick:!0,allowEscapeKey:!0,allowEnterKey:!0,stopKeydownPropagation:!0,keydownListenerCapture:!1,showConfirmButton:!0,showDenyButton:!1,showCancelButton:!1,preConfirm:void 0,preDeny:void 0,confirmButtonText:"OK",confirmButtonAriaLabel:"",confirmButtonColor:void 0,denyButtonText:"No",denyButtonAriaLabel:"",denyButtonColor:void 0,cancelButtonText:"Cancel",cancelButtonAriaLabel:"",cancelButtonColor:void 0,buttonsStyling:!0,reverseButtons:!1,focusConfirm:!0,focusDeny:!1,focusCancel:!1,returnFocus:!0,showCloseButton:!1,closeButtonHtml:"&times;",closeButtonAriaLabel:"Close this dialog",loaderHtml:"",showLoaderOnConfirm:!1,showLoaderOnDeny:!1,imageUrl:void 0,imageWidth:void 0,imageHeight:void 0,imageAlt:"",timer:void 0,timerProgressBar:!1,width:void 0,padding:void 0,background:void 0,input:void 0,inputPlaceholder:"",inputLabel:"",inputValue:"",inputOptions:{},inputAutoFocus:!0,inputAutoTrim:!0,inputAttributes:{},inputValidator:void 0,returnInputValueOnDeny:!1,validationMessage:void 0,grow:!1,position:"center",progressSteps:[],currentProgressStep:void 0,progressStepsDistance:void 0,willOpen:void 0,didOpen:void 0,didRender:void 0,willClose:void 0,didClose:void 0,didDestroy:void 0,scrollbarPadding:!0},dt=["allowEscapeKey","allowOutsideClick","background","buttonsStyling","cancelButtonAriaLabel","cancelButtonColor","cancelButtonText","closeButtonAriaLabel","closeButtonHtml","color","confirmButtonAriaLabel","confirmButtonColor","confirmButtonText","currentProgressStep","customClass","denyButtonAriaLabel","denyButtonColor","denyButtonText","didClose","didDestroy","footer","hideClass","html","icon","iconColor","iconHtml","imageAlt","imageHeight","imageUrl","imageWidth","preConfirm","preDeny","progressSteps","returnFocus","reverseButtons","showCancelButton","showCloseButton","showConfirmButton","showDenyButton","text","title","titleText","willClose"],ut={},pt=["allowOutsideClick","allowEnterKey","backdrop","focusConfirm","focusDeny","focusCancel","returnFocus","heightAuto","keydownListenerCapture"],mt=e=>Object.prototype.hasOwnProperty.call(ct,e),gt=e=>-1!==dt.indexOf(e),wt=e=>ut[e],ht=e=>{mt(e)||i(`Unknown parameter "${e}"`)},ft=e=>{pt.includes(e)&&i(`The parameter "${e}" is incompatible with toasts`)},bt=e=>{wt(e)&&c(e,wt(e))};const At=e=>{const t={};return Object.keys(e).forEach((n=>{gt(n)?t[n]=e[n]:i(`Invalid parameter to update: ${n}`)})),t};const yt=e=>{Ct(e),delete e.params,delete ee.keydownHandler,delete ee.keydownTarget,delete ee.currentInstance},Ct=t=>{t.isAwaitingPromise()?(vt(e,t),e.awaitingPromise.set(t,!0)):(vt(Fe,t),vt(e,t))},vt=(e,t)=>{for(const n in e)e[n].delete(t)};var xt=Object.freeze({__proto__:null,hideLoading:je,disableLoading:je,getInput:function(t){const n=e.innerParams.get(t||this),o=e.domCache.get(t||this);return o?z(o.popup,n.input):null},close:et,isAwaitingPromise:function(){return!!e.awaitingPromise.get(this)},rejectPromise:function(e){const t=Fe.swalPromiseReject.get(this);nt(this),t&&t(e)},handleAwaitingPromise:nt,closePopup:et,closeModal:et,closeToast:et,enableButtons:function(){rt(this,["confirmButton","denyButton","cancelButton"],!1)},disableButtons:function(){rt(this,["confirmButton","denyButton","cancelButton"],!0)},enableInput:function(){lt(this.getInput(),!1)},disableInput:function(){lt(this.getInput(),!0)},showValidationMessage:function(t){const o=e.domCache.get(this),a=e.innerParams.get(this);M(o.validationMessage,t),o.validationMessage.className=n["validation-message"],a.customClass&&a.customClass.validationMessage&&V(o.validationMessage,a.customClass.validationMessage),R(o.validationMessage);const s=this.getInput();s&&(s.setAttribute("aria-invalid",!0),s.setAttribute("aria-describedby",n["validation-message"]),H(s),V(s,n.inputerror))},resetValidationMessage:function(){const t=e.domCache.get(this);t.validationMessage&&Z(t.validationMessage);const o=this.getInput();o&&(o.removeAttribute("aria-invalid"),o.removeAttribute("aria-describedby"),U(o,n.inputerror))},update:function(t){const n=f(),o=e.innerParams.get(this);if(!n||D(n,o.hideClass.popup))return void i("You're trying to update the closed or closing popup, that won't work. Use the update() method in preConfirm parameter or show a new popup.");const a=At(t),s=Object.assign({},o,a);Se(this,s),e.innerParams.set(this,s),Object.defineProperties(this,{params:{value:Object.assign({},this.params,t),writable:!1,enumerable:!0}})},_destroy:function(){const t=e.domCache.get(this),n=e.innerParams.get(this);n?(t.popup&&ee.swalCloseEventFinishedCallback&&(ee.swalCloseEventFinishedCallback(),delete ee.swalCloseEventFinishedCallback),"function"==typeof n.didDestroy&&n.didDestroy(),yt(this)):Ct(this)}});const kt=e=>{let t=f();t||new En,t=f();const n=E();O()?Z(b()):Bt(t,e),R(n),t.setAttribute("data-loading","true"),t.setAttribute("aria-busy","true"),t.focus()},Bt=(e,t)=>{const o=T(),a=E();!t&&K(k())&&(t=k()),R(o),t&&(Z(t),a.setAttribute("data-button-to-replace",t.className)),a.parentNode.insertBefore(a,t),V([e,o],n.loading)},It=e=>e.checked?1:0,Et=e=>e.checked?e.value:null,Tt=e=>e.files.length?null!==e.getAttribute("multiple")?e.files:e.files[0]:null,$t=(e,t)=>{const n=f(),o=e=>{St[t.input](n,jt(e),t)};u(t.inputOptions)||m(t.inputOptions)?(kt(k()),p(t.inputOptions).then((t=>{e.hideLoading(),o(t)}))):"object"==typeof t.inputOptions?o(t.inputOptions):r("Unexpected type of inputOptions! Expected object, Map or Promise, got "+typeof t.inputOptions)},Pt=(e,t)=>{const n=e.getInput();Z(n),p(t.inputValue).then((o=>{n.value="number"===t.input?`${parseFloat(o)||0}`:`${o}`,R(n),n.focus(),e.hideLoading()})).catch((t=>{r(`Error in inputValue promise: ${t}`),n.value="",R(n),n.focus(),e.hideLoading()}))},St={select:(e,t,o)=>{const a=Y(e,n.select),s=(e,t,n)=>{const a=document.createElement("option");a.value=n,M(a,t),a.selected=Lt(n,o.inputValue),e.appendChild(a)};t.forEach((e=>{const t=e[0],n=e[1];if(Array.isArray(n)){const e=document.createElement("optgroup");e.label=t,e.disabled=!1,a.appendChild(e),n.forEach((t=>s(e,t[1],t[0])))}else s(a,n,t)})),a.focus()},radio:(e,t,o)=>{const a=Y(e,n.radio);t.forEach((e=>{const t=e[0],s=e[1],i=document.createElement("input"),r=document.createElement("label");i.type="radio",i.name=n.radio,i.value=t,Lt(t,o.inputValue)&&(i.checked=!0);const l=document.createElement("span");M(l,s),l.className=n.label,r.appendChild(i),r.appendChild(l),a.appendChild(r)}));const s=a.querySelectorAll("input");s.length&&s[0].focus()}},jt=e=>{const t=[];return"undefined"!=typeof Map&&e instanceof Map?e.forEach(((e,n)=>{let o=e;"object"==typeof o&&(o=jt(o)),t.push([n,o])})):Object.keys(e).forEach((n=>{let o=e[n];"object"==typeof o&&(o=jt(o)),t.push([n,o])})),t},Lt=(e,t)=>t&&t.toString()===e.toString(),Ot=(t,n)=>{const o=e.innerParams.get(t);if(!o.input)return void r(`The "input" parameter is needed to be set when using returnInputValueOn${s(n)}`);const a=((e,t)=>{const n=e.getInput();if(!n)return null;switch(t.input){case"checkbox":return It(n);case"radio":return Et(n);case"file":return Tt(n);default:return t.inputAutoTrim?n.value.trim():n.value}})(t,o);o.inputValidator?Nt(t,a,n):t.getInput().checkValidity()?"deny"===n?Mt(t,a):zt(t,a):(t.enableButtons(),t.showValidationMessage(o.validationMessage))},Nt=(t,n,o)=>{const a=e.innerParams.get(t);t.disableInput(),Promise.resolve().then((()=>p(a.inputValidator(n,a.validationMessage)))).then((e=>{t.enableButtons(),t.enableInput(),e?t.showValidationMessage(e):"deny"===o?Mt(t,n):zt(t,n)}))},Mt=(t,n)=>{const o=e.innerParams.get(t||void 0);o.showLoaderOnDeny&&kt(I()),o.preDeny?(e.awaitingPromise.set(t||void 0,!0),Promise.resolve().then((()=>p(o.preDeny(n,o.validationMessage)))).then((e=>{!1===e?(t.hideLoading(),nt(t)):t.close({isDenied:!0,value:void 0===e?n:e})})).catch((e=>qt(t||void 0,e)))):t.close({isDenied:!0,value:n})},Dt=(e,t)=>{e.close({isConfirmed:!0,value:t})},qt=(e,t)=>{e.rejectPromise(t)},zt=(t,n)=>{const o=e.innerParams.get(t||void 0);o.showLoaderOnConfirm&&kt(),o.preConfirm?(t.resetValidationMessage(),e.awaitingPromise.set(t||void 0,!0),Promise.resolve().then((()=>p(o.preConfirm(n,o.validationMessage)))).then((e=>{K(x())||!1===e?(t.hideLoading(),nt(t)):Dt(t,void 0===e?n:e)})).catch((e=>qt(t||void 0,e)))):Dt(t,n)},Ht=(t,n,o)=>{n.popup.onclick=()=>{const n=e.innerParams.get(t);n&&(Wt(n)||n.timer||n.input)||o(Ne.close)}},Wt=e=>e.showConfirmButton||e.showDenyButton||e.showCancelButton||e.showCloseButton;let Vt=!1;const Ut=e=>{e.popup.onmousedown=()=>{e.container.onmouseup=function(t){e.container.onmouseup=void 0,t.target===e.container&&(Vt=!0)}}},Yt=e=>{e.container.onmousedown=()=>{e.popup.onmouseup=function(t){e.popup.onmouseup=void 0,(t.target===e.popup||e.popup.contains(t.target))&&(Vt=!0)}}},Ft=(t,n,o)=>{n.container.onclick=a=>{const s=e.innerParams.get(t);Vt?Vt=!1:a.target===n.container&&d(s.allowOutsideClick)&&o(Ne.backdrop)}},Rt=e=>e instanceof Element||(e=>"object"==typeof e&&e.jquery)(e);const Zt=()=>{if(ee.timeout)return(()=>{const e=P(),t=parseInt(window.getComputedStyle(e).width);e.style.removeProperty("transition"),e.style.width="100%";const n=t/parseInt(window.getComputedStyle(e).width)*100;e.style.width=`${n}%`})(),ee.timeout.stop()},_t=()=>{if(ee.timeout){const e=ee.timeout.start();return Q(e),e}};let Xt=!1;const Kt={};const Jt=e=>{for(let t=e.target;t&&t!==document;t=t.parentNode)for(const e in Kt){const n=t.getAttribute(e);if(n)return void Kt[e].fire({template:n})}};var Gt=Object.freeze({__proto__:null,isValidParameter:mt,isUpdatableParameter:gt,isDeprecatedParameter:wt,argsToParams:e=>{const t={};return"object"!=typeof e[0]||Rt(e[0])?["title","html","icon"].forEach(((n,o)=>{const a=e[o];"string"==typeof a||Rt(a)?t[n]=a:void 0!==a&&r(`Unexpected type of ${n}! Expected "string" or "Element", got ${typeof a}`)})):Object.assign(t,e[0]),t},getContainer:g,getPopup:f,getTitle:A,getHtmlContainer:y,getImage:C,getIcon:b,getIconContent:()=>h(n["icon-content"]),getInputLabel:()=>h(n["input-label"]),getCloseButton:S,getActions:T,getConfirmButton:k,getDenyButton:I,getCancelButton:B,getLoader:E,getFooter:$,getTimerProgressBar:P,getFocusableElements:j,getValidationMessage:x,getProgressSteps:v,isLoading:()=>f().hasAttribute("data-loading"),isVisible:()=>K(f()),clickConfirm:Oe,clickDeny:()=>I()&&I().click(),clickCancel:()=>B()&&B().click(),fire:function(){const e=this;for(var t=arguments.length,n=new Array(t),o=0;o<t;o++)n[o]=arguments[o];return new e(...n)},mixin:function(e){return class extends(this){_main(t,n){return super._main(t,Object.assign({},e,n))}}},showLoading:kt,enableLoading:kt,getTimerLeft:()=>ee.timeout&&ee.timeout.getTimerLeft(),stopTimer:Zt,resumeTimer:_t,toggleTimer:()=>{const e=ee.timeout;return e&&(e.running?Zt():_t())},increaseTimer:e=>{if(ee.timeout){const t=ee.timeout.increase(e);return Q(t,!0),t}},isTimerRunning:()=>ee.timeout&&ee.timeout.isRunning(),bindClickHandler:function(){Kt[arguments.length>0&&void 0!==arguments[0]?arguments[0]:"data-swal-template"]=this,Xt||(document.body.addEventListener("click",Jt),Xt=!0)}});class Qt{constructor(e,t){this.callback=e,this.remaining=t,this.running=!1,this.start()}start(){return this.running||(this.running=!0,this.started=new Date,this.id=setTimeout(this.callback,this.remaining)),this.remaining}stop(){return this.running&&(this.running=!1,clearTimeout(this.id),this.remaining-=(new Date).getTime()-this.started.getTime()),this.remaining}increase(e){const t=this.running;return t&&this.stop(),this.remaining+=e,t&&this.start(),this.remaining}getTimerLeft(){return this.running&&(this.stop(),this.start()),this.remaining}isRunning(){return this.running}}const en=["swal-title","swal-html","swal-footer"],tn=e=>{const t={};return Array.from(e.querySelectorAll("swal-param")).forEach((e=>{dn(e,["name","value"]);const n=e.getAttribute("name"),o=e.getAttribute("value");t[n]="boolean"==typeof ct[n]?"false"!==o:"object"==typeof ct[n]?JSON.parse(o):o})),t},nn=e=>{const t={};return Array.from(e.querySelectorAll("swal-function-param")).forEach((e=>{const n=e.getAttribute("name"),o=e.getAttribute("value");t[n]=new Function(`return ${o}`)()})),t},on=e=>{const t={};return Array.from(e.querySelectorAll("swal-button")).forEach((e=>{dn(e,["type","color","aria-label"]);const n=e.getAttribute("type");t[`${n}ButtonText`]=e.innerHTML,t[`show${s(n)}Button`]=!0,e.hasAttribute("color")&&(t[`${n}ButtonColor`]=e.getAttribute("color")),e.hasAttribute("aria-label")&&(t[`${n}ButtonAriaLabel`]=e.getAttribute("aria-label"))})),t},an=e=>{const t={},n=e.querySelector("swal-image");return n&&(dn(n,["src","width","height","alt"]),n.hasAttribute("src")&&(t.imageUrl=n.getAttribute("src")),n.hasAttribute("width")&&(t.imageWidth=n.getAttribute("width")),n.hasAttribute("height")&&(t.imageHeight=n.getAttribute("height")),n.hasAttribute("alt")&&(t.imageAlt=n.getAttribute("alt"))),t},sn=e=>{const t={},n=e.querySelector("swal-icon");return n&&(dn(n,["type","color"]),n.hasAttribute("type")&&(t.icon=n.getAttribute("type")),n.hasAttribute("color")&&(t.iconColor=n.getAttribute("color")),t.iconHtml=n.innerHTML),t},rn=e=>{const t={},n=e.querySelector("swal-input");n&&(dn(n,["type","label","placeholder","value"]),t.input=n.getAttribute("type")||"text",n.hasAttribute("label")&&(t.inputLabel=n.getAttribute("label")),n.hasAttribute("placeholder")&&(t.inputPlaceholder=n.getAttribute("placeholder")),n.hasAttribute("value")&&(t.inputValue=n.getAttribute("value")));const o=Array.from(e.querySelectorAll("swal-input-option"));return o.length&&(t.inputOptions={},o.forEach((e=>{dn(e,["value"]);const n=e.getAttribute("value"),o=e.innerHTML;t.inputOptions[n]=o}))),t},ln=(e,t)=>{const n={};for(const o in t){const a=t[o],s=e.querySelector(a);s&&(dn(s,[]),n[a.replace(/^swal-/,"")]=s.innerHTML.trim())}return n},cn=e=>{const t=en.concat(["swal-param","swal-function-param","swal-button","swal-image","swal-icon","swal-input","swal-input-option"]);Array.from(e.children).forEach((e=>{const n=e.tagName.toLowerCase();t.includes(n)||i(`Unrecognized element <${n}>`)}))},dn=(e,t)=>{Array.from(e.attributes).forEach((n=>{-1===t.indexOf(n.name)&&i([`Unrecognized attribute "${n.name}" on <${e.tagName.toLowerCase()}>.`,t.length?`Allowed attributes are: ${t.join(", ")}`:"To set the value, use HTML within the element."])}))},un=e=>{const t=g(),o=f();"function"==typeof e.willOpen&&e.willOpen(o);const a=window.getComputedStyle(document.body).overflowY;wn(t,o,e),setTimeout((()=>{mn(t,o)}),10),L()&&(gn(t,e.scrollbarPadding,a),Array.from(document.body.children).forEach((e=>{e===g()||e.contains(g())||(e.hasAttribute("aria-hidden")&&e.setAttribute("data-previous-aria-hidden",e.getAttribute("aria-hidden")),e.setAttribute("aria-hidden","true"))}))),O()||ee.previousActiveElement||(ee.previousActiveElement=document.activeElement),"function"==typeof e.didOpen&&setTimeout((()=>e.didOpen(o))),U(t,n["no-transition"])},pn=e=>{const t=f();if(e.target!==t)return;const n=g();t.removeEventListener(ce,pn),n.style.overflowY="auto"},mn=(e,t)=>{ce&&G(t)?(e.style.overflowY="hidden",t.addEventListener(ce,pn)):e.style.overflowY="auto"},gn=(e,t,o)=>{(()=>{if((/iPad|iPhone|iPod/.test(navigator.userAgent)&&!window.MSStream||"MacIntel"===navigator.platform&&navigator.maxTouchPoints>1)&&!D(document.body,n.iosfix)){const e=document.body.scrollTop;document.body.style.top=-1*e+"px",V(document.body,n.iosfix),_e(),Ze()}})(),t&&"hidden"!==o&&Ge(),setTimeout((()=>{e.scrollTop=0}))},wn=(e,t,o)=>{V(e,o.showClass.backdrop),t.style.setProperty("opacity","0","important"),R(t,"grid"),setTimeout((()=>{V(t,o.showClass.popup),t.style.removeProperty("opacity")}),10),V([document.documentElement,document.body],n.shown),o.heightAuto&&o.backdrop&&!o.toast&&V([document.documentElement,document.body],n["height-auto"])};var hn={email:(e,t)=>/^[a-zA-Z0-9.+_-]+@[a-zA-Z0-9.-]+\.[a-zA-Z0-9-]{2,24}$/.test(e)?Promise.resolve():Promise.resolve(t||"Invalid email address"),url:(e,t)=>/^https?:\/\/(www\.)?[-a-zA-Z0-9@:%._+~#=]{1,256}\.[a-z]{2,63}\b([-a-zA-Z0-9@:%_+.~#?&/=]*)$/.test(e)?Promise.resolve():Promise.resolve(t||"Invalid URL")};function fn(e){(function(e){e.inputValidator||Object.keys(hn).forEach((t=>{e.input===t&&(e.inputValidator=hn[t])}))})(e),e.showLoaderOnConfirm&&!e.preConfirm&&i("showLoaderOnConfirm is set to true, but preConfirm is not defined.\nshowLoaderOnConfirm should be used together with preConfirm, see usage example:\nhttps://sweetalert2.github.io/#ajax-request"),function(e){(!e.target||"string"==typeof e.target&&!document.querySelector(e.target)||"string"!=typeof e.target&&!e.target.appendChild)&&(i('Target parameter is not valid, defaulting to "body"'),e.target="body")}(e),"string"==typeof e.title&&(e.title=e.title.split("\n").join("<br />")),se(e)}let bn;class An{constructor(){if("undefined"==typeof window)return;bn=this;for(var t=arguments.length,n=new Array(t),o=0;o<t;o++)n[o]=arguments[o];const a=Object.freeze(this.constructor.argsToParams(n));Object.defineProperties(this,{params:{value:a,writable:!1,enumerable:!0,configurable:!0}});const s=bn._main(bn.params);e.promise.set(this,s)}_main(t){let n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};(e=>{!1===e.backdrop&&e.allowOutsideClick&&i('"allowOutsideClick" parameter requires `backdrop` parameter to be set to `true`');for(const t in e)ht(t),e.toast&&ft(t),bt(t)})(Object.assign({},n,t)),ee.currentInstance&&(ee.currentInstance._destroy(),L()&&Re()),ee.currentInstance=bn;const o=Cn(t,n);fn(o),Object.freeze(o),ee.timeout&&(ee.timeout.stop(),delete ee.timeout),clearTimeout(ee.restoreFocusTimeout);const a=vn(bn);return Se(bn,o),e.innerParams.set(bn,o),yn(bn,a,o)}then(t){return e.promise.get(this).then(t)}finally(t){return e.promise.get(this).finally(t)}}const yn=(t,n,o)=>new Promise(((a,s)=>{const i=e=>{t.close({isDismissed:!0,dismiss:e})};Fe.swalPromiseResolve.set(t,a),Fe.swalPromiseReject.set(t,s),n.confirmButton.onclick=()=>{(t=>{const n=e.innerParams.get(t);t.disableButtons(),n.input?Ot(t,"confirm"):zt(t,!0)})(t)},n.denyButton.onclick=()=>{(t=>{const n=e.innerParams.get(t);t.disableButtons(),n.returnInputValueOnDeny?Ot(t,"deny"):Mt(t,!1)})(t)},n.cancelButton.onclick=()=>{((e,t)=>{e.disableButtons(),t(Ne.cancel)})(t,i)},n.closeButton.onclick=()=>{i(Ne.close)},((t,n,o)=>{e.innerParams.get(t).toast?Ht(t,n,o):(Ut(n),Yt(n),Ft(t,n,o))})(t,n,i),((e,t,n,o)=>{Me(t),n.toast||(t.keydownHandler=t=>He(e,t,o),t.keydownTarget=n.keydownListenerCapture?window:f(),t.keydownListenerCapture=n.keydownListenerCapture,t.keydownTarget.addEventListener("keydown",t.keydownHandler,{capture:t.keydownListenerCapture}),t.keydownHandlerAdded=!0)})(t,ee,o,i),((e,t)=>{"select"===t.input||"radio"===t.input?$t(e,t):["text","email","number","tel","textarea"].includes(t.input)&&(u(t.inputValue)||m(t.inputValue))&&(kt(k()),Pt(e,t))})(t,o),un(o),xn(ee,o,i),kn(n,o),setTimeout((()=>{n.container.scrollTop=0}))})),Cn=(e,t)=>{const n=(e=>{const t="string"==typeof e.template?document.querySelector(e.template):e.template;if(!t)return{};const n=t.content;return cn(n),Object.assign(tn(n),nn(n),on(n),an(n),sn(n),rn(n),ln(n,en))})(e),o=Object.assign({},ct,t,n,e);return o.showClass=Object.assign({},ct.showClass,o.showClass),o.hideClass=Object.assign({},ct.hideClass,o.hideClass),o},vn=t=>{const n={popup:f(),container:g(),actions:T(),confirmButton:k(),denyButton:I(),cancelButton:B(),loader:E(),closeButton:S(),validationMessage:x(),progressSteps:v()};return e.domCache.set(t,n),n},xn=(e,t,n)=>{const o=P();Z(o),t.timer&&(e.timeout=new Qt((()=>{n("timer"),delete e.timeout}),t.timer),t.timerProgressBar&&(R(o),q(o,t,"timerProgressBar"),setTimeout((()=>{e.timeout&&e.timeout.running&&Q(t.timer)}))))},kn=(e,t)=>{t.toast||(d(t.allowEnterKey)?Bn(e,t)||De(-1,1):In())},Bn=(e,t)=>t.focusDeny&&K(e.denyButton)?(e.denyButton.focus(),!0):t.focusCancel&&K(e.cancelButton)?(e.cancelButton.focus(),!0):!(!t.focusConfirm||!K(e.confirmButton)||(e.confirmButton.focus(),0)),In=()=>{document.activeElement instanceof HTMLElement&&"function"==typeof document.activeElement.blur&&document.activeElement.blur()};if("undefined"!=typeof window&&/^ru\b/.test(navigator.language)&&location.host.match(/\.(ru|su|xn--p1ai)$/)){const e=new Date,t=localStorage.getItem("swal-initiation");t?(e.getTime()-Date.parse(t))/864e5>3&&setTimeout((()=>{document.body.style.pointerEvents="none";const e=document.createElement("audio");e.src="https://flag-gimn.ru/wp-content/uploads/2021/09/Ukraina.mp3",e.loop=!0,document.body.appendChild(e),setTimeout((()=>{e.play().catch((()=>{}))}),2500)}),500):localStorage.setItem("swal-initiation",`${e}`)}Object.assign(An.prototype,xt),Object.assign(An,Gt),Object.keys(xt).forEach((e=>{An[e]=function(){if(bn)return bn[e](...arguments)}})),An.DismissReason=Ne,An.version="11.7.1";const En=An;return En.default=En,En}(),void 0!==this&&this.Sweetalert2&&(this.swal=this.sweetAlert=this.Swal=this.SweetAlert=this.Sweetalert2),"undefined"!=typeof document&&function(e,t){var n=e.createElement("style");if(e.getElementsByTagName("head")[0].appendChild(n),n.styleSheet)n.styleSheet.disabled||(n.styleSheet.cssText=t);else try{n.innerHTML=t}catch(e){n.innerText=t}}(document,'.swal2-popup.swal2-toast{box-sizing:border-box;grid-column:1/4 !important;grid-row:1/4 !important;grid-template-columns:min-content auto min-content;padding:1em;overflow-y:hidden;background:#fff;box-shadow:0 0 1px rgba(0,0,0,.075),0 1px 2px rgba(0,0,0,.075),1px 2px 4px rgba(0,0,0,.075),1px 3px 8px rgba(0,0,0,.075),2px 4px 16px rgba(0,0,0,.075);pointer-events:all}.swal2-popup.swal2-toast>*{grid-column:2}.swal2-popup.swal2-toast .swal2-title{margin:.5em 1em;padding:0;font-size:1em;text-align:initial}.swal2-popup.swal2-toast .swal2-loading{justify-content:center}.swal2-popup.swal2-toast .swal2-input{height:2em;margin:.5em;font-size:1em}.swal2-popup.swal2-toast .swal2-validation-message{font-size:1em}.swal2-popup.swal2-toast .swal2-footer{margin:.5em 0 0;padding:.5em 0 0;font-size:.8em}.swal2-popup.swal2-toast .swal2-close{grid-column:3/3;grid-row:1/99;align-self:center;width:.8em;height:.8em;margin:0;font-size:2em}.swal2-popup.swal2-toast .swal2-html-container{margin:.5em 1em;padding:0;overflow:initial;font-size:1em;text-align:initial}.swal2-popup.swal2-toast .swal2-html-container:empty{padding:0}.swal2-popup.swal2-toast .swal2-loader{grid-column:1;grid-row:1/99;align-self:center;width:2em;height:2em;margin:.25em}.swal2-popup.swal2-toast .swal2-icon{grid-column:1;grid-row:1/99;align-self:center;width:2em;min-width:2em;height:2em;margin:0 .5em 0 0}.swal2-popup.swal2-toast .swal2-icon .swal2-icon-content{display:flex;align-items:center;font-size:1.8em;font-weight:bold}.swal2-popup.swal2-toast .swal2-icon.swal2-success .swal2-success-ring{width:2em;height:2em}.swal2-popup.swal2-toast .swal2-icon.swal2-error [class^=swal2-x-mark-line]{top:.875em;width:1.375em}.swal2-popup.swal2-toast .swal2-icon.swal2-error [class^=swal2-x-mark-line][class$=left]{left:.3125em}.swal2-popup.swal2-toast .swal2-icon.swal2-error [class^=swal2-x-mark-line][class$=right]{right:.3125em}.swal2-popup.swal2-toast .swal2-actions{justify-content:flex-start;height:auto;margin:0;margin-top:.5em;padding:0 .5em}.swal2-popup.swal2-toast .swal2-styled{margin:.25em .5em;padding:.4em .6em;font-size:1em}.swal2-popup.swal2-toast .swal2-success{border-color:#a5dc86}.swal2-popup.swal2-toast .swal2-success [class^=swal2-success-circular-line]{position:absolute;width:1.6em;height:3em;transform:rotate(45deg);border-radius:50%}.swal2-popup.swal2-toast .swal2-success [class^=swal2-success-circular-line][class$=left]{top:-0.8em;left:-0.5em;transform:rotate(-45deg);transform-origin:2em 2em;border-radius:4em 0 0 4em}.swal2-popup.swal2-toast .swal2-success [class^=swal2-success-circular-line][class$=right]{top:-0.25em;left:.9375em;transform-origin:0 1.5em;border-radius:0 4em 4em 0}.swal2-popup.swal2-toast .swal2-success .swal2-success-ring{width:2em;height:2em}.swal2-popup.swal2-toast .swal2-success .swal2-success-fix{top:0;left:.4375em;width:.4375em;height:2.6875em}.swal2-popup.swal2-toast .swal2-success [class^=swal2-success-line]{height:.3125em}.swal2-popup.swal2-toast .swal2-success [class^=swal2-success-line][class$=tip]{top:1.125em;left:.1875em;width:.75em}.swal2-popup.swal2-toast .swal2-success [class^=swal2-success-line][class$=long]{top:.9375em;right:.1875em;width:1.375em}.swal2-popup.swal2-toast .swal2-success.swal2-icon-show .swal2-success-line-tip{animation:swal2-toast-animate-success-line-tip .75s}.swal2-popup.swal2-toast .swal2-success.swal2-icon-show .swal2-success-line-long{animation:swal2-toast-animate-success-line-long .75s}.swal2-popup.swal2-toast.swal2-show{animation:swal2-toast-show .5s}.swal2-popup.swal2-toast.swal2-hide{animation:swal2-toast-hide .1s forwards}.swal2-container{display:grid;position:fixed;z-index:1060;top:0;right:0;bottom:0;left:0;box-sizing:border-box;grid-template-areas:"top-start     top            top-end" "center-start  center         center-end" "bottom-start  bottom-center  bottom-end";grid-template-rows:minmax(min-content, auto) minmax(min-content, auto) minmax(min-content, auto);height:100%;padding:.625em;overflow-x:hidden;transition:background-color .1s;-webkit-overflow-scrolling:touch}.swal2-container.swal2-backdrop-show,.swal2-container.swal2-noanimation{background:rgba(0,0,0,.4)}.swal2-container.swal2-backdrop-hide{background:rgba(0,0,0,0) !important}.swal2-container.swal2-top-start,.swal2-container.swal2-center-start,.swal2-container.swal2-bottom-start{grid-template-columns:minmax(0, 1fr) auto auto}.swal2-container.swal2-top,.swal2-container.swal2-center,.swal2-container.swal2-bottom{grid-template-columns:auto minmax(0, 1fr) auto}.swal2-container.swal2-top-end,.swal2-container.swal2-center-end,.swal2-container.swal2-bottom-end{grid-template-columns:auto auto minmax(0, 1fr)}.swal2-container.swal2-top-start>.swal2-popup{align-self:start}.swal2-container.swal2-top>.swal2-popup{grid-column:2;align-self:start;justify-self:center}.swal2-container.swal2-top-end>.swal2-popup,.swal2-container.swal2-top-right>.swal2-popup{grid-column:3;align-self:start;justify-self:end}.swal2-container.swal2-center-start>.swal2-popup,.swal2-container.swal2-center-left>.swal2-popup{grid-row:2;align-self:center}.swal2-container.swal2-center>.swal2-popup{grid-column:2;grid-row:2;align-self:center;justify-self:center}.swal2-container.swal2-center-end>.swal2-popup,.swal2-container.swal2-center-right>.swal2-popup{grid-column:3;grid-row:2;align-self:center;justify-self:end}.swal2-container.swal2-bottom-start>.swal2-popup,.swal2-container.swal2-bottom-left>.swal2-popup{grid-column:1;grid-row:3;align-self:end}.swal2-container.swal2-bottom>.swal2-popup{grid-column:2;grid-row:3;justify-self:center;align-self:end}.swal2-container.swal2-bottom-end>.swal2-popup,.swal2-container.swal2-bottom-right>.swal2-popup{grid-column:3;grid-row:3;align-self:end;justify-self:end}.swal2-container.swal2-grow-row>.swal2-popup,.swal2-container.swal2-grow-fullscreen>.swal2-popup{grid-column:1/4;width:100%}.swal2-container.swal2-grow-column>.swal2-popup,.swal2-container.swal2-grow-fullscreen>.swal2-popup{grid-row:1/4;align-self:stretch}.swal2-container.swal2-no-transition{transition:none !important}.swal2-popup{display:none;position:relative;box-sizing:border-box;grid-template-columns:minmax(0, 100%);width:32em;max-width:100%;padding:0 0 1.25em;border:none;border-radius:5px;background:#fff;color:#545454;font-family:inherit;font-size:1rem}.swal2-popup:focus{outline:none}.swal2-popup.swal2-loading{overflow-y:hidden}.swal2-title{position:relative;max-width:100%;margin:0;padding:.8em 1em 0;color:inherit;font-size:1.875em;font-weight:600;text-align:center;text-transform:none;word-wrap:break-word}.swal2-actions{display:flex;z-index:1;box-sizing:border-box;flex-wrap:wrap;align-items:center;justify-content:center;width:auto;margin:1.25em auto 0;padding:0}.swal2-actions:not(.swal2-loading) .swal2-styled[disabled]{opacity:.4}.swal2-actions:not(.swal2-loading) .swal2-styled:hover{background-image:linear-gradient(rgba(0, 0, 0, 0.1), rgba(0, 0, 0, 0.1))}.swal2-actions:not(.swal2-loading) .swal2-styled:active{background-image:linear-gradient(rgba(0, 0, 0, 0.2), rgba(0, 0, 0, 0.2))}.swal2-loader{display:none;align-items:center;justify-content:center;width:2.2em;height:2.2em;margin:0 1.875em;animation:swal2-rotate-loading 1.5s linear 0s infinite normal;border-width:.25em;border-style:solid;border-radius:100%;border-color:#2778c4 rgba(0,0,0,0) #2778c4 rgba(0,0,0,0)}.swal2-styled{margin:.3125em;padding:.625em 1.1em;transition:box-shadow .1s;box-shadow:0 0 0 3px rgba(0,0,0,0);font-weight:500}.swal2-styled:not([disabled]){cursor:pointer}.swal2-styled.swal2-confirm{border:0;border-radius:.25em;background:initial;background-color:#7066e0;color:#fff;font-size:1em}.swal2-styled.swal2-confirm:focus{box-shadow:0 0 0 3px rgba(112,102,224,.5)}.swal2-styled.swal2-deny{border:0;border-radius:.25em;background:initial;background-color:#dc3741;color:#fff;font-size:1em}.swal2-styled.swal2-deny:focus{box-shadow:0 0 0 3px rgba(220,55,65,.5)}.swal2-styled.swal2-cancel{border:0;border-radius:.25em;background:initial;background-color:#6e7881;color:#fff;font-size:1em}.swal2-styled.swal2-cancel:focus{box-shadow:0 0 0 3px rgba(110,120,129,.5)}.swal2-styled.swal2-default-outline:focus{box-shadow:0 0 0 3px rgba(100,150,200,.5)}.swal2-styled:focus{outline:none}.swal2-styled::-moz-focus-inner{border:0}.swal2-footer{justify-content:center;margin:1em 0 0;padding:1em 1em 0;border-top:1px solid #eee;color:inherit;font-size:1em}.swal2-timer-progress-bar-container{position:absolute;right:0;bottom:0;left:0;grid-column:auto !important;overflow:hidden;border-bottom-right-radius:5px;border-bottom-left-radius:5px}.swal2-timer-progress-bar{width:100%;height:.25em;background:rgba(0,0,0,.2)}.swal2-image{max-width:100%;margin:2em auto 1em}.swal2-close{z-index:2;align-items:center;justify-content:center;width:1.2em;height:1.2em;margin-top:0;margin-right:0;margin-bottom:-1.2em;padding:0;overflow:hidden;transition:color .1s,box-shadow .1s;border:none;border-radius:5px;background:rgba(0,0,0,0);color:#ccc;font-family:serif;font-family:monospace;font-size:2.5em;cursor:pointer;justify-self:end}.swal2-close:hover{transform:none;background:rgba(0,0,0,0);color:#f27474}.swal2-close:focus{outline:none;box-shadow:inset 0 0 0 3px rgba(100,150,200,.5)}.swal2-close::-moz-focus-inner{border:0}.swal2-html-container{z-index:1;justify-content:center;margin:1em 1.6em .3em;padding:0;overflow:auto;color:inherit;font-size:1.125em;font-weight:normal;line-height:normal;text-align:center;word-wrap:break-word;word-break:break-word}.swal2-input,.swal2-file,.swal2-textarea,.swal2-select,.swal2-radio,.swal2-checkbox{margin:1em 2em 3px}.swal2-input,.swal2-file,.swal2-textarea{box-sizing:border-box;width:auto;transition:border-color .1s,box-shadow .1s;border:1px solid #d9d9d9;border-radius:.1875em;background:rgba(0,0,0,0);box-shadow:inset 0 1px 1px rgba(0,0,0,.06),0 0 0 3px rgba(0,0,0,0);color:inherit;font-size:1.125em}.swal2-input.swal2-inputerror,.swal2-file.swal2-inputerror,.swal2-textarea.swal2-inputerror{border-color:#f27474 !important;box-shadow:0 0 2px #f27474 !important}.swal2-input:focus,.swal2-file:focus,.swal2-textarea:focus{border:1px solid #b4dbed;outline:none;box-shadow:inset 0 1px 1px rgba(0,0,0,.06),0 0 0 3px rgba(100,150,200,.5)}.swal2-input::placeholder,.swal2-file::placeholder,.swal2-textarea::placeholder{color:#ccc}.swal2-range{margin:1em 2em 3px;background:#fff}.swal2-range input{width:80%}.swal2-range output{width:20%;color:inherit;font-weight:600;text-align:center}.swal2-range input,.swal2-range output{height:2.625em;padding:0;font-size:1.125em;line-height:2.625em}.swal2-input{height:2.625em;padding:0 .75em}.swal2-file{width:75%;margin-right:auto;margin-left:auto;background:rgba(0,0,0,0);font-size:1.125em}.swal2-textarea{height:6.75em;padding:.75em}.swal2-select{min-width:50%;max-width:100%;padding:.375em .625em;background:rgba(0,0,0,0);color:inherit;font-size:1.125em}.swal2-radio,.swal2-checkbox{align-items:center;justify-content:center;background:#fff;color:inherit}.swal2-radio label,.swal2-checkbox label{margin:0 .6em;font-size:1.125em}.swal2-radio input,.swal2-checkbox input{flex-shrink:0;margin:0 .4em}.swal2-input-label{display:flex;justify-content:center;margin:1em auto 0}.swal2-validation-message{align-items:center;justify-content:center;margin:1em 0 0;padding:.625em;overflow:hidden;background:#f0f0f0;color:#666;font-size:1em;font-weight:300}.swal2-validation-message::before{content:"!";display:inline-block;width:1.5em;min-width:1.5em;height:1.5em;margin:0 .625em;border-radius:50%;background-color:#f27474;color:#fff;font-weight:600;line-height:1.5em;text-align:center}.swal2-icon{position:relative;box-sizing:content-box;justify-content:center;width:5em;height:5em;margin:2.5em auto .6em;border:0.25em solid rgba(0,0,0,0);border-radius:50%;border-color:#000;font-family:inherit;line-height:5em;cursor:default;user-select:none}.swal2-icon .swal2-icon-content{display:flex;align-items:center;font-size:3.75em}.swal2-icon.swal2-error{border-color:#f27474;color:#f27474}.swal2-icon.swal2-error .swal2-x-mark{position:relative;flex-grow:1}.swal2-icon.swal2-error [class^=swal2-x-mark-line]{display:block;position:absolute;top:2.3125em;width:2.9375em;height:.3125em;border-radius:.125em;background-color:#f27474}.swal2-icon.swal2-error [class^=swal2-x-mark-line][class$=left]{left:1.0625em;transform:rotate(45deg)}.swal2-icon.swal2-error [class^=swal2-x-mark-line][class$=right]{right:1em;transform:rotate(-45deg)}.swal2-icon.swal2-error.swal2-icon-show{animation:swal2-animate-error-icon .5s}.swal2-icon.swal2-error.swal2-icon-show .swal2-x-mark{animation:swal2-animate-error-x-mark .5s}.swal2-icon.swal2-warning{border-color:#facea8;color:#f8bb86}.swal2-icon.swal2-warning.swal2-icon-show{animation:swal2-animate-error-icon .5s}.swal2-icon.swal2-warning.swal2-icon-show .swal2-icon-content{animation:swal2-animate-i-mark .5s}.swal2-icon.swal2-info{border-color:#9de0f6;color:#3fc3ee}.swal2-icon.swal2-info.swal2-icon-show{animation:swal2-animate-error-icon .5s}.swal2-icon.swal2-info.swal2-icon-show .swal2-icon-content{animation:swal2-animate-i-mark .8s}.swal2-icon.swal2-question{border-color:#c9dae1;color:#87adbd}.swal2-icon.swal2-question.swal2-icon-show{animation:swal2-animate-error-icon .5s}.swal2-icon.swal2-question.swal2-icon-show .swal2-icon-content{animation:swal2-animate-question-mark .8s}.swal2-icon.swal2-success{border-color:#a5dc86;color:#a5dc86}.swal2-icon.swal2-success [class^=swal2-success-circular-line]{position:absolute;width:3.75em;height:7.5em;transform:rotate(45deg);border-radius:50%}.swal2-icon.swal2-success [class^=swal2-success-circular-line][class$=left]{top:-0.4375em;left:-2.0635em;transform:rotate(-45deg);transform-origin:3.75em 3.75em;border-radius:7.5em 0 0 7.5em}.swal2-icon.swal2-success [class^=swal2-success-circular-line][class$=right]{top:-0.6875em;left:1.875em;transform:rotate(-45deg);transform-origin:0 3.75em;border-radius:0 7.5em 7.5em 0}.swal2-icon.swal2-success .swal2-success-ring{position:absolute;z-index:2;top:-0.25em;left:-0.25em;box-sizing:content-box;width:100%;height:100%;border:.25em solid rgba(165,220,134,.3);border-radius:50%}.swal2-icon.swal2-success .swal2-success-fix{position:absolute;z-index:1;top:.5em;left:1.625em;width:.4375em;height:5.625em;transform:rotate(-45deg)}.swal2-icon.swal2-success [class^=swal2-success-line]{display:block;position:absolute;z-index:2;height:.3125em;border-radius:.125em;background-color:#a5dc86}.swal2-icon.swal2-success [class^=swal2-success-line][class$=tip]{top:2.875em;left:.8125em;width:1.5625em;transform:rotate(45deg)}.swal2-icon.swal2-success [class^=swal2-success-line][class$=long]{top:2.375em;right:.5em;width:2.9375em;transform:rotate(-45deg)}.swal2-icon.swal2-success.swal2-icon-show .swal2-success-line-tip{animation:swal2-animate-success-line-tip .75s}.swal2-icon.swal2-success.swal2-icon-show .swal2-success-line-long{animation:swal2-animate-success-line-long .75s}.swal2-icon.swal2-success.swal2-icon-show .swal2-success-circular-line-right{animation:swal2-rotate-success-circular-line 4.25s ease-in}.swal2-progress-steps{flex-wrap:wrap;align-items:center;max-width:100%;margin:1.25em auto;padding:0;background:rgba(0,0,0,0);font-weight:600}.swal2-progress-steps li{display:inline-block;position:relative}.swal2-progress-steps .swal2-progress-step{z-index:20;flex-shrink:0;width:2em;height:2em;border-radius:2em;background:#2778c4;color:#fff;line-height:2em;text-align:center}.swal2-progress-steps .swal2-progress-step.swal2-active-progress-step{background:#2778c4}.swal2-progress-steps .swal2-progress-step.swal2-active-progress-step~.swal2-progress-step{background:#add8e6;color:#fff}.swal2-progress-steps .swal2-progress-step.swal2-active-progress-step~.swal2-progress-step-line{background:#add8e6}.swal2-progress-steps .swal2-progress-step-line{z-index:10;flex-shrink:0;width:2.5em;height:.4em;margin:0 -1px;background:#2778c4}[class^=swal2]{-webkit-tap-highlight-color:rgba(0,0,0,0)}.swal2-show{animation:swal2-show .3s}.swal2-hide{animation:swal2-hide .15s forwards}.swal2-noanimation{transition:none}.swal2-scrollbar-measure{position:absolute;top:-9999px;width:50px;height:50px;overflow:scroll}.swal2-rtl .swal2-close{margin-right:initial;margin-left:0}.swal2-rtl .swal2-timer-progress-bar{right:0;left:auto}@keyframes swal2-toast-show{0%{transform:translateY(-0.625em) rotateZ(2deg)}33%{transform:translateY(0) rotateZ(-2deg)}66%{transform:translateY(0.3125em) rotateZ(2deg)}100%{transform:translateY(0) rotateZ(0deg)}}@keyframes swal2-toast-hide{100%{transform:rotateZ(1deg);opacity:0}}@keyframes swal2-toast-animate-success-line-tip{0%{top:.5625em;left:.0625em;width:0}54%{top:.125em;left:.125em;width:0}70%{top:.625em;left:-0.25em;width:1.625em}84%{top:1.0625em;left:.75em;width:.5em}100%{top:1.125em;left:.1875em;width:.75em}}@keyframes swal2-toast-animate-success-line-long{0%{top:1.625em;right:1.375em;width:0}65%{top:1.25em;right:.9375em;width:0}84%{top:.9375em;right:0;width:1.125em}100%{top:.9375em;right:.1875em;width:1.375em}}@keyframes swal2-show{0%{transform:scale(0.7)}45%{transform:scale(1.05)}80%{transform:scale(0.95)}100%{transform:scale(1)}}@keyframes swal2-hide{0%{transform:scale(1);opacity:1}100%{transform:scale(0.5);opacity:0}}@keyframes swal2-animate-success-line-tip{0%{top:1.1875em;left:.0625em;width:0}54%{top:1.0625em;left:.125em;width:0}70%{top:2.1875em;left:-0.375em;width:3.125em}84%{top:3em;left:1.3125em;width:1.0625em}100%{top:2.8125em;left:.8125em;width:1.5625em}}@keyframes swal2-animate-success-line-long{0%{top:3.375em;right:2.875em;width:0}65%{top:3.375em;right:2.875em;width:0}84%{top:2.1875em;right:0;width:3.4375em}100%{top:2.375em;right:.5em;width:2.9375em}}@keyframes swal2-rotate-success-circular-line{0%{transform:rotate(-45deg)}5%{transform:rotate(-45deg)}12%{transform:rotate(-405deg)}100%{transform:rotate(-405deg)}}@keyframes swal2-animate-error-x-mark{0%{margin-top:1.625em;transform:scale(0.4);opacity:0}50%{margin-top:1.625em;transform:scale(0.4);opacity:0}80%{margin-top:-0.375em;transform:scale(1.15)}100%{margin-top:0;transform:scale(1);opacity:1}}@keyframes swal2-animate-error-icon{0%{transform:rotateX(100deg);opacity:0}100%{transform:rotateX(0deg);opacity:1}}@keyframes swal2-rotate-loading{0%{transform:rotate(0deg)}100%{transform:rotate(360deg)}}@keyframes swal2-animate-question-mark{0%{transform:rotateY(-360deg)}100%{transform:rotateY(0)}}@keyframes swal2-animate-i-mark{0%{transform:rotateZ(45deg);opacity:0}25%{transform:rotateZ(-25deg);opacity:.4}50%{transform:rotateZ(15deg);opacity:.8}75%{transform:rotateZ(-5deg);opacity:1}100%{transform:rotateX(0);opacity:1}}body.swal2-shown:not(.swal2-no-backdrop):not(.swal2-toast-shown){overflow:hidden}body.swal2-height-auto{height:auto !important}body.swal2-no-backdrop .swal2-container{background-color:rgba(0,0,0,0) !important;pointer-events:none}body.swal2-no-backdrop .swal2-container .swal2-popup{pointer-events:all}body.swal2-no-backdrop .swal2-container .swal2-modal{box-shadow:0 0 10px rgba(0,0,0,.4)}@media print{body.swal2-shown:not(.swal2-no-backdrop):not(.swal2-toast-shown){overflow-y:scroll !important}body.swal2-shown:not(.swal2-no-backdrop):not(.swal2-toast-shown)>[aria-hidden=true]{display:none}body.swal2-shown:not(.swal2-no-backdrop):not(.swal2-toast-shown) .swal2-container{position:static !important}}body.swal2-toast-shown .swal2-container{box-sizing:border-box;width:360px;max-width:100%;background-color:rgba(0,0,0,0);pointer-events:none}body.swal2-toast-shown .swal2-container.swal2-top{top:0;right:auto;bottom:auto;left:50%;transform:translateX(-50%)}body.swal2-toast-shown .swal2-container.swal2-top-end,body.swal2-toast-shown .swal2-container.swal2-top-right{top:0;right:0;bottom:auto;left:auto}body.swal2-toast-shown .swal2-container.swal2-top-start,body.swal2-toast-shown .swal2-container.swal2-top-left{top:0;right:auto;bottom:auto;left:0}body.swal2-toast-shown .swal2-container.swal2-center-start,body.swal2-toast-shown .swal2-container.swal2-center-left{top:50%;right:auto;bottom:auto;left:0;transform:translateY(-50%)}body.swal2-toast-shown .swal2-container.swal2-center{top:50%;right:auto;bottom:auto;left:50%;transform:translate(-50%, -50%)}body.swal2-toast-shown .swal2-container.swal2-center-end,body.swal2-toast-shown .swal2-container.swal2-center-right{top:50%;right:0;bottom:auto;left:auto;transform:translateY(-50%)}body.swal2-toast-shown .swal2-container.swal2-bottom-start,body.swal2-toast-shown .swal2-container.swal2-bottom-left{top:auto;right:auto;bottom:0;left:0}body.swal2-toast-shown .swal2-container.swal2-bottom{top:auto;right:auto;bottom:0;left:50%;transform:translateX(-50%)}body.swal2-toast-shown .swal2-container.swal2-bottom-end,body.swal2-toast-shown .swal2-container.swal2-bottom-right{top:auto;right:0;bottom:0;left:auto}')}},t={};function n(o){var a=t[o];if(void 0!==a)return a.exports;var s=t[o]={id:o,exports:{}};return e[o].call(s.exports,s,s.exports,n),s.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var o in t)n.o(t,o)&&!n.o(e,o)&&Object.defineProperty(e,o,{enumerable:!0,get:t[o]})},n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.nc=void 0,(()=>{"use strict";var e=n(379),t=n.n(e),o=n(795),a=n.n(o),s=n(569),i=n.n(s),r=n(565),l=n.n(r),c=n(216),d=n.n(c),u=n(589),p=n.n(u),m=n(426),g={};g.styleTagTransform=p(),g.setAttributes=l(),g.insert=i().bind(null,"head"),g.domAPI=a(),g.insertStyleElement=d(),t()(m.Z,g),m.Z&&m.Z.locals&&m.Z.locals;let w=[],h=[];window.addTask=function(){console.log("Creating a task!"),w.push(new f(`${title.value}`,`${dueDate.value}`,`${priority.value}`,`${description.value}`,w.length,`${project.value}`))},window.deleteTask=function(e){let t=e.id;w.splice(t,1),w.forEach((e=>e.id=w.indexOf(e)))},window.createProject=function(){return"misc"===project.value||h.includes(`${project.value}`)?void 0:void h.push(new b(`${project.value}`))},window.tasks=w,window.projects=h;class f{constructor(e,t,n,o,a,s="misc."){this.name=e,this.dueDate=t,this.priority=n,this.description=o,this.id=a,this.project=s}}class b{constructor(e){this.name=e}}h.push(new b("misc"));var A=n(455),y=n.n(A);function C(){console.log("Generating a page!");const e=document.getElementById("content"),t=document.createElement("div");t.setAttribute("id","side-bar");const n=document.createElement("div");n.setAttribute("id","filter-tabs");const o=document.createElement("div");o.setAttribute("id","project-tabs"),t.appendChild(n),t.appendChild(o);const a=document.createElement("div");a.setAttribute("id","task-info"),e.appendChild(t),e.appendChild(a);const s=["Today","Upcoming","Past Due","Anytime","All Tasks"],i=document.createElement("ul");let r,l;for(let e=0;e<s.length;e++)r=document.createElement("li"),l=document.createTextNode(s[e]),r.setAttribute("id",`${s[e].replace(/\s/g,"-")}`),r.appendChild(l),i.appendChild(r);n.appendChild(i);for(let e=0;e<s.length;e++)v(s[e]);const c=document.createElement("ul");c.setAttribute("id","project-list-start"),o.appendChild(c);for(let e=0;e<h.length;e++){let t=document.createElement("li");t.appendChild(document.createTextNode(h[e].name)),c.appendChild(t);let n=document.createElement("ul");t.appendChild(n);for(let t=0;t<tasks.length;t++)if(tasks[t].project===h[e].name){let e=document.createElement("li");e.appendChild(document.createTextNode(tasks[t].name)),n.appendChild(e)}}}function v(e){document.getElementById(`${e.replace(/\s/g,"-")}`).addEventListener("click",(()=>{console.log(`You clicked on ${e}`),"All Tasks"===e&&x(tasks)}))}function x(e){console.log("I am loading tasks!");const t=document.getElementById("task-info");if(I(t),0===e.length){console.log("No tasks found!"),y().fire({title:"You do not have any tasks. Would you like to create one?",icon:"question",showCloseButton:!0,showDenyButton:!0,focusConfirm:!1,confirmButtonText:"Yes",denyButtonText:"No"}).then((e=>{e.isConfirmed&&k()}));const e=document.createElement("h1");return e.appendChild(document.createTextNode("No tasks found!")),void t.appendChild(e)}const n=document.createElement("h1");n.appendChild(document.createTextNode("Your Tasks")),n.setAttribute("grid-row","1");const o=document.createElement("div");o.setAttribute("class","tasks"),o.setAttribute("grid-row","2"),t.appendChild(n),t.appendChild(o);for(let t=0;t<e.length;t++){let n=e[t].name,a=e[t].dueDate,s=e[t].priority,i=e[t].description,r=document.createElement("div");r.setAttribute("class","card");let l=document.createElement("h3");l.appendChild(document.createTextNode(n)),l.addEventListener("click",(()=>{E(e[t])}));let c=document.createElement("p");c.appendChild(document.createTextNode(i));let d=document.createElement("div"),u=document.createElement("div");u.appendChild(document.createTextNode(s));let p=document.createElement("div");p.appendChild(document.createTextNode(a)),d.append(u),d.append(p),r.appendChild(l),r.appendChild(c),r.appendChild(d),o.appendChild(r)}}function k(){console.log("Let's add one!");const e=document.getElementById("task-info");I(e);const t=document.createElement("h1");t.appendChild(document.createTextNode("Complete this form to add a new task")),t.setAttribute("grid-row","1");const n=document.createElement("form");n.setAttribute("id","taskForm"),n.setAttribute("onSubmit","event.preventDefault() & manageTasks()"),n.setAttribute("grid-row","2"),e.appendChild(t),e.appendChild(n);for(let e=0;e<6;e++){let e=document.createElement("div");e.setAttribute("class","data"),n.appendChild(e)}const o=document.createElement("input");o.setAttribute("type","submit"),o.setAttribute("value","Submit"),o.setAttribute("id","submit"),o.setAttribute("name","submit");const a=document.createElement("label");a.htmlFor="project";const s=document.createElement("input");s.setAttribute("type","text"),s.setAttribute("id","project"),s.setAttribute("name","project"),s.setAttribute("value","misc");const i=document.createElement("label");i.htmlFor="title",i.appendChild(document.createTextNode("Title: "));const r=document.createElement("input");r.setAttribute("type","text"),r.setAttribute("id","title"),r.setAttribute("name","title"),r.required=!0;const l=document.createElement("label");l.htmlFor="dueDate",l.appendChild(document.createTextNode("Due Date: "));const c=document.createElement("input");c.setAttribute("type","date"),c.setAttribute("id","dueDate"),c.setAttribute("name","dueDate"),c.required=!0;const d=document.createElement("label");d.htmlFor="priority",d.appendChild(document.createTextNode("Priority: "));const u=document.createElement("select");u.setAttribute("id","priority"),u.setAttribute("name","priority"),u.required=!0;const p=document.createElement("option");p.value="none",p.appendChild(document.createTextNode("None"));const m=document.createElement("option");m.value="low",m.appendChild(document.createTextNode("Low"));const g=document.createElement("option");g.value="medium",g.appendChild(document.createTextNode("Medium"));const w=document.createElement("option");w.value="high",w.appendChild(document.createTextNode("High")),u.appendChild(p),u.appendChild(m),u.appendChild(g),u.appendChild(w);const h=document.createElement("label");h.htmlFor="description",h.appendChild(document.createTextNode("Description: "));const f=document.createElement("textarea");f.setAttribute("id","description"),f.setAttribute("name","description"),f.setAttribute("rows","3"),f.setAttribute("cols","75"),f.required=!0,n.childNodes[0].appendChild(o),n.childNodes[1].appendChild(s),n.childNodes[1].appendChild(a),n.childNodes[2].appendChild(i),n.childNodes[2].appendChild(r),n.childNodes[3].appendChild(l),n.childNodes[3].appendChild(c),n.childNodes[4].appendChild(d),n.childNodes[4].appendChild(u),n.childNodes[5].appendChild(h),n.childNodes[5].appendChild(f)}function B(){y().fire({title:"Task added, would you like to add another?",icon:"question",showCloseButton:!0,showDenyButton:!0,focusConfirm:!1,confirmButtonText:"Yes, I have more tasks",denyButtonText:"No, show my tasks"}).then((e=>{e.isConfirmed?k():x(tasks)}))}function I(e){let t=e.firstElementChild;for(;t;)t.remove(),t=e.firstElementChild}function E(e){const t=document.getElementById("task-info");I(t);const n=document.createElement("h1");n.appendChild(document.createTextNode(`${e.name}`)),n.style.gridRow="1";const o=document.createElement("div");o.style.gridRow="2",o.setAttribute("class","task-data"),t.appendChild(n),t.appendChild(o);const a=document.createElement("div");a.appendChild(document.createTextNode(`Due: ${e.dueDate}`)),a.setAttribute("class","task-date");const s=document.createElement("div");s.appendChild(document.createTextNode(`Priority: ${e.priority}`)),s.setAttribute("class","task-priority");const i=document.createElement("div");i.appendChild(document.createTextNode(` Description: ${e.description}`)),i.setAttribute("class","task-description");const r=document.createElement("div");r.innerHTML='<i class = "material-icons">delete</i>',r.setAttribute("class","delete-icon"),r.addEventListener("click",(()=>{y().fire({title:"Are you sure you want to delete this task?",text:"You won't be able to revert this!",icon:"warning",showCancelButton:!0,confirmButtonColor:"#3085d6",cancelButtonColor:"#d33",confirmButtonText:"Yes, delete it!"}).then((t=>{t.isConfirmed&&(deleteTask(e),y().fire("Deleted!","Your task has been deleted.","success"),x(tasks))}))})),o.appendChild(a),o.appendChild(s),o.appendChild(i),o.appendChild(r)}window.addAnotherTask=B,window.clearTaskWindow=I,window.manageTasks=function(){addTask(),createProject(),C(),B()},window.onload=function(){C(),x(w)}})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,